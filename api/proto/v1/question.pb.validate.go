// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/v1/question.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on HyperTextTag with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HyperTextTag) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HyperTextTag with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HyperTextTagMultiError, or
// nil if none found.
func (m *HyperTextTag) ValidateAll() error {
	return m.validate(true)
}

func (m *HyperTextTag) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Value

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HyperTextTagValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HyperTextTagValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HyperTextTagValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return HyperTextTagMultiError(errors)
	}

	return nil
}

// HyperTextTagMultiError is an error wrapping multiple validation errors
// returned by HyperTextTag.ValidateAll() if the designated constraints aren't met.
type HyperTextTagMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HyperTextTagMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HyperTextTagMultiError) AllErrors() []error { return m }

// HyperTextTagValidationError is the validation error returned by
// HyperTextTag.Validate if the designated constraints aren't met.
type HyperTextTagValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HyperTextTagValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HyperTextTagValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HyperTextTagValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HyperTextTagValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HyperTextTagValidationError) ErrorName() string { return "HyperTextTagValidationError" }

// Error satisfies the builtin error interface
func (e HyperTextTagValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHyperTextTag.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HyperTextTagValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HyperTextTagValidationError{}

// Validate checks the field values on Size with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Size) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Size with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SizeMultiError, or nil if none found.
func (m *Size) ValidateAll() error {
	return m.validate(true)
}

func (m *Size) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Width

	// no validation rules for Height

	if len(errors) > 0 {
		return SizeMultiError(errors)
	}

	return nil
}

// SizeMultiError is an error wrapping multiple validation errors returned by
// Size.ValidateAll() if the designated constraints aren't met.
type SizeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SizeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SizeMultiError) AllErrors() []error { return m }

// SizeValidationError is the validation error returned by Size.Validate if the
// designated constraints aren't met.
type SizeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SizeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SizeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SizeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SizeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SizeValidationError) ErrorName() string { return "SizeValidationError" }

// Error satisfies the builtin error interface
func (e SizeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSize.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SizeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SizeValidationError{}

// Validate checks the field values on QuestionChatSenderAvatar with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QuestionChatSenderAvatar) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuestionChatSenderAvatar with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QuestionChatSenderAvatarMultiError, or nil if none found.
func (m *QuestionChatSenderAvatar) ValidateAll() error {
	return m.validate(true)
}

func (m *QuestionChatSenderAvatar) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Url

	if all {
		switch v := interface{}(m.GetSize()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QuestionChatSenderAvatarValidationError{
					field:  "Size",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QuestionChatSenderAvatarValidationError{
					field:  "Size",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSize()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QuestionChatSenderAvatarValidationError{
				field:  "Size",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QuestionChatSenderAvatarMultiError(errors)
	}

	return nil
}

// QuestionChatSenderAvatarMultiError is an error wrapping multiple validation
// errors returned by QuestionChatSenderAvatar.ValidateAll() if the designated
// constraints aren't met.
type QuestionChatSenderAvatarMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuestionChatSenderAvatarMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuestionChatSenderAvatarMultiError) AllErrors() []error { return m }

// QuestionChatSenderAvatarValidationError is the validation error returned by
// QuestionChatSenderAvatar.Validate if the designated constraints aren't met.
type QuestionChatSenderAvatarValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuestionChatSenderAvatarValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuestionChatSenderAvatarValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuestionChatSenderAvatarValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuestionChatSenderAvatarValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuestionChatSenderAvatarValidationError) ErrorName() string {
	return "QuestionChatSenderAvatarValidationError"
}

// Error satisfies the builtin error interface
func (e QuestionChatSenderAvatarValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuestionChatSenderAvatar.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuestionChatSenderAvatarValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuestionChatSenderAvatarValidationError{}

// Validate checks the field values on QuestionChatSender with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QuestionChatSender) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuestionChatSender with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QuestionChatSenderMultiError, or nil if none found.
func (m *QuestionChatSender) ValidateAll() error {
	return m.validate(true)
}

func (m *QuestionChatSender) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetAvatar()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QuestionChatSenderValidationError{
					field:  "Avatar",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QuestionChatSenderValidationError{
					field:  "Avatar",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAvatar()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QuestionChatSenderValidationError{
				field:  "Avatar",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QuestionChatSenderMultiError(errors)
	}

	return nil
}

// QuestionChatSenderMultiError is an error wrapping multiple validation errors
// returned by QuestionChatSender.ValidateAll() if the designated constraints
// aren't met.
type QuestionChatSenderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuestionChatSenderMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuestionChatSenderMultiError) AllErrors() []error { return m }

// QuestionChatSenderValidationError is the validation error returned by
// QuestionChatSender.Validate if the designated constraints aren't met.
type QuestionChatSenderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuestionChatSenderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuestionChatSenderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuestionChatSenderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuestionChatSenderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuestionChatSenderValidationError) ErrorName() string {
	return "QuestionChatSenderValidationError"
}

// Error satisfies the builtin error interface
func (e QuestionChatSenderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuestionChatSender.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuestionChatSenderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuestionChatSenderValidationError{}

// Validate checks the field values on QuestionChatMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QuestionChatMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuestionChatMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QuestionChatMessageMultiError, or nil if none found.
func (m *QuestionChatMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *QuestionChatMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSender()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QuestionChatMessageValidationError{
					field:  "Sender",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QuestionChatMessageValidationError{
					field:  "Sender",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSender()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QuestionChatMessageValidationError{
				field:  "Sender",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetContent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QuestionChatMessageValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QuestionChatMessageValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QuestionChatMessageValidationError{
				field:  "Content",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QuestionChatMessageMultiError(errors)
	}

	return nil
}

// QuestionChatMessageMultiError is an error wrapping multiple validation
// errors returned by QuestionChatMessage.ValidateAll() if the designated
// constraints aren't met.
type QuestionChatMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuestionChatMessageMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuestionChatMessageMultiError) AllErrors() []error { return m }

// QuestionChatMessageValidationError is the validation error returned by
// QuestionChatMessage.Validate if the designated constraints aren't met.
type QuestionChatMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuestionChatMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuestionChatMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuestionChatMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuestionChatMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuestionChatMessageValidationError) ErrorName() string {
	return "QuestionChatMessageValidationError"
}

// Error satisfies the builtin error interface
func (e QuestionChatMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuestionChatMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuestionChatMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuestionChatMessageValidationError{}

// Validate checks the field values on QuestionOption with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QuestionOption) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuestionOption with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QuestionOptionMultiError,
// or nil if none found.
func (m *QuestionOption) ValidateAll() error {
	return m.validate(true)
}

func (m *QuestionOption) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Value

	if len(errors) > 0 {
		return QuestionOptionMultiError(errors)
	}

	return nil
}

// QuestionOptionMultiError is an error wrapping multiple validation errors
// returned by QuestionOption.ValidateAll() if the designated constraints
// aren't met.
type QuestionOptionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuestionOptionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuestionOptionMultiError) AllErrors() []error { return m }

// QuestionOptionValidationError is the validation error returned by
// QuestionOption.Validate if the designated constraints aren't met.
type QuestionOptionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuestionOptionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuestionOptionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuestionOptionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuestionOptionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuestionOptionValidationError) ErrorName() string { return "QuestionOptionValidationError" }

// Error satisfies the builtin error interface
func (e QuestionOptionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuestionOption.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuestionOptionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuestionOptionValidationError{}

// Validate checks the field values on QuestionOptionTuple with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QuestionOptionTuple) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuestionOptionTuple with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QuestionOptionTupleMultiError, or nil if none found.
func (m *QuestionOptionTuple) ValidateAll() error {
	return m.validate(true)
}

func (m *QuestionOptionTuple) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOption1()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QuestionOptionTupleValidationError{
					field:  "Option1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QuestionOptionTupleValidationError{
					field:  "Option1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOption1()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QuestionOptionTupleValidationError{
				field:  "Option1",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOption2()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QuestionOptionTupleValidationError{
					field:  "Option2",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QuestionOptionTupleValidationError{
					field:  "Option2",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOption2()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QuestionOptionTupleValidationError{
				field:  "Option2",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return QuestionOptionTupleMultiError(errors)
	}

	return nil
}

// QuestionOptionTupleMultiError is an error wrapping multiple validation
// errors returned by QuestionOptionTuple.ValidateAll() if the designated
// constraints aren't met.
type QuestionOptionTupleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuestionOptionTupleMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuestionOptionTupleMultiError) AllErrors() []error { return m }

// QuestionOptionTupleValidationError is the validation error returned by
// QuestionOptionTuple.Validate if the designated constraints aren't met.
type QuestionOptionTupleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuestionOptionTupleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuestionOptionTupleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuestionOptionTupleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuestionOptionTupleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuestionOptionTupleValidationError) ErrorName() string {
	return "QuestionOptionTupleValidationError"
}

// Error satisfies the builtin error interface
func (e QuestionOptionTupleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuestionOptionTuple.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuestionOptionTupleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuestionOptionTupleValidationError{}

// Validate checks the field values on Tag with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Tag) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Tag with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TagMultiError, or nil if none found.
func (m *Tag) ValidateAll() error {
	return m.validate(true)
}

func (m *Tag) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Weight

	if len(errors) > 0 {
		return TagMultiError(errors)
	}

	return nil
}

// TagMultiError is an error wrapping multiple validation errors returned by
// Tag.ValidateAll() if the designated constraints aren't met.
type TagMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TagMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TagMultiError) AllErrors() []error { return m }

// TagValidationError is the validation error returned by Tag.Validate if the
// designated constraints aren't met.
type TagValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TagValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TagValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TagValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TagValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TagValidationError) ErrorName() string { return "TagValidationError" }

// Error satisfies the builtin error interface
func (e TagValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTag.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TagValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TagValidationError{}

// Validate checks the field values on SubQuestion with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SubQuestion) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubQuestion with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SubQuestionMultiError, or
// nil if none found.
func (m *SubQuestion) ValidateAll() error {
	return m.validate(true)
}

func (m *SubQuestion) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Q

	// no validation rules for QuestionType

	for idx, item := range m.GetOptions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SubQuestionValidationError{
						field:  fmt.Sprintf("Options[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SubQuestionValidationError{
						field:  fmt.Sprintf("Options[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SubQuestionValidationError{
					field:  fmt.Sprintf("Options[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SubQuestionMultiError(errors)
	}

	return nil
}

// SubQuestionMultiError is an error wrapping multiple validation errors
// returned by SubQuestion.ValidateAll() if the designated constraints aren't met.
type SubQuestionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubQuestionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubQuestionMultiError) AllErrors() []error { return m }

// SubQuestionValidationError is the validation error returned by
// SubQuestion.Validate if the designated constraints aren't met.
type SubQuestionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubQuestionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubQuestionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubQuestionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubQuestionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubQuestionValidationError) ErrorName() string { return "SubQuestionValidationError" }

// Error satisfies the builtin error interface
func (e SubQuestionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubQuestion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubQuestionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubQuestionValidationError{}

// Validate checks the field values on Question with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Question) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Question with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QuestionMultiError, or nil
// if none found.
func (m *Question) ValidateAll() error {
	return m.validate(true)
}

func (m *Question) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for QuestionType

	if all {
		switch v := interface{}(m.GetContent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QuestionValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QuestionValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QuestionValidationError{
				field:  "Content",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SimpleQuestion

	for idx, item := range m.GetSubQuestions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QuestionValidationError{
						field:  fmt.Sprintf("SubQuestions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QuestionValidationError{
						field:  fmt.Sprintf("SubQuestions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QuestionValidationError{
					field:  fmt.Sprintf("SubQuestions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOptions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QuestionValidationError{
						field:  fmt.Sprintf("Options[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QuestionValidationError{
						field:  fmt.Sprintf("Options[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QuestionValidationError{
					field:  fmt.Sprintf("Options[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOptionTuples() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QuestionValidationError{
						field:  fmt.Sprintf("OptionTuples[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QuestionValidationError{
						field:  fmt.Sprintf("OptionTuples[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QuestionValidationError{
					field:  fmt.Sprintf("OptionTuples[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Difficulty

	// no validation rules for Status

	// no validation rules for Category

	// no validation rules for Explanation

	// no validation rules for CorrectRate

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for TimeLimit

	if len(errors) > 0 {
		return QuestionMultiError(errors)
	}

	return nil
}

// QuestionMultiError is an error wrapping multiple validation errors returned
// by Question.ValidateAll() if the designated constraints aren't met.
type QuestionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuestionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuestionMultiError) AllErrors() []error { return m }

// QuestionValidationError is the validation error returned by
// Question.Validate if the designated constraints aren't met.
type QuestionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuestionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuestionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuestionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuestionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuestionValidationError) ErrorName() string { return "QuestionValidationError" }

// Error satisfies the builtin error interface
func (e QuestionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuestion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuestionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuestionValidationError{}

// Validate checks the field values on QuestionHyperTextTag with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QuestionHyperTextTag) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuestionHyperTextTag with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QuestionHyperTextTagMultiError, or nil if none found.
func (m *QuestionHyperTextTag) ValidateAll() error {
	return m.validate(true)
}

func (m *QuestionHyperTextTag) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Value

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QuestionHyperTextTagValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QuestionHyperTextTagValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QuestionHyperTextTagValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QuestionHyperTextTagMultiError(errors)
	}

	return nil
}

// QuestionHyperTextTagMultiError is an error wrapping multiple validation
// errors returned by QuestionHyperTextTag.ValidateAll() if the designated
// constraints aren't met.
type QuestionHyperTextTagMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuestionHyperTextTagMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuestionHyperTextTagMultiError) AllErrors() []error { return m }

// QuestionHyperTextTagValidationError is the validation error returned by
// QuestionHyperTextTag.Validate if the designated constraints aren't met.
type QuestionHyperTextTagValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuestionHyperTextTagValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuestionHyperTextTagValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuestionHyperTextTagValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuestionHyperTextTagValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuestionHyperTextTagValidationError) ErrorName() string {
	return "QuestionHyperTextTagValidationError"
}

// Error satisfies the builtin error interface
func (e QuestionHyperTextTagValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuestionHyperTextTag.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuestionHyperTextTagValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuestionHyperTextTagValidationError{}

// Validate checks the field values on QuestionSize with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QuestionSize) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuestionSize with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QuestionSizeMultiError, or
// nil if none found.
func (m *QuestionSize) ValidateAll() error {
	return m.validate(true)
}

func (m *QuestionSize) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Width

	// no validation rules for Height

	if len(errors) > 0 {
		return QuestionSizeMultiError(errors)
	}

	return nil
}

// QuestionSizeMultiError is an error wrapping multiple validation errors
// returned by QuestionSize.ValidateAll() if the designated constraints aren't met.
type QuestionSizeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuestionSizeMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuestionSizeMultiError) AllErrors() []error { return m }

// QuestionSizeValidationError is the validation error returned by
// QuestionSize.Validate if the designated constraints aren't met.
type QuestionSizeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuestionSizeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuestionSizeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuestionSizeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuestionSizeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuestionSizeValidationError) ErrorName() string { return "QuestionSizeValidationError" }

// Error satisfies the builtin error interface
func (e QuestionSizeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuestionSize.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuestionSizeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuestionSizeValidationError{}

// Validate checks the field values on QuestionTag with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QuestionTag) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuestionTag with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QuestionTagMultiError, or
// nil if none found.
func (m *QuestionTag) ValidateAll() error {
	return m.validate(true)
}

func (m *QuestionTag) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Weight

	if len(errors) > 0 {
		return QuestionTagMultiError(errors)
	}

	return nil
}

// QuestionTagMultiError is an error wrapping multiple validation errors
// returned by QuestionTag.ValidateAll() if the designated constraints aren't met.
type QuestionTagMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuestionTagMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuestionTagMultiError) AllErrors() []error { return m }

// QuestionTagValidationError is the validation error returned by
// QuestionTag.Validate if the designated constraints aren't met.
type QuestionTagValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuestionTagValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuestionTagValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuestionTagValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuestionTagValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuestionTagValidationError) ErrorName() string { return "QuestionTagValidationError" }

// Error satisfies the builtin error interface
func (e QuestionTagValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuestionTag.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuestionTagValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuestionTagValidationError{}

// Validate checks the field values on QuestionServiceGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QuestionServiceGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuestionServiceGetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QuestionServiceGetRequestMultiError, or nil if none found.
func (m *QuestionServiceGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QuestionServiceGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return QuestionServiceGetRequestMultiError(errors)
	}

	return nil
}

// QuestionServiceGetRequestMultiError is an error wrapping multiple validation
// errors returned by QuestionServiceGetRequest.ValidateAll() if the
// designated constraints aren't met.
type QuestionServiceGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuestionServiceGetRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuestionServiceGetRequestMultiError) AllErrors() []error { return m }

// QuestionServiceGetRequestValidationError is the validation error returned by
// QuestionServiceGetRequest.Validate if the designated constraints aren't met.
type QuestionServiceGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuestionServiceGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuestionServiceGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuestionServiceGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuestionServiceGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuestionServiceGetRequestValidationError) ErrorName() string {
	return "QuestionServiceGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QuestionServiceGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuestionServiceGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuestionServiceGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuestionServiceGetRequestValidationError{}

// Validate checks the field values on QuestionServiceGetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QuestionServiceGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuestionServiceGetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QuestionServiceGetResponseMultiError, or nil if none found.
func (m *QuestionServiceGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QuestionServiceGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetQuestions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QuestionServiceGetResponseValidationError{
						field:  fmt.Sprintf("Questions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QuestionServiceGetResponseValidationError{
						field:  fmt.Sprintf("Questions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QuestionServiceGetResponseValidationError{
					field:  fmt.Sprintf("Questions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QuestionServiceGetResponseMultiError(errors)
	}

	return nil
}

// QuestionServiceGetResponseMultiError is an error wrapping multiple
// validation errors returned by QuestionServiceGetResponse.ValidateAll() if
// the designated constraints aren't met.
type QuestionServiceGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuestionServiceGetResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuestionServiceGetResponseMultiError) AllErrors() []error { return m }

// QuestionServiceGetResponseValidationError is the validation error returned
// by QuestionServiceGetResponse.Validate if the designated constraints aren't met.
type QuestionServiceGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuestionServiceGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuestionServiceGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuestionServiceGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuestionServiceGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuestionServiceGetResponseValidationError) ErrorName() string {
	return "QuestionServiceGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QuestionServiceGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuestionServiceGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuestionServiceGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuestionServiceGetResponseValidationError{}

// Validate checks the field values on QuestionServiceCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QuestionServiceCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuestionServiceCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QuestionServiceCreateRequestMultiError, or nil if none found.
func (m *QuestionServiceCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QuestionServiceCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for QuestionType

	if all {
		switch v := interface{}(m.GetContent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QuestionServiceCreateRequestValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QuestionServiceCreateRequestValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QuestionServiceCreateRequestValidationError{
				field:  "Content",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SimpleQuestion

	for idx, item := range m.GetSubQuestions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QuestionServiceCreateRequestValidationError{
						field:  fmt.Sprintf("SubQuestions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QuestionServiceCreateRequestValidationError{
						field:  fmt.Sprintf("SubQuestions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QuestionServiceCreateRequestValidationError{
					field:  fmt.Sprintf("SubQuestions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOptions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QuestionServiceCreateRequestValidationError{
						field:  fmt.Sprintf("Options[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QuestionServiceCreateRequestValidationError{
						field:  fmt.Sprintf("Options[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QuestionServiceCreateRequestValidationError{
					field:  fmt.Sprintf("Options[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOptionTuples() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QuestionServiceCreateRequestValidationError{
						field:  fmt.Sprintf("OptionTuples[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QuestionServiceCreateRequestValidationError{
						field:  fmt.Sprintf("OptionTuples[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QuestionServiceCreateRequestValidationError{
					field:  fmt.Sprintf("OptionTuples[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Difficulty

	// no validation rules for Status

	// no validation rules for Category

	// no validation rules for Explanation

	// no validation rules for TimeLimit

	if len(errors) > 0 {
		return QuestionServiceCreateRequestMultiError(errors)
	}

	return nil
}

// QuestionServiceCreateRequestMultiError is an error wrapping multiple
// validation errors returned by QuestionServiceCreateRequest.ValidateAll() if
// the designated constraints aren't met.
type QuestionServiceCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuestionServiceCreateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuestionServiceCreateRequestMultiError) AllErrors() []error { return m }

// QuestionServiceCreateRequestValidationError is the validation error returned
// by QuestionServiceCreateRequest.Validate if the designated constraints
// aren't met.
type QuestionServiceCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuestionServiceCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuestionServiceCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuestionServiceCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuestionServiceCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuestionServiceCreateRequestValidationError) ErrorName() string {
	return "QuestionServiceCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QuestionServiceCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuestionServiceCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuestionServiceCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuestionServiceCreateRequestValidationError{}

// Validate checks the field values on QuestionServiceCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QuestionServiceCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuestionServiceCreateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// QuestionServiceCreateResponseMultiError, or nil if none found.
func (m *QuestionServiceCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QuestionServiceCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return QuestionServiceCreateResponseMultiError(errors)
	}

	return nil
}

// QuestionServiceCreateResponseMultiError is an error wrapping multiple
// validation errors returned by QuestionServiceCreateResponse.ValidateAll()
// if the designated constraints aren't met.
type QuestionServiceCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuestionServiceCreateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuestionServiceCreateResponseMultiError) AllErrors() []error { return m }

// QuestionServiceCreateResponseValidationError is the validation error
// returned by QuestionServiceCreateResponse.Validate if the designated
// constraints aren't met.
type QuestionServiceCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuestionServiceCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuestionServiceCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuestionServiceCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuestionServiceCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuestionServiceCreateResponseValidationError) ErrorName() string {
	return "QuestionServiceCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QuestionServiceCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuestionServiceCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuestionServiceCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuestionServiceCreateResponseValidationError{}

// Validate checks the field values on QuestionServiceSearchRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QuestionServiceSearchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuestionServiceSearchRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QuestionServiceSearchRequestMultiError, or nil if none found.
func (m *QuestionServiceSearchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QuestionServiceSearchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Keyword

	// no validation rules for QuestionType

	// no validation rules for Difficulty

	// no validation rules for Category

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return QuestionServiceSearchRequestMultiError(errors)
	}

	return nil
}

// QuestionServiceSearchRequestMultiError is an error wrapping multiple
// validation errors returned by QuestionServiceSearchRequest.ValidateAll() if
// the designated constraints aren't met.
type QuestionServiceSearchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuestionServiceSearchRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuestionServiceSearchRequestMultiError) AllErrors() []error { return m }

// QuestionServiceSearchRequestValidationError is the validation error returned
// by QuestionServiceSearchRequest.Validate if the designated constraints
// aren't met.
type QuestionServiceSearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuestionServiceSearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuestionServiceSearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuestionServiceSearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuestionServiceSearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuestionServiceSearchRequestValidationError) ErrorName() string {
	return "QuestionServiceSearchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QuestionServiceSearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuestionServiceSearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuestionServiceSearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuestionServiceSearchRequestValidationError{}

// Validate checks the field values on QuestionServiceSearchResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QuestionServiceSearchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuestionServiceSearchResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// QuestionServiceSearchResponseMultiError, or nil if none found.
func (m *QuestionServiceSearchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QuestionServiceSearchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetQuestions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QuestionServiceSearchResponseValidationError{
						field:  fmt.Sprintf("Questions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QuestionServiceSearchResponseValidationError{
						field:  fmt.Sprintf("Questions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QuestionServiceSearchResponseValidationError{
					field:  fmt.Sprintf("Questions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return QuestionServiceSearchResponseMultiError(errors)
	}

	return nil
}

// QuestionServiceSearchResponseMultiError is an error wrapping multiple
// validation errors returned by QuestionServiceSearchResponse.ValidateAll()
// if the designated constraints aren't met.
type QuestionServiceSearchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuestionServiceSearchResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuestionServiceSearchResponseMultiError) AllErrors() []error { return m }

// QuestionServiceSearchResponseValidationError is the validation error
// returned by QuestionServiceSearchResponse.Validate if the designated
// constraints aren't met.
type QuestionServiceSearchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuestionServiceSearchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuestionServiceSearchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuestionServiceSearchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuestionServiceSearchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuestionServiceSearchResponseValidationError) ErrorName() string {
	return "QuestionServiceSearchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QuestionServiceSearchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuestionServiceSearchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuestionServiceSearchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuestionServiceSearchResponseValidationError{}

// Validate checks the field values on QuestionServiceUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QuestionServiceUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuestionServiceUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QuestionServiceUpdateRequestMultiError, or nil if none found.
func (m *QuestionServiceUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QuestionServiceUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	if all {
		switch v := interface{}(m.GetContent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QuestionServiceUpdateRequestValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QuestionServiceUpdateRequestValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QuestionServiceUpdateRequestValidationError{
				field:  "Content",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SimpleQuestion

	for idx, item := range m.GetSubQuestions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QuestionServiceUpdateRequestValidationError{
						field:  fmt.Sprintf("SubQuestions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QuestionServiceUpdateRequestValidationError{
						field:  fmt.Sprintf("SubQuestions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QuestionServiceUpdateRequestValidationError{
					field:  fmt.Sprintf("SubQuestions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOptions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QuestionServiceUpdateRequestValidationError{
						field:  fmt.Sprintf("Options[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QuestionServiceUpdateRequestValidationError{
						field:  fmt.Sprintf("Options[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QuestionServiceUpdateRequestValidationError{
					field:  fmt.Sprintf("Options[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOptionTuples() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QuestionServiceUpdateRequestValidationError{
						field:  fmt.Sprintf("OptionTuples[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QuestionServiceUpdateRequestValidationError{
						field:  fmt.Sprintf("OptionTuples[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QuestionServiceUpdateRequestValidationError{
					field:  fmt.Sprintf("OptionTuples[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Difficulty

	// no validation rules for Category

	// no validation rules for Explanation

	// no validation rules for TimeLimit

	if len(errors) > 0 {
		return QuestionServiceUpdateRequestMultiError(errors)
	}

	return nil
}

// QuestionServiceUpdateRequestMultiError is an error wrapping multiple
// validation errors returned by QuestionServiceUpdateRequest.ValidateAll() if
// the designated constraints aren't met.
type QuestionServiceUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuestionServiceUpdateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuestionServiceUpdateRequestMultiError) AllErrors() []error { return m }

// QuestionServiceUpdateRequestValidationError is the validation error returned
// by QuestionServiceUpdateRequest.Validate if the designated constraints
// aren't met.
type QuestionServiceUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuestionServiceUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuestionServiceUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuestionServiceUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuestionServiceUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuestionServiceUpdateRequestValidationError) ErrorName() string {
	return "QuestionServiceUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QuestionServiceUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuestionServiceUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuestionServiceUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuestionServiceUpdateRequestValidationError{}

// Validate checks the field values on QuestionServiceUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QuestionServiceUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuestionServiceUpdateResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// QuestionServiceUpdateResponseMultiError, or nil if none found.
func (m *QuestionServiceUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QuestionServiceUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return QuestionServiceUpdateResponseMultiError(errors)
	}

	return nil
}

// QuestionServiceUpdateResponseMultiError is an error wrapping multiple
// validation errors returned by QuestionServiceUpdateResponse.ValidateAll()
// if the designated constraints aren't met.
type QuestionServiceUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuestionServiceUpdateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuestionServiceUpdateResponseMultiError) AllErrors() []error { return m }

// QuestionServiceUpdateResponseValidationError is the validation error
// returned by QuestionServiceUpdateResponse.Validate if the designated
// constraints aren't met.
type QuestionServiceUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuestionServiceUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuestionServiceUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuestionServiceUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuestionServiceUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuestionServiceUpdateResponseValidationError) ErrorName() string {
	return "QuestionServiceUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QuestionServiceUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuestionServiceUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuestionServiceUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuestionServiceUpdateResponseValidationError{}

// Validate checks the field values on QuestionServiceDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QuestionServiceDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuestionServiceDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QuestionServiceDeleteRequestMultiError, or nil if none found.
func (m *QuestionServiceDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QuestionServiceDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return QuestionServiceDeleteRequestMultiError(errors)
	}

	return nil
}

// QuestionServiceDeleteRequestMultiError is an error wrapping multiple
// validation errors returned by QuestionServiceDeleteRequest.ValidateAll() if
// the designated constraints aren't met.
type QuestionServiceDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuestionServiceDeleteRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuestionServiceDeleteRequestMultiError) AllErrors() []error { return m }

// QuestionServiceDeleteRequestValidationError is the validation error returned
// by QuestionServiceDeleteRequest.Validate if the designated constraints
// aren't met.
type QuestionServiceDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuestionServiceDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuestionServiceDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuestionServiceDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuestionServiceDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuestionServiceDeleteRequestValidationError) ErrorName() string {
	return "QuestionServiceDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QuestionServiceDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuestionServiceDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuestionServiceDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuestionServiceDeleteRequestValidationError{}

// Validate checks the field values on QuestionServiceDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QuestionServiceDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuestionServiceDeleteResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// QuestionServiceDeleteResponseMultiError, or nil if none found.
func (m *QuestionServiceDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QuestionServiceDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return QuestionServiceDeleteResponseMultiError(errors)
	}

	return nil
}

// QuestionServiceDeleteResponseMultiError is an error wrapping multiple
// validation errors returned by QuestionServiceDeleteResponse.ValidateAll()
// if the designated constraints aren't met.
type QuestionServiceDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuestionServiceDeleteResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuestionServiceDeleteResponseMultiError) AllErrors() []error { return m }

// QuestionServiceDeleteResponseValidationError is the validation error
// returned by QuestionServiceDeleteResponse.Validate if the designated
// constraints aren't met.
type QuestionServiceDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuestionServiceDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuestionServiceDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuestionServiceDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuestionServiceDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuestionServiceDeleteResponseValidationError) ErrorName() string {
	return "QuestionServiceDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QuestionServiceDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuestionServiceDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuestionServiceDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuestionServiceDeleteResponseValidationError{}

// Validate checks the field values on QuestionServicePublishRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QuestionServicePublishRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuestionServicePublishRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// QuestionServicePublishRequestMultiError, or nil if none found.
func (m *QuestionServicePublishRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QuestionServicePublishRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Status

	if len(errors) > 0 {
		return QuestionServicePublishRequestMultiError(errors)
	}

	return nil
}

// QuestionServicePublishRequestMultiError is an error wrapping multiple
// validation errors returned by QuestionServicePublishRequest.ValidateAll()
// if the designated constraints aren't met.
type QuestionServicePublishRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuestionServicePublishRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuestionServicePublishRequestMultiError) AllErrors() []error { return m }

// QuestionServicePublishRequestValidationError is the validation error
// returned by QuestionServicePublishRequest.Validate if the designated
// constraints aren't met.
type QuestionServicePublishRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuestionServicePublishRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuestionServicePublishRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuestionServicePublishRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuestionServicePublishRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuestionServicePublishRequestValidationError) ErrorName() string {
	return "QuestionServicePublishRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QuestionServicePublishRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuestionServicePublishRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuestionServicePublishRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuestionServicePublishRequestValidationError{}

// Validate checks the field values on QuestionServicePublishResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QuestionServicePublishResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuestionServicePublishResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// QuestionServicePublishResponseMultiError, or nil if none found.
func (m *QuestionServicePublishResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QuestionServicePublishResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return QuestionServicePublishResponseMultiError(errors)
	}

	return nil
}

// QuestionServicePublishResponseMultiError is an error wrapping multiple
// validation errors returned by QuestionServicePublishResponse.ValidateAll()
// if the designated constraints aren't met.
type QuestionServicePublishResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuestionServicePublishResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuestionServicePublishResponseMultiError) AllErrors() []error { return m }

// QuestionServicePublishResponseValidationError is the validation error
// returned by QuestionServicePublishResponse.Validate if the designated
// constraints aren't met.
type QuestionServicePublishResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuestionServicePublishResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuestionServicePublishResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuestionServicePublishResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuestionServicePublishResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuestionServicePublishResponseValidationError) ErrorName() string {
	return "QuestionServicePublishResponseValidationError"
}

// Error satisfies the builtin error interface
func (e QuestionServicePublishResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuestionServicePublishResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuestionServicePublishResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuestionServicePublishResponseValidationError{}
