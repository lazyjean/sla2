// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: proto/v1/ai_chat_socket.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Status code enumeration
type StatusCode int32

const (
	StatusCode_STATUS_UNKNOWN  StatusCode = 0
	StatusCode_STATUS_OK       StatusCode = 1
	StatusCode_STREAM_ERROR    StatusCode = 2
	StatusCode_INTERNAL_ERROR  StatusCode = 3
	StatusCode_INVALID_REQUEST StatusCode = 4
)

// Enum value maps for StatusCode.
var (
	StatusCode_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_OK",
		2: "STREAM_ERROR",
		3: "INTERNAL_ERROR",
		4: "INVALID_REQUEST",
	}
	StatusCode_value = map[string]int32{
		"STATUS_UNKNOWN":  0,
		"STATUS_OK":       1,
		"STREAM_ERROR":    2,
		"INTERNAL_ERROR":  3,
		"INVALID_REQUEST": 4,
	}
)

func (x StatusCode) Enum() *StatusCode {
	p := new(StatusCode)
	*p = x
	return p
}

func (x StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_v1_ai_chat_socket_proto_enumTypes[0].Descriptor()
}

func (StatusCode) Type() protoreflect.EnumType {
	return &file_proto_v1_ai_chat_socket_proto_enumTypes[0]
}

func (x StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusCode.Descriptor instead.
func (StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_proto_v1_ai_chat_socket_proto_rawDescGZIP(), []int{0}
}

type AiChatMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Role          string                 `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"` // user, assistant or system
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AiChatMessage) Reset() {
	*x = AiChatMessage{}
	mi := &file_proto_v1_ai_chat_socket_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AiChatMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AiChatMessage) ProtoMessage() {}

func (x *AiChatMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_ai_chat_socket_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AiChatMessage.ProtoReflect.Descriptor instead.
func (*AiChatMessage) Descriptor() ([]byte, []int) {
	return file_proto_v1_ai_chat_socket_proto_rawDescGZIP(), []int{0}
}

func (x *AiChatMessage) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *AiChatMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AiChatMessage) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

// Token usage details for prompt
type TokenUsageDetails struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CachedTokens  int32                  `protobuf:"varint,1,opt,name=cached_tokens,json=cachedTokens,proto3" json:"cached_tokens,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TokenUsageDetails) Reset() {
	*x = TokenUsageDetails{}
	mi := &file_proto_v1_ai_chat_socket_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenUsageDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenUsageDetails) ProtoMessage() {}

func (x *TokenUsageDetails) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_ai_chat_socket_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenUsageDetails.ProtoReflect.Descriptor instead.
func (*TokenUsageDetails) Descriptor() ([]byte, []int) {
	return file_proto_v1_ai_chat_socket_proto_rawDescGZIP(), []int{1}
}

func (x *TokenUsageDetails) GetCachedTokens() int32 {
	if x != nil {
		return x.CachedTokens
	}
	return 0
}

// Usage statistics for the chat completion
type Usage struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	PromptTokens          int32                  `protobuf:"varint,1,opt,name=prompt_tokens,json=promptTokens,proto3" json:"prompt_tokens,omitempty"`
	CompletionTokens      int32                  `protobuf:"varint,2,opt,name=completion_tokens,json=completionTokens,proto3" json:"completion_tokens,omitempty"`
	TotalTokens           int32                  `protobuf:"varint,3,opt,name=total_tokens,json=totalTokens,proto3" json:"total_tokens,omitempty"`
	PromptTokensDetails   *TokenUsageDetails     `protobuf:"bytes,4,opt,name=prompt_tokens_details,json=promptTokensDetails,proto3" json:"prompt_tokens_details,omitempty"`
	PromptCacheHitTokens  int32                  `protobuf:"varint,5,opt,name=prompt_cache_hit_tokens,json=promptCacheHitTokens,proto3" json:"prompt_cache_hit_tokens,omitempty"`
	PromptCacheMissTokens int32                  `protobuf:"varint,6,opt,name=prompt_cache_miss_tokens,json=promptCacheMissTokens,proto3" json:"prompt_cache_miss_tokens,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Usage) Reset() {
	*x = Usage{}
	mi := &file_proto_v1_ai_chat_socket_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Usage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Usage) ProtoMessage() {}

func (x *Usage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_ai_chat_socket_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Usage.ProtoReflect.Descriptor instead.
func (*Usage) Descriptor() ([]byte, []int) {
	return file_proto_v1_ai_chat_socket_proto_rawDescGZIP(), []int{2}
}

func (x *Usage) GetPromptTokens() int32 {
	if x != nil {
		return x.PromptTokens
	}
	return 0
}

func (x *Usage) GetCompletionTokens() int32 {
	if x != nil {
		return x.CompletionTokens
	}
	return 0
}

func (x *Usage) GetTotalTokens() int32 {
	if x != nil {
		return x.TotalTokens
	}
	return 0
}

func (x *Usage) GetPromptTokensDetails() *TokenUsageDetails {
	if x != nil {
		return x.PromptTokensDetails
	}
	return nil
}

func (x *Usage) GetPromptCacheHitTokens() int32 {
	if x != nil {
		return x.PromptCacheHitTokens
	}
	return 0
}

func (x *Usage) GetPromptCacheMissTokens() int32 {
	if x != nil {
		return x.PromptCacheMissTokens
	}
	return 0
}

// Choice represents a single completion option
type Choice struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         int32                  `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Message       *AiChatMessage         `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	FinishReason  string                 `protobuf:"bytes,3,opt,name=finish_reason,json=finishReason,proto3" json:"finish_reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Choice) Reset() {
	*x = Choice{}
	mi := &file_proto_v1_ai_chat_socket_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Choice) ProtoMessage() {}

func (x *Choice) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_ai_chat_socket_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Choice.ProtoReflect.Descriptor instead.
func (*Choice) Descriptor() ([]byte, []int) {
	return file_proto_v1_ai_chat_socket_proto_rawDescGZIP(), []int{3}
}

func (x *Choice) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Choice) GetMessage() *AiChatMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *Choice) GetFinishReason() string {
	if x != nil {
		return x.FinishReason
	}
	return ""
}

type AiChatRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Messages         []*AiChatMessage       `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	Model            string                 `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	FrequencyPenalty float32                `protobuf:"fixed32,3,opt,name=frequency_penalty,json=frequencyPenalty,proto3" json:"frequency_penalty,omitempty"`
	MaxTokens        int32                  `protobuf:"varint,4,opt,name=max_tokens,json=maxTokens,proto3" json:"max_tokens,omitempty"`
	PresencePenalty  float32                `protobuf:"fixed32,5,opt,name=presence_penalty,json=presencePenalty,proto3" json:"presence_penalty,omitempty"`
	Stream           bool                   `protobuf:"varint,6,opt,name=stream,proto3" json:"stream,omitempty"`
	Temperature      float32                `protobuf:"fixed32,7,opt,name=temperature,proto3" json:"temperature,omitempty"`
	TopP             float32                `protobuf:"fixed32,8,opt,name=top_p,json=topP,proto3" json:"top_p,omitempty"`
	Logprobs         bool                   `protobuf:"varint,9,opt,name=logprobs,proto3" json:"logprobs,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *AiChatRequest) Reset() {
	*x = AiChatRequest{}
	mi := &file_proto_v1_ai_chat_socket_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AiChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AiChatRequest) ProtoMessage() {}

func (x *AiChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_ai_chat_socket_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AiChatRequest.ProtoReflect.Descriptor instead.
func (*AiChatRequest) Descriptor() ([]byte, []int) {
	return file_proto_v1_ai_chat_socket_proto_rawDescGZIP(), []int{4}
}

func (x *AiChatRequest) GetMessages() []*AiChatMessage {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *AiChatRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *AiChatRequest) GetFrequencyPenalty() float32 {
	if x != nil {
		return x.FrequencyPenalty
	}
	return 0
}

func (x *AiChatRequest) GetMaxTokens() int32 {
	if x != nil {
		return x.MaxTokens
	}
	return 0
}

func (x *AiChatRequest) GetPresencePenalty() float32 {
	if x != nil {
		return x.PresencePenalty
	}
	return 0
}

func (x *AiChatRequest) GetStream() bool {
	if x != nil {
		return x.Stream
	}
	return false
}

func (x *AiChatRequest) GetTemperature() float32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *AiChatRequest) GetTopP() float32 {
	if x != nil {
		return x.TopP
	}
	return 0
}

func (x *AiChatRequest) GetLogprobs() bool {
	if x != nil {
		return x.Logprobs
	}
	return false
}

type AiChatResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Id                string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                        // Completion ID
	Object            string                 `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`                                                // Object type (e.g., "chat.completion")
	Created           int64                  `protobuf:"varint,3,opt,name=created,proto3" json:"created,omitempty"`                                             // Unix timestamp
	Model             string                 `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`                                                  // Model used
	Choices           []*Choice              `protobuf:"bytes,5,rep,name=choices,proto3" json:"choices,omitempty"`                                              // Array of completion choices
	Usage             *Usage                 `protobuf:"bytes,6,opt,name=usage,proto3" json:"usage,omitempty"`                                                  // Token usage statistics
	SystemFingerprint string                 `protobuf:"bytes,7,opt,name=system_fingerprint,json=systemFingerprint,proto3" json:"system_fingerprint,omitempty"` // System fingerprint
	Code              StatusCode             `protobuf:"varint,8,opt,name=code,proto3,enum=proto.v1.StatusCode" json:"code,omitempty"`                          // Status code
	ErrorMsg          string                 `protobuf:"bytes,9,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`                            // Error message
	IsFinal           bool                   `protobuf:"varint,10,opt,name=is_final,json=isFinal,proto3" json:"is_final,omitempty"`                             // Whether this is the final message
	StreamId          string                 `protobuf:"bytes,11,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`                           // Stream ID
	CreatedAt         *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *AiChatResponse) Reset() {
	*x = AiChatResponse{}
	mi := &file_proto_v1_ai_chat_socket_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AiChatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AiChatResponse) ProtoMessage() {}

func (x *AiChatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_ai_chat_socket_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AiChatResponse.ProtoReflect.Descriptor instead.
func (*AiChatResponse) Descriptor() ([]byte, []int) {
	return file_proto_v1_ai_chat_socket_proto_rawDescGZIP(), []int{5}
}

func (x *AiChatResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AiChatResponse) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *AiChatResponse) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *AiChatResponse) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *AiChatResponse) GetChoices() []*Choice {
	if x != nil {
		return x.Choices
	}
	return nil
}

func (x *AiChatResponse) GetUsage() *Usage {
	if x != nil {
		return x.Usage
	}
	return nil
}

func (x *AiChatResponse) GetSystemFingerprint() string {
	if x != nil {
		return x.SystemFingerprint
	}
	return ""
}

func (x *AiChatResponse) GetCode() StatusCode {
	if x != nil {
		return x.Code
	}
	return StatusCode_STATUS_UNKNOWN
}

func (x *AiChatResponse) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *AiChatResponse) GetIsFinal() bool {
	if x != nil {
		return x.IsFinal
	}
	return false
}

func (x *AiChatResponse) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *AiChatResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type AiChatStreamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       *AiChatMessage         `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	StreamId      string                 `protobuf:"bytes,3,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"` // Stream ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AiChatStreamRequest) Reset() {
	*x = AiChatStreamRequest{}
	mi := &file_proto_v1_ai_chat_socket_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AiChatStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AiChatStreamRequest) ProtoMessage() {}

func (x *AiChatStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_ai_chat_socket_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AiChatStreamRequest.ProtoReflect.Descriptor instead.
func (*AiChatStreamRequest) Descriptor() ([]byte, []int) {
	return file_proto_v1_ai_chat_socket_proto_rawDescGZIP(), []int{6}
}

func (x *AiChatStreamRequest) GetMessage() *AiChatMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *AiChatStreamRequest) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

type AiChatStopStreamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamId      string                 `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"` // Stream ID to be stopped
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AiChatStopStreamRequest) Reset() {
	*x = AiChatStopStreamRequest{}
	mi := &file_proto_v1_ai_chat_socket_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AiChatStopStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AiChatStopStreamRequest) ProtoMessage() {}

func (x *AiChatStopStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_ai_chat_socket_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AiChatStopStreamRequest.ProtoReflect.Descriptor instead.
func (*AiChatStopStreamRequest) Descriptor() ([]byte, []int) {
	return file_proto_v1_ai_chat_socket_proto_rawDescGZIP(), []int{7}
}

func (x *AiChatStopStreamRequest) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

// 聊天上下文请求
type AiChatChatContextRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	History       []string               `protobuf:"bytes,1,rep,name=history,proto3" json:"history,omitempty"`
	SessionId     string                 `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AiChatChatContextRequest) Reset() {
	*x = AiChatChatContextRequest{}
	mi := &file_proto_v1_ai_chat_socket_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AiChatChatContextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AiChatChatContextRequest) ProtoMessage() {}

func (x *AiChatChatContextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_ai_chat_socket_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AiChatChatContextRequest.ProtoReflect.Descriptor instead.
func (*AiChatChatContextRequest) Descriptor() ([]byte, []int) {
	return file_proto_v1_ai_chat_socket_proto_rawDescGZIP(), []int{8}
}

func (x *AiChatChatContextRequest) GetHistory() []string {
	if x != nil {
		return x.History
	}
	return nil
}

func (x *AiChatChatContextRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

// 聊天历史响应
type AiChatHistoryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Role          string                 `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
	Content       string                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Timestamp     int64                  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AiChatHistoryResponse) Reset() {
	*x = AiChatHistoryResponse{}
	mi := &file_proto_v1_ai_chat_socket_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AiChatHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AiChatHistoryResponse) ProtoMessage() {}

func (x *AiChatHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_ai_chat_socket_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AiChatHistoryResponse.ProtoReflect.Descriptor instead.
func (*AiChatHistoryResponse) Descriptor() ([]byte, []int) {
	return file_proto_v1_ai_chat_socket_proto_rawDescGZIP(), []int{9}
}

func (x *AiChatHistoryResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *AiChatHistoryResponse) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *AiChatHistoryResponse) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *AiChatHistoryResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

var File_proto_v1_ai_chat_socket_proto protoreflect.FileDescriptor

var file_proto_v1_ai_chat_socket_proto_rawDesc = string([]byte{
	0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x69, 0x5f, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5c, 0x0a, 0x0d, 0x41, 0x69,
	0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0x38, 0x0a, 0x11, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x22, 0xbd, 0x02, 0x0a, 0x05, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x12, 0x4f, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x13, 0x70,
	0x72, 0x6f, 0x6d, 0x70, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x5f, 0x68, 0x69, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x48, 0x69, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x70, 0x72, 0x6f,
	0x6d, 0x70, 0x74, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x70, 0x72, 0x6f,
	0x6d, 0x70, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x22, 0x76, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x31, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x69, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xbc, 0x02, 0x0a, 0x0d, 0x41,
	0x69, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x08,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x69, 0x43, 0x68, 0x61, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x10, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x65, 0x6e,
	0x61, 0x6c, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x5f,
	0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x50, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x22, 0xa4, 0x03, 0x0a, 0x0e, 0x41, 0x69,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73,
	0x12, 0x25, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x19, 0x0a,
	0x08, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0x65, 0x0a, 0x13, 0x41, 0x69, 0x43, 0x68, 0x61, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x69, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x36, 0x0a, 0x17, 0x41, 0x69, 0x43, 0x68, 0x61,
	0x74, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22,
	0x53, 0x0a, 0x18, 0x41, 0x69, 0x43, 0x68, 0x61, 0x74, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x15, 0x41, 0x69, 0x43, 0x68, 0x61, 0x74, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2a, 0x6a, 0x0a, 0x0a, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54,
	0x52, 0x45, 0x41, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03,
	0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x10, 0x04, 0x42, 0x2a, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x61, 0x7a, 0x79, 0x6a, 0x65, 0x61, 0x6e, 0x2f, 0x73, 0x6c, 0x61,
	0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x3b, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_proto_v1_ai_chat_socket_proto_rawDescOnce sync.Once
	file_proto_v1_ai_chat_socket_proto_rawDescData []byte
)

func file_proto_v1_ai_chat_socket_proto_rawDescGZIP() []byte {
	file_proto_v1_ai_chat_socket_proto_rawDescOnce.Do(func() {
		file_proto_v1_ai_chat_socket_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_v1_ai_chat_socket_proto_rawDesc), len(file_proto_v1_ai_chat_socket_proto_rawDesc)))
	})
	return file_proto_v1_ai_chat_socket_proto_rawDescData
}

var file_proto_v1_ai_chat_socket_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_v1_ai_chat_socket_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_proto_v1_ai_chat_socket_proto_goTypes = []any{
	(StatusCode)(0),                  // 0: proto.v1.StatusCode
	(*AiChatMessage)(nil),            // 1: proto.v1.AiChatMessage
	(*TokenUsageDetails)(nil),        // 2: proto.v1.TokenUsageDetails
	(*Usage)(nil),                    // 3: proto.v1.Usage
	(*Choice)(nil),                   // 4: proto.v1.Choice
	(*AiChatRequest)(nil),            // 5: proto.v1.AiChatRequest
	(*AiChatResponse)(nil),           // 6: proto.v1.AiChatResponse
	(*AiChatStreamRequest)(nil),      // 7: proto.v1.AiChatStreamRequest
	(*AiChatStopStreamRequest)(nil),  // 8: proto.v1.AiChatStopStreamRequest
	(*AiChatChatContextRequest)(nil), // 9: proto.v1.AiChatChatContextRequest
	(*AiChatHistoryResponse)(nil),    // 10: proto.v1.AiChatHistoryResponse
	(*timestamppb.Timestamp)(nil),    // 11: google.protobuf.Timestamp
}
var file_proto_v1_ai_chat_socket_proto_depIdxs = []int32{
	2,  // 0: proto.v1.Usage.prompt_tokens_details:type_name -> proto.v1.TokenUsageDetails
	1,  // 1: proto.v1.Choice.message:type_name -> proto.v1.AiChatMessage
	1,  // 2: proto.v1.AiChatRequest.messages:type_name -> proto.v1.AiChatMessage
	4,  // 3: proto.v1.AiChatResponse.choices:type_name -> proto.v1.Choice
	3,  // 4: proto.v1.AiChatResponse.usage:type_name -> proto.v1.Usage
	0,  // 5: proto.v1.AiChatResponse.code:type_name -> proto.v1.StatusCode
	11, // 6: proto.v1.AiChatResponse.created_at:type_name -> google.protobuf.Timestamp
	1,  // 7: proto.v1.AiChatStreamRequest.message:type_name -> proto.v1.AiChatMessage
	8,  // [8:8] is the sub-list for method output_type
	8,  // [8:8] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_proto_v1_ai_chat_socket_proto_init() }
func file_proto_v1_ai_chat_socket_proto_init() {
	if File_proto_v1_ai_chat_socket_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_v1_ai_chat_socket_proto_rawDesc), len(file_proto_v1_ai_chat_socket_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_v1_ai_chat_socket_proto_goTypes,
		DependencyIndexes: file_proto_v1_ai_chat_socket_proto_depIdxs,
		EnumInfos:         file_proto_v1_ai_chat_socket_proto_enumTypes,
		MessageInfos:      file_proto_v1_ai_chat_socket_proto_msgTypes,
	}.Build()
	File_proto_v1_ai_chat_socket_proto = out.File
	file_proto_v1_ai_chat_socket_proto_goTypes = nil
	file_proto_v1_ai_chat_socket_proto_depIdxs = nil
}
