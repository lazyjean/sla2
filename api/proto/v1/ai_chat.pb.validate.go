// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/v1/ai_chat.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ChatRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChatRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChatRequestMultiError, or
// nil if none found.
func (m *ChatRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Message

	// no validation rules for StreamId

	if m.Context != nil {

		if all {
			switch v := interface{}(m.GetContext()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChatRequestValidationError{
						field:  "Context",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChatRequestValidationError{
						field:  "Context",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetContext()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChatRequestValidationError{
					field:  "Context",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ChatRequestMultiError(errors)
	}

	return nil
}

// ChatRequestMultiError is an error wrapping multiple validation errors
// returned by ChatRequest.ValidateAll() if the designated constraints aren't met.
type ChatRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatRequestMultiError) AllErrors() []error { return m }

// ChatRequestValidationError is the validation error returned by
// ChatRequest.Validate if the designated constraints aren't met.
type ChatRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatRequestValidationError) ErrorName() string { return "ChatRequestValidationError" }

// Error satisfies the builtin error interface
func (e ChatRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatRequestValidationError{}

// Validate checks the field values on ChatResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChatResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChatResponseMultiError, or
// nil if none found.
func (m *ChatResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChatResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChatResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChatResponseValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StreamId

	// no validation rules for IsFinal

	// no validation rules for Code

	// no validation rules for ErrorMsg

	if len(errors) > 0 {
		return ChatResponseMultiError(errors)
	}

	return nil
}

// ChatResponseMultiError is an error wrapping multiple validation errors
// returned by ChatResponse.ValidateAll() if the designated constraints aren't met.
type ChatResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatResponseMultiError) AllErrors() []error { return m }

// ChatResponseValidationError is the validation error returned by
// ChatResponse.Validate if the designated constraints aren't met.
type ChatResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatResponseValidationError) ErrorName() string { return "ChatResponseValidationError" }

// Error satisfies the builtin error interface
func (e ChatResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatResponseValidationError{}

// Validate checks the field values on StreamChatRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StreamChatRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamChatRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StreamChatRequestMultiError, or nil if none found.
func (m *StreamChatRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamChatRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Message

	// no validation rules for StreamId

	if m.Context != nil {

		if all {
			switch v := interface{}(m.GetContext()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamChatRequestValidationError{
						field:  "Context",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamChatRequestValidationError{
						field:  "Context",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetContext()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamChatRequestValidationError{
					field:  "Context",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StreamChatRequestMultiError(errors)
	}

	return nil
}

// StreamChatRequestMultiError is an error wrapping multiple validation errors
// returned by StreamChatRequest.ValidateAll() if the designated constraints
// aren't met.
type StreamChatRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamChatRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamChatRequestMultiError) AllErrors() []error { return m }

// StreamChatRequestValidationError is the validation error returned by
// StreamChatRequest.Validate if the designated constraints aren't met.
type StreamChatRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamChatRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamChatRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamChatRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamChatRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamChatRequestValidationError) ErrorName() string {
	return "StreamChatRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StreamChatRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamChatRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamChatRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamChatRequestValidationError{}

// Validate checks the field values on StopStreamRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StopStreamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StopStreamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StopStreamRequestMultiError, or nil if none found.
func (m *StopStreamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StopStreamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StreamId

	if len(errors) > 0 {
		return StopStreamRequestMultiError(errors)
	}

	return nil
}

// StopStreamRequestMultiError is an error wrapping multiple validation errors
// returned by StopStreamRequest.ValidateAll() if the designated constraints
// aren't met.
type StopStreamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StopStreamRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StopStreamRequestMultiError) AllErrors() []error { return m }

// StopStreamRequestValidationError is the validation error returned by
// StopStreamRequest.Validate if the designated constraints aren't met.
type StopStreamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StopStreamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StopStreamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StopStreamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StopStreamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StopStreamRequestValidationError) ErrorName() string {
	return "StopStreamRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StopStreamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStopStreamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StopStreamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StopStreamRequestValidationError{}

// Validate checks the field values on ChatContext with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChatContext) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatContext with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChatContextMultiError, or
// nil if none found.
func (m *ChatContext) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatContext) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionId

	if len(errors) > 0 {
		return ChatContextMultiError(errors)
	}

	return nil
}

// ChatContextMultiError is an error wrapping multiple validation errors
// returned by ChatContext.ValidateAll() if the designated constraints aren't met.
type ChatContextMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatContextMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatContextMultiError) AllErrors() []error { return m }

// ChatContextValidationError is the validation error returned by
// ChatContext.Validate if the designated constraints aren't met.
type ChatContextValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatContextValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatContextValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatContextValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatContextValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatContextValidationError) ErrorName() string { return "ChatContextValidationError" }

// Error satisfies the builtin error interface
func (e ChatContextValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatContext.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatContextValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatContextValidationError{}

// Validate checks the field values on ChatHistory with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChatHistory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatHistory with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChatHistoryMultiError, or
// nil if none found.
func (m *ChatHistory) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatHistory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionId

	// no validation rules for Role

	// no validation rules for Content

	// no validation rules for Timestamp

	if len(errors) > 0 {
		return ChatHistoryMultiError(errors)
	}

	return nil
}

// ChatHistoryMultiError is an error wrapping multiple validation errors
// returned by ChatHistory.ValidateAll() if the designated constraints aren't met.
type ChatHistoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatHistoryMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatHistoryMultiError) AllErrors() []error { return m }

// ChatHistoryValidationError is the validation error returned by
// ChatHistory.Validate if the designated constraints aren't met.
type ChatHistoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatHistoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatHistoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatHistoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatHistoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatHistoryValidationError) ErrorName() string { return "ChatHistoryValidationError" }

// Error satisfies the builtin error interface
func (e ChatHistoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatHistory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatHistoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatHistoryValidationError{}

// Validate checks the field values on CreateSessionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSessionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSessionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSessionRequestMultiError, or nil if none found.
func (m *CreateSessionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSessionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Title

	// no validation rules for Description

	if len(errors) > 0 {
		return CreateSessionRequestMultiError(errors)
	}

	return nil
}

// CreateSessionRequestMultiError is an error wrapping multiple validation
// errors returned by CreateSessionRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateSessionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSessionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSessionRequestMultiError) AllErrors() []error { return m }

// CreateSessionRequestValidationError is the validation error returned by
// CreateSessionRequest.Validate if the designated constraints aren't met.
type CreateSessionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSessionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSessionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSessionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSessionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSessionRequestValidationError) ErrorName() string {
	return "CreateSessionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSessionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSessionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSessionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSessionRequestValidationError{}

// Validate checks the field values on SessionResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SessionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SessionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SessionResponseMultiError, or nil if none found.
func (m *SessionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SessionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionId

	// no validation rules for Title

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SessionResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SessionResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SessionResponseValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SessionResponseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SessionResponseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SessionResponseValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MessageCount

	if len(errors) > 0 {
		return SessionResponseMultiError(errors)
	}

	return nil
}

// SessionResponseMultiError is an error wrapping multiple validation errors
// returned by SessionResponse.ValidateAll() if the designated constraints
// aren't met.
type SessionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SessionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SessionResponseMultiError) AllErrors() []error { return m }

// SessionResponseValidationError is the validation error returned by
// SessionResponse.Validate if the designated constraints aren't met.
type SessionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SessionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SessionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SessionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SessionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SessionResponseValidationError) ErrorName() string { return "SessionResponseValidationError" }

// Error satisfies the builtin error interface
func (e SessionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSessionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SessionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SessionResponseValidationError{}

// Validate checks the field values on ListSessionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSessionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSessionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSessionsRequestMultiError, or nil if none found.
func (m *ListSessionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSessionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListSessionsRequestMultiError(errors)
	}

	return nil
}

// ListSessionsRequestMultiError is an error wrapping multiple validation
// errors returned by ListSessionsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListSessionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSessionsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSessionsRequestMultiError) AllErrors() []error { return m }

// ListSessionsRequestValidationError is the validation error returned by
// ListSessionsRequest.Validate if the designated constraints aren't met.
type ListSessionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSessionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSessionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSessionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSessionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSessionsRequestValidationError) ErrorName() string {
	return "ListSessionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSessionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSessionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSessionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSessionsRequestValidationError{}

// Validate checks the field values on ListSessionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSessionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSessionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSessionsResponseMultiError, or nil if none found.
func (m *ListSessionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSessionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSessions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSessionsResponseValidationError{
						field:  fmt.Sprintf("Sessions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSessionsResponseValidationError{
						field:  fmt.Sprintf("Sessions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSessionsResponseValidationError{
					field:  fmt.Sprintf("Sessions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalCount

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListSessionsResponseMultiError(errors)
	}

	return nil
}

// ListSessionsResponseMultiError is an error wrapping multiple validation
// errors returned by ListSessionsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListSessionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSessionsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSessionsResponseMultiError) AllErrors() []error { return m }

// ListSessionsResponseValidationError is the validation error returned by
// ListSessionsResponse.Validate if the designated constraints aren't met.
type ListSessionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSessionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSessionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSessionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSessionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSessionsResponseValidationError) ErrorName() string {
	return "ListSessionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSessionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSessionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSessionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSessionsResponseValidationError{}

// Validate checks the field values on GetSessionRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSessionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSessionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSessionRequestMultiError, or nil if none found.
func (m *GetSessionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSessionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for SessionId

	if len(errors) > 0 {
		return GetSessionRequestMultiError(errors)
	}

	return nil
}

// GetSessionRequestMultiError is an error wrapping multiple validation errors
// returned by GetSessionRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSessionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSessionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSessionRequestMultiError) AllErrors() []error { return m }

// GetSessionRequestValidationError is the validation error returned by
// GetSessionRequest.Validate if the designated constraints aren't met.
type GetSessionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSessionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSessionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSessionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSessionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSessionRequestValidationError) ErrorName() string {
	return "GetSessionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSessionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSessionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSessionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSessionRequestValidationError{}

// Validate checks the field values on DeleteSessionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSessionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSessionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSessionRequestMultiError, or nil if none found.
func (m *DeleteSessionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSessionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for SessionId

	if len(errors) > 0 {
		return DeleteSessionRequestMultiError(errors)
	}

	return nil
}

// DeleteSessionRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteSessionRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteSessionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSessionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSessionRequestMultiError) AllErrors() []error { return m }

// DeleteSessionRequestValidationError is the validation error returned by
// DeleteSessionRequest.Validate if the designated constraints aren't met.
type DeleteSessionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSessionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSessionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSessionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSessionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSessionRequestValidationError) ErrorName() string {
	return "DeleteSessionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSessionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSessionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSessionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSessionRequestValidationError{}
