// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/v1/ai_chat.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AIChatServiceMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AIChatServiceMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AIChatServiceMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AIChatServiceMessageMultiError, or nil if none found.
func (m *AIChatServiceMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *AIChatServiceMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Role

	// no validation rules for Content

	if len(errors) > 0 {
		return AIChatServiceMessageMultiError(errors)
	}

	return nil
}

// AIChatServiceMessageMultiError is an error wrapping multiple validation
// errors returned by AIChatServiceMessage.ValidateAll() if the designated
// constraints aren't met.
type AIChatServiceMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AIChatServiceMessageMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AIChatServiceMessageMultiError) AllErrors() []error { return m }

// AIChatServiceMessageValidationError is the validation error returned by
// AIChatServiceMessage.Validate if the designated constraints aren't met.
type AIChatServiceMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AIChatServiceMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AIChatServiceMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AIChatServiceMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AIChatServiceMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AIChatServiceMessageValidationError) ErrorName() string {
	return "AIChatServiceMessageValidationError"
}

// Error satisfies the builtin error interface
func (e AIChatServiceMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAIChatServiceMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AIChatServiceMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AIChatServiceMessageValidationError{}

// Validate checks the field values on AIChatServiceSession with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AIChatServiceSession) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AIChatServiceSession with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AIChatServiceSessionMultiError, or nil if none found.
func (m *AIChatServiceSession) ValidateAll() error {
	return m.validate(true)
}

func (m *AIChatServiceSession) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AIChatServiceSessionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AIChatServiceSessionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AIChatServiceSessionValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AIChatServiceSessionValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AIChatServiceSessionValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AIChatServiceSessionValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AIChatServiceSessionMultiError(errors)
	}

	return nil
}

// AIChatServiceSessionMultiError is an error wrapping multiple validation
// errors returned by AIChatServiceSession.ValidateAll() if the designated
// constraints aren't met.
type AIChatServiceSessionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AIChatServiceSessionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AIChatServiceSessionMultiError) AllErrors() []error { return m }

// AIChatServiceSessionValidationError is the validation error returned by
// AIChatServiceSession.Validate if the designated constraints aren't met.
type AIChatServiceSessionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AIChatServiceSessionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AIChatServiceSessionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AIChatServiceSessionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AIChatServiceSessionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AIChatServiceSessionValidationError) ErrorName() string {
	return "AIChatServiceSessionValidationError"
}

// Error satisfies the builtin error interface
func (e AIChatServiceSessionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAIChatServiceSession.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AIChatServiceSessionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AIChatServiceSessionValidationError{}

// Validate checks the field values on AIChatServiceSessionDetail with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AIChatServiceSessionDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AIChatServiceSessionDetail with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AIChatServiceSessionDetailMultiError, or nil if none found.
func (m *AIChatServiceSessionDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *AIChatServiceSessionDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSession()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AIChatServiceSessionDetailValidationError{
					field:  "Session",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AIChatServiceSessionDetailValidationError{
					field:  "Session",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSession()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AIChatServiceSessionDetailValidationError{
				field:  "Session",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetMessages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AIChatServiceSessionDetailValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AIChatServiceSessionDetailValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AIChatServiceSessionDetailValidationError{
					field:  fmt.Sprintf("Messages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AIChatServiceSessionDetailMultiError(errors)
	}

	return nil
}

// AIChatServiceSessionDetailMultiError is an error wrapping multiple
// validation errors returned by AIChatServiceSessionDetail.ValidateAll() if
// the designated constraints aren't met.
type AIChatServiceSessionDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AIChatServiceSessionDetailMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AIChatServiceSessionDetailMultiError) AllErrors() []error { return m }

// AIChatServiceSessionDetailValidationError is the validation error returned
// by AIChatServiceSessionDetail.Validate if the designated constraints aren't met.
type AIChatServiceSessionDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AIChatServiceSessionDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AIChatServiceSessionDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AIChatServiceSessionDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AIChatServiceSessionDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AIChatServiceSessionDetailValidationError) ErrorName() string {
	return "AIChatServiceSessionDetailValidationError"
}

// Error satisfies the builtin error interface
func (e AIChatServiceSessionDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAIChatServiceSessionDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AIChatServiceSessionDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AIChatServiceSessionDetailValidationError{}

// Validate checks the field values on AIChatServiceCreateSessionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AIChatServiceCreateSessionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AIChatServiceCreateSessionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AIChatServiceCreateSessionRequestMultiError, or nil if none found.
func (m *AIChatServiceCreateSessionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AIChatServiceCreateSessionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	if len(errors) > 0 {
		return AIChatServiceCreateSessionRequestMultiError(errors)
	}

	return nil
}

// AIChatServiceCreateSessionRequestMultiError is an error wrapping multiple
// validation errors returned by
// AIChatServiceCreateSessionRequest.ValidateAll() if the designated
// constraints aren't met.
type AIChatServiceCreateSessionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AIChatServiceCreateSessionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AIChatServiceCreateSessionRequestMultiError) AllErrors() []error { return m }

// AIChatServiceCreateSessionRequestValidationError is the validation error
// returned by AIChatServiceCreateSessionRequest.Validate if the designated
// constraints aren't met.
type AIChatServiceCreateSessionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AIChatServiceCreateSessionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AIChatServiceCreateSessionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AIChatServiceCreateSessionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AIChatServiceCreateSessionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AIChatServiceCreateSessionRequestValidationError) ErrorName() string {
	return "AIChatServiceCreateSessionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AIChatServiceCreateSessionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAIChatServiceCreateSessionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AIChatServiceCreateSessionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AIChatServiceCreateSessionRequestValidationError{}

// Validate checks the field values on AIChatServiceCreateSessionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AIChatServiceCreateSessionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AIChatServiceCreateSessionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AIChatServiceCreateSessionResponseMultiError, or nil if none found.
func (m *AIChatServiceCreateSessionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AIChatServiceCreateSessionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionId

	// no validation rules for Title

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AIChatServiceCreateSessionResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AIChatServiceCreateSessionResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AIChatServiceCreateSessionResponseValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AIChatServiceCreateSessionResponseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AIChatServiceCreateSessionResponseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AIChatServiceCreateSessionResponseValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MessageCount

	if len(errors) > 0 {
		return AIChatServiceCreateSessionResponseMultiError(errors)
	}

	return nil
}

// AIChatServiceCreateSessionResponseMultiError is an error wrapping multiple
// validation errors returned by
// AIChatServiceCreateSessionResponse.ValidateAll() if the designated
// constraints aren't met.
type AIChatServiceCreateSessionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AIChatServiceCreateSessionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AIChatServiceCreateSessionResponseMultiError) AllErrors() []error { return m }

// AIChatServiceCreateSessionResponseValidationError is the validation error
// returned by AIChatServiceCreateSessionResponse.Validate if the designated
// constraints aren't met.
type AIChatServiceCreateSessionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AIChatServiceCreateSessionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AIChatServiceCreateSessionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AIChatServiceCreateSessionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AIChatServiceCreateSessionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AIChatServiceCreateSessionResponseValidationError) ErrorName() string {
	return "AIChatServiceCreateSessionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AIChatServiceCreateSessionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAIChatServiceCreateSessionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AIChatServiceCreateSessionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AIChatServiceCreateSessionResponseValidationError{}

// Validate checks the field values on AIChatServiceListSessionsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AIChatServiceListSessionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AIChatServiceListSessionsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AIChatServiceListSessionsRequestMultiError, or nil if none found.
func (m *AIChatServiceListSessionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AIChatServiceListSessionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return AIChatServiceListSessionsRequestMultiError(errors)
	}

	return nil
}

// AIChatServiceListSessionsRequestMultiError is an error wrapping multiple
// validation errors returned by
// AIChatServiceListSessionsRequest.ValidateAll() if the designated
// constraints aren't met.
type AIChatServiceListSessionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AIChatServiceListSessionsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AIChatServiceListSessionsRequestMultiError) AllErrors() []error { return m }

// AIChatServiceListSessionsRequestValidationError is the validation error
// returned by AIChatServiceListSessionsRequest.Validate if the designated
// constraints aren't met.
type AIChatServiceListSessionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AIChatServiceListSessionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AIChatServiceListSessionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AIChatServiceListSessionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AIChatServiceListSessionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AIChatServiceListSessionsRequestValidationError) ErrorName() string {
	return "AIChatServiceListSessionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AIChatServiceListSessionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAIChatServiceListSessionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AIChatServiceListSessionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AIChatServiceListSessionsRequestValidationError{}

// Validate checks the field values on AIChatServiceListSessionsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AIChatServiceListSessionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AIChatServiceListSessionsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AIChatServiceListSessionsResponseMultiError, or nil if none found.
func (m *AIChatServiceListSessionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AIChatServiceListSessionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSessions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AIChatServiceListSessionsResponseValidationError{
						field:  fmt.Sprintf("Sessions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AIChatServiceListSessionsResponseValidationError{
						field:  fmt.Sprintf("Sessions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AIChatServiceListSessionsResponseValidationError{
					field:  fmt.Sprintf("Sessions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalCount

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return AIChatServiceListSessionsResponseMultiError(errors)
	}

	return nil
}

// AIChatServiceListSessionsResponseMultiError is an error wrapping multiple
// validation errors returned by
// AIChatServiceListSessionsResponse.ValidateAll() if the designated
// constraints aren't met.
type AIChatServiceListSessionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AIChatServiceListSessionsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AIChatServiceListSessionsResponseMultiError) AllErrors() []error { return m }

// AIChatServiceListSessionsResponseValidationError is the validation error
// returned by AIChatServiceListSessionsResponse.Validate if the designated
// constraints aren't met.
type AIChatServiceListSessionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AIChatServiceListSessionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AIChatServiceListSessionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AIChatServiceListSessionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AIChatServiceListSessionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AIChatServiceListSessionsResponseValidationError) ErrorName() string {
	return "AIChatServiceListSessionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AIChatServiceListSessionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAIChatServiceListSessionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AIChatServiceListSessionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AIChatServiceListSessionsResponseValidationError{}

// Validate checks the field values on AIChatServiceGetSessionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AIChatServiceGetSessionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AIChatServiceGetSessionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AIChatServiceGetSessionRequestMultiError, or nil if none found.
func (m *AIChatServiceGetSessionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AIChatServiceGetSessionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionId

	if len(errors) > 0 {
		return AIChatServiceGetSessionRequestMultiError(errors)
	}

	return nil
}

// AIChatServiceGetSessionRequestMultiError is an error wrapping multiple
// validation errors returned by AIChatServiceGetSessionRequest.ValidateAll()
// if the designated constraints aren't met.
type AIChatServiceGetSessionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AIChatServiceGetSessionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AIChatServiceGetSessionRequestMultiError) AllErrors() []error { return m }

// AIChatServiceGetSessionRequestValidationError is the validation error
// returned by AIChatServiceGetSessionRequest.Validate if the designated
// constraints aren't met.
type AIChatServiceGetSessionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AIChatServiceGetSessionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AIChatServiceGetSessionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AIChatServiceGetSessionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AIChatServiceGetSessionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AIChatServiceGetSessionRequestValidationError) ErrorName() string {
	return "AIChatServiceGetSessionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AIChatServiceGetSessionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAIChatServiceGetSessionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AIChatServiceGetSessionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AIChatServiceGetSessionRequestValidationError{}

// Validate checks the field values on AIChatServiceGetSessionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AIChatServiceGetSessionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AIChatServiceGetSessionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AIChatServiceGetSessionResponseMultiError, or nil if none found.
func (m *AIChatServiceGetSessionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AIChatServiceGetSessionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSession()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AIChatServiceGetSessionResponseValidationError{
					field:  "Session",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AIChatServiceGetSessionResponseValidationError{
					field:  "Session",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSession()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AIChatServiceGetSessionResponseValidationError{
				field:  "Session",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AIChatServiceGetSessionResponseMultiError(errors)
	}

	return nil
}

// AIChatServiceGetSessionResponseMultiError is an error wrapping multiple
// validation errors returned by AIChatServiceGetSessionResponse.ValidateAll()
// if the designated constraints aren't met.
type AIChatServiceGetSessionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AIChatServiceGetSessionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AIChatServiceGetSessionResponseMultiError) AllErrors() []error { return m }

// AIChatServiceGetSessionResponseValidationError is the validation error
// returned by AIChatServiceGetSessionResponse.Validate if the designated
// constraints aren't met.
type AIChatServiceGetSessionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AIChatServiceGetSessionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AIChatServiceGetSessionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AIChatServiceGetSessionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AIChatServiceGetSessionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AIChatServiceGetSessionResponseValidationError) ErrorName() string {
	return "AIChatServiceGetSessionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AIChatServiceGetSessionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAIChatServiceGetSessionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AIChatServiceGetSessionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AIChatServiceGetSessionResponseValidationError{}

// Validate checks the field values on AIChatServiceDeleteSessionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AIChatServiceDeleteSessionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AIChatServiceDeleteSessionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AIChatServiceDeleteSessionRequestMultiError, or nil if none found.
func (m *AIChatServiceDeleteSessionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AIChatServiceDeleteSessionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionId

	if len(errors) > 0 {
		return AIChatServiceDeleteSessionRequestMultiError(errors)
	}

	return nil
}

// AIChatServiceDeleteSessionRequestMultiError is an error wrapping multiple
// validation errors returned by
// AIChatServiceDeleteSessionRequest.ValidateAll() if the designated
// constraints aren't met.
type AIChatServiceDeleteSessionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AIChatServiceDeleteSessionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AIChatServiceDeleteSessionRequestMultiError) AllErrors() []error { return m }

// AIChatServiceDeleteSessionRequestValidationError is the validation error
// returned by AIChatServiceDeleteSessionRequest.Validate if the designated
// constraints aren't met.
type AIChatServiceDeleteSessionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AIChatServiceDeleteSessionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AIChatServiceDeleteSessionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AIChatServiceDeleteSessionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AIChatServiceDeleteSessionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AIChatServiceDeleteSessionRequestValidationError) ErrorName() string {
	return "AIChatServiceDeleteSessionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AIChatServiceDeleteSessionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAIChatServiceDeleteSessionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AIChatServiceDeleteSessionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AIChatServiceDeleteSessionRequestValidationError{}

// Validate checks the field values on AIChatServiceDeleteSessionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AIChatServiceDeleteSessionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AIChatServiceDeleteSessionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AIChatServiceDeleteSessionResponseMultiError, or nil if none found.
func (m *AIChatServiceDeleteSessionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AIChatServiceDeleteSessionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AIChatServiceDeleteSessionResponseMultiError(errors)
	}

	return nil
}

// AIChatServiceDeleteSessionResponseMultiError is an error wrapping multiple
// validation errors returned by
// AIChatServiceDeleteSessionResponse.ValidateAll() if the designated
// constraints aren't met.
type AIChatServiceDeleteSessionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AIChatServiceDeleteSessionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AIChatServiceDeleteSessionResponseMultiError) AllErrors() []error { return m }

// AIChatServiceDeleteSessionResponseValidationError is the validation error
// returned by AIChatServiceDeleteSessionResponse.Validate if the designated
// constraints aren't met.
type AIChatServiceDeleteSessionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AIChatServiceDeleteSessionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AIChatServiceDeleteSessionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AIChatServiceDeleteSessionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AIChatServiceDeleteSessionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AIChatServiceDeleteSessionResponseValidationError) ErrorName() string {
	return "AIChatServiceDeleteSessionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AIChatServiceDeleteSessionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAIChatServiceDeleteSessionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AIChatServiceDeleteSessionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AIChatServiceDeleteSessionResponseValidationError{}
