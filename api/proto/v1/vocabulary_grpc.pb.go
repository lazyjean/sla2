// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/v1/vocabulary.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VocabularyService_Get_FullMethodName                = "/proto.v1.VocabularyService/Get"
	VocabularyService_List_FullMethodName               = "/proto.v1.VocabularyService/List"
	VocabularyService_GetAllMetadata_FullMethodName     = "/proto.v1.VocabularyService/GetAllMetadata"
	VocabularyService_ListHanChar_FullMethodName        = "/proto.v1.VocabularyService/ListHanChar"
	VocabularyService_BatchCreate_FullMethodName        = "/proto.v1.VocabularyService/BatchCreate"
	VocabularyService_BatchCreateHanChar_FullMethodName = "/proto.v1.VocabularyService/BatchCreateHanChar"
)

// VocabularyServiceClient is the client API for VocabularyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// VocabularyService 提供单词相关的服务
type VocabularyServiceClient interface {
	// Get 获取单词详情
	Get(ctx context.Context, in *VocabularyServiceGetRequest, opts ...grpc.CallOption) (*VocabularyServiceGetResponse, error)
	// List 获取单词列表
	List(ctx context.Context, in *VocabularyServiceListRequest, opts ...grpc.CallOption) (*VocabularyServiceListResponse, error)
	// GetAllMetadata 获取所有标签和分类信息
	GetAllMetadata(ctx context.Context, in *VocabularyServiceGetAllMetadataRequest, opts ...grpc.CallOption) (*VocabularyServiceGetAllMetadataResponse, error)
	// ListHanChar 获取汉字列表
	ListHanChar(ctx context.Context, in *VocabularyServiceListHanCharRequest, opts ...grpc.CallOption) (*VocabularyServiceListHanCharResponse, error)
	// 批量创建英文单词
	BatchCreate(ctx context.Context, in *VocabularyServiceBatchCreateRequest, opts ...grpc.CallOption) (*VocabularyServiceBatchCreateResponse, error)
	// 批量创建汉字
	BatchCreateHanChar(ctx context.Context, in *VocabularyServiceBatchCreateHanCharRequest, opts ...grpc.CallOption) (*VocabularyServiceBatchCreateHanCharResponse, error)
}

type vocabularyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVocabularyServiceClient(cc grpc.ClientConnInterface) VocabularyServiceClient {
	return &vocabularyServiceClient{cc}
}

func (c *vocabularyServiceClient) Get(ctx context.Context, in *VocabularyServiceGetRequest, opts ...grpc.CallOption) (*VocabularyServiceGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VocabularyServiceGetResponse)
	err := c.cc.Invoke(ctx, VocabularyService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vocabularyServiceClient) List(ctx context.Context, in *VocabularyServiceListRequest, opts ...grpc.CallOption) (*VocabularyServiceListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VocabularyServiceListResponse)
	err := c.cc.Invoke(ctx, VocabularyService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vocabularyServiceClient) GetAllMetadata(ctx context.Context, in *VocabularyServiceGetAllMetadataRequest, opts ...grpc.CallOption) (*VocabularyServiceGetAllMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VocabularyServiceGetAllMetadataResponse)
	err := c.cc.Invoke(ctx, VocabularyService_GetAllMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vocabularyServiceClient) ListHanChar(ctx context.Context, in *VocabularyServiceListHanCharRequest, opts ...grpc.CallOption) (*VocabularyServiceListHanCharResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VocabularyServiceListHanCharResponse)
	err := c.cc.Invoke(ctx, VocabularyService_ListHanChar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vocabularyServiceClient) BatchCreate(ctx context.Context, in *VocabularyServiceBatchCreateRequest, opts ...grpc.CallOption) (*VocabularyServiceBatchCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VocabularyServiceBatchCreateResponse)
	err := c.cc.Invoke(ctx, VocabularyService_BatchCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vocabularyServiceClient) BatchCreateHanChar(ctx context.Context, in *VocabularyServiceBatchCreateHanCharRequest, opts ...grpc.CallOption) (*VocabularyServiceBatchCreateHanCharResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VocabularyServiceBatchCreateHanCharResponse)
	err := c.cc.Invoke(ctx, VocabularyService_BatchCreateHanChar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VocabularyServiceServer is the server API for VocabularyService service.
// All implementations must embed UnimplementedVocabularyServiceServer
// for forward compatibility.
//
// VocabularyService 提供单词相关的服务
type VocabularyServiceServer interface {
	// Get 获取单词详情
	Get(context.Context, *VocabularyServiceGetRequest) (*VocabularyServiceGetResponse, error)
	// List 获取单词列表
	List(context.Context, *VocabularyServiceListRequest) (*VocabularyServiceListResponse, error)
	// GetAllMetadata 获取所有标签和分类信息
	GetAllMetadata(context.Context, *VocabularyServiceGetAllMetadataRequest) (*VocabularyServiceGetAllMetadataResponse, error)
	// ListHanChar 获取汉字列表
	ListHanChar(context.Context, *VocabularyServiceListHanCharRequest) (*VocabularyServiceListHanCharResponse, error)
	// 批量创建英文单词
	BatchCreate(context.Context, *VocabularyServiceBatchCreateRequest) (*VocabularyServiceBatchCreateResponse, error)
	// 批量创建汉字
	BatchCreateHanChar(context.Context, *VocabularyServiceBatchCreateHanCharRequest) (*VocabularyServiceBatchCreateHanCharResponse, error)
	mustEmbedUnimplementedVocabularyServiceServer()
}

// UnimplementedVocabularyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVocabularyServiceServer struct{}

func (UnimplementedVocabularyServiceServer) Get(context.Context, *VocabularyServiceGetRequest) (*VocabularyServiceGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedVocabularyServiceServer) List(context.Context, *VocabularyServiceListRequest) (*VocabularyServiceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedVocabularyServiceServer) GetAllMetadata(context.Context, *VocabularyServiceGetAllMetadataRequest) (*VocabularyServiceGetAllMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMetadata not implemented")
}
func (UnimplementedVocabularyServiceServer) ListHanChar(context.Context, *VocabularyServiceListHanCharRequest) (*VocabularyServiceListHanCharResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHanChar not implemented")
}
func (UnimplementedVocabularyServiceServer) BatchCreate(context.Context, *VocabularyServiceBatchCreateRequest) (*VocabularyServiceBatchCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreate not implemented")
}
func (UnimplementedVocabularyServiceServer) BatchCreateHanChar(context.Context, *VocabularyServiceBatchCreateHanCharRequest) (*VocabularyServiceBatchCreateHanCharResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateHanChar not implemented")
}
func (UnimplementedVocabularyServiceServer) mustEmbedUnimplementedVocabularyServiceServer() {}
func (UnimplementedVocabularyServiceServer) testEmbeddedByValue()                           {}

// UnsafeVocabularyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VocabularyServiceServer will
// result in compilation errors.
type UnsafeVocabularyServiceServer interface {
	mustEmbedUnimplementedVocabularyServiceServer()
}

func RegisterVocabularyServiceServer(s grpc.ServiceRegistrar, srv VocabularyServiceServer) {
	// If the following call pancis, it indicates UnimplementedVocabularyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VocabularyService_ServiceDesc, srv)
}

func _VocabularyService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VocabularyServiceGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VocabularyServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VocabularyService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VocabularyServiceServer).Get(ctx, req.(*VocabularyServiceGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VocabularyService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VocabularyServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VocabularyServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VocabularyService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VocabularyServiceServer).List(ctx, req.(*VocabularyServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VocabularyService_GetAllMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VocabularyServiceGetAllMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VocabularyServiceServer).GetAllMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VocabularyService_GetAllMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VocabularyServiceServer).GetAllMetadata(ctx, req.(*VocabularyServiceGetAllMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VocabularyService_ListHanChar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VocabularyServiceListHanCharRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VocabularyServiceServer).ListHanChar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VocabularyService_ListHanChar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VocabularyServiceServer).ListHanChar(ctx, req.(*VocabularyServiceListHanCharRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VocabularyService_BatchCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VocabularyServiceBatchCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VocabularyServiceServer).BatchCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VocabularyService_BatchCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VocabularyServiceServer).BatchCreate(ctx, req.(*VocabularyServiceBatchCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VocabularyService_BatchCreateHanChar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VocabularyServiceBatchCreateHanCharRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VocabularyServiceServer).BatchCreateHanChar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VocabularyService_BatchCreateHanChar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VocabularyServiceServer).BatchCreateHanChar(ctx, req.(*VocabularyServiceBatchCreateHanCharRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VocabularyService_ServiceDesc is the grpc.ServiceDesc for VocabularyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VocabularyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.v1.VocabularyService",
	HandlerType: (*VocabularyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _VocabularyService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _VocabularyService_List_Handler,
		},
		{
			MethodName: "GetAllMetadata",
			Handler:    _VocabularyService_GetAllMetadata_Handler,
		},
		{
			MethodName: "ListHanChar",
			Handler:    _VocabularyService_ListHanChar_Handler,
		},
		{
			MethodName: "BatchCreate",
			Handler:    _VocabularyService_BatchCreate_Handler,
		},
		{
			MethodName: "BatchCreateHanChar",
			Handler:    _VocabularyService_BatchCreateHanChar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/vocabulary.proto",
}
