// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/v1/admin.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AdminServiceCheckSystemStatusResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AdminServiceCheckSystemStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminServiceCheckSystemStatusResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AdminServiceCheckSystemStatusResponseMultiError, or nil if none found.
func (m *AdminServiceCheckSystemStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminServiceCheckSystemStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Initialized

	if len(errors) > 0 {
		return AdminServiceCheckSystemStatusResponseMultiError(errors)
	}

	return nil
}

// AdminServiceCheckSystemStatusResponseMultiError is an error wrapping
// multiple validation errors returned by
// AdminServiceCheckSystemStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type AdminServiceCheckSystemStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminServiceCheckSystemStatusResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminServiceCheckSystemStatusResponseMultiError) AllErrors() []error { return m }

// AdminServiceCheckSystemStatusResponseValidationError is the validation error
// returned by AdminServiceCheckSystemStatusResponse.Validate if the
// designated constraints aren't met.
type AdminServiceCheckSystemStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminServiceCheckSystemStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminServiceCheckSystemStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminServiceCheckSystemStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminServiceCheckSystemStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminServiceCheckSystemStatusResponseValidationError) ErrorName() string {
	return "AdminServiceCheckSystemStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AdminServiceCheckSystemStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminServiceCheckSystemStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminServiceCheckSystemStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminServiceCheckSystemStatusResponseValidationError{}

// Validate checks the field values on AdminServiceCheckSystemStatusRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AdminServiceCheckSystemStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminServiceCheckSystemStatusRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AdminServiceCheckSystemStatusRequestMultiError, or nil if none found.
func (m *AdminServiceCheckSystemStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminServiceCheckSystemStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminServiceCheckSystemStatusRequestMultiError(errors)
	}

	return nil
}

// AdminServiceCheckSystemStatusRequestMultiError is an error wrapping multiple
// validation errors returned by
// AdminServiceCheckSystemStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type AdminServiceCheckSystemStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminServiceCheckSystemStatusRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminServiceCheckSystemStatusRequestMultiError) AllErrors() []error { return m }

// AdminServiceCheckSystemStatusRequestValidationError is the validation error
// returned by AdminServiceCheckSystemStatusRequest.Validate if the designated
// constraints aren't met.
type AdminServiceCheckSystemStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminServiceCheckSystemStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminServiceCheckSystemStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminServiceCheckSystemStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminServiceCheckSystemStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminServiceCheckSystemStatusRequestValidationError) ErrorName() string {
	return "AdminServiceCheckSystemStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminServiceCheckSystemStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminServiceCheckSystemStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminServiceCheckSystemStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminServiceCheckSystemStatusRequestValidationError{}

// Validate checks the field values on AdminServiceGetCurrentAdminInfoRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AdminServiceGetCurrentAdminInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AdminServiceGetCurrentAdminInfoRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// AdminServiceGetCurrentAdminInfoRequestMultiError, or nil if none found.
func (m *AdminServiceGetCurrentAdminInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminServiceGetCurrentAdminInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AdminServiceGetCurrentAdminInfoRequestMultiError(errors)
	}

	return nil
}

// AdminServiceGetCurrentAdminInfoRequestMultiError is an error wrapping
// multiple validation errors returned by
// AdminServiceGetCurrentAdminInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type AdminServiceGetCurrentAdminInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminServiceGetCurrentAdminInfoRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminServiceGetCurrentAdminInfoRequestMultiError) AllErrors() []error { return m }

// AdminServiceGetCurrentAdminInfoRequestValidationError is the validation
// error returned by AdminServiceGetCurrentAdminInfoRequest.Validate if the
// designated constraints aren't met.
type AdminServiceGetCurrentAdminInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminServiceGetCurrentAdminInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminServiceGetCurrentAdminInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminServiceGetCurrentAdminInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminServiceGetCurrentAdminInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminServiceGetCurrentAdminInfoRequestValidationError) ErrorName() string {
	return "AdminServiceGetCurrentAdminInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminServiceGetCurrentAdminInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminServiceGetCurrentAdminInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminServiceGetCurrentAdminInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminServiceGetCurrentAdminInfoRequestValidationError{}

// Validate checks the field values on AdminServiceGetCurrentAdminInfoResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AdminServiceGetCurrentAdminInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// AdminServiceGetCurrentAdminInfoResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// AdminServiceGetCurrentAdminInfoResponseMultiError, or nil if none found.
func (m *AdminServiceGetCurrentAdminInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminServiceGetCurrentAdminInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAdmin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminServiceGetCurrentAdminInfoResponseValidationError{
					field:  "Admin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminServiceGetCurrentAdminInfoResponseValidationError{
					field:  "Admin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAdmin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminServiceGetCurrentAdminInfoResponseValidationError{
				field:  "Admin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdminServiceGetCurrentAdminInfoResponseMultiError(errors)
	}

	return nil
}

// AdminServiceGetCurrentAdminInfoResponseMultiError is an error wrapping
// multiple validation errors returned by
// AdminServiceGetCurrentAdminInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type AdminServiceGetCurrentAdminInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminServiceGetCurrentAdminInfoResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminServiceGetCurrentAdminInfoResponseMultiError) AllErrors() []error { return m }

// AdminServiceGetCurrentAdminInfoResponseValidationError is the validation
// error returned by AdminServiceGetCurrentAdminInfoResponse.Validate if the
// designated constraints aren't met.
type AdminServiceGetCurrentAdminInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminServiceGetCurrentAdminInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminServiceGetCurrentAdminInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminServiceGetCurrentAdminInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminServiceGetCurrentAdminInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminServiceGetCurrentAdminInfoResponseValidationError) ErrorName() string {
	return "AdminServiceGetCurrentAdminInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AdminServiceGetCurrentAdminInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminServiceGetCurrentAdminInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminServiceGetCurrentAdminInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminServiceGetCurrentAdminInfoResponseValidationError{}

// Validate checks the field values on AdminServiceInitializeSystemRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AdminServiceInitializeSystemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminServiceInitializeSystemRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AdminServiceInitializeSystemRequestMultiError, or nil if none found.
func (m *AdminServiceInitializeSystemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminServiceInitializeSystemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for Nickname

	if len(errors) > 0 {
		return AdminServiceInitializeSystemRequestMultiError(errors)
	}

	return nil
}

// AdminServiceInitializeSystemRequestMultiError is an error wrapping multiple
// validation errors returned by
// AdminServiceInitializeSystemRequest.ValidateAll() if the designated
// constraints aren't met.
type AdminServiceInitializeSystemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminServiceInitializeSystemRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminServiceInitializeSystemRequestMultiError) AllErrors() []error { return m }

// AdminServiceInitializeSystemRequestValidationError is the validation error
// returned by AdminServiceInitializeSystemRequest.Validate if the designated
// constraints aren't met.
type AdminServiceInitializeSystemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminServiceInitializeSystemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminServiceInitializeSystemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminServiceInitializeSystemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminServiceInitializeSystemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminServiceInitializeSystemRequestValidationError) ErrorName() string {
	return "AdminServiceInitializeSystemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminServiceInitializeSystemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminServiceInitializeSystemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminServiceInitializeSystemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminServiceInitializeSystemRequestValidationError{}

// Validate checks the field values on AdminServiceInitializeSystemResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *AdminServiceInitializeSystemResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminServiceInitializeSystemResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// AdminServiceInitializeSystemResponseMultiError, or nil if none found.
func (m *AdminServiceInitializeSystemResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminServiceInitializeSystemResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAdmin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminServiceInitializeSystemResponseValidationError{
					field:  "Admin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminServiceInitializeSystemResponseValidationError{
					field:  "Admin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAdmin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminServiceInitializeSystemResponseValidationError{
				field:  "Admin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AccessToken

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return AdminServiceInitializeSystemResponseMultiError(errors)
	}

	return nil
}

// AdminServiceInitializeSystemResponseMultiError is an error wrapping multiple
// validation errors returned by
// AdminServiceInitializeSystemResponse.ValidateAll() if the designated
// constraints aren't met.
type AdminServiceInitializeSystemResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminServiceInitializeSystemResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminServiceInitializeSystemResponseMultiError) AllErrors() []error { return m }

// AdminServiceInitializeSystemResponseValidationError is the validation error
// returned by AdminServiceInitializeSystemResponse.Validate if the designated
// constraints aren't met.
type AdminServiceInitializeSystemResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminServiceInitializeSystemResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminServiceInitializeSystemResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminServiceInitializeSystemResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminServiceInitializeSystemResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminServiceInitializeSystemResponseValidationError) ErrorName() string {
	return "AdminServiceInitializeSystemResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AdminServiceInitializeSystemResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminServiceInitializeSystemResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminServiceInitializeSystemResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminServiceInitializeSystemResponseValidationError{}

// Validate checks the field values on AdminServiceAdminLoginRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminServiceAdminLoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminServiceAdminLoginRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AdminServiceAdminLoginRequestMultiError, or nil if none found.
func (m *AdminServiceAdminLoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminServiceAdminLoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Username

	// no validation rules for Password

	if len(errors) > 0 {
		return AdminServiceAdminLoginRequestMultiError(errors)
	}

	return nil
}

// AdminServiceAdminLoginRequestMultiError is an error wrapping multiple
// validation errors returned by AdminServiceAdminLoginRequest.ValidateAll()
// if the designated constraints aren't met.
type AdminServiceAdminLoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminServiceAdminLoginRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminServiceAdminLoginRequestMultiError) AllErrors() []error { return m }

// AdminServiceAdminLoginRequestValidationError is the validation error
// returned by AdminServiceAdminLoginRequest.Validate if the designated
// constraints aren't met.
type AdminServiceAdminLoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminServiceAdminLoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminServiceAdminLoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminServiceAdminLoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminServiceAdminLoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminServiceAdminLoginRequestValidationError) ErrorName() string {
	return "AdminServiceAdminLoginRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminServiceAdminLoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminServiceAdminLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminServiceAdminLoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminServiceAdminLoginRequestValidationError{}

// Validate checks the field values on AdminServiceAdminLoginResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminServiceAdminLoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminServiceAdminLoginResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AdminServiceAdminLoginResponseMultiError, or nil if none found.
func (m *AdminServiceAdminLoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminServiceAdminLoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for RefreshToken

	if all {
		switch v := interface{}(m.GetAdmin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AdminServiceAdminLoginResponseValidationError{
					field:  "Admin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AdminServiceAdminLoginResponseValidationError{
					field:  "Admin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAdmin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AdminServiceAdminLoginResponseValidationError{
				field:  "Admin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AdminServiceAdminLoginResponseMultiError(errors)
	}

	return nil
}

// AdminServiceAdminLoginResponseMultiError is an error wrapping multiple
// validation errors returned by AdminServiceAdminLoginResponse.ValidateAll()
// if the designated constraints aren't met.
type AdminServiceAdminLoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminServiceAdminLoginResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminServiceAdminLoginResponseMultiError) AllErrors() []error { return m }

// AdminServiceAdminLoginResponseValidationError is the validation error
// returned by AdminServiceAdminLoginResponse.Validate if the designated
// constraints aren't met.
type AdminServiceAdminLoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminServiceAdminLoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminServiceAdminLoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminServiceAdminLoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminServiceAdminLoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminServiceAdminLoginResponseValidationError) ErrorName() string {
	return "AdminServiceAdminLoginResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AdminServiceAdminLoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminServiceAdminLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminServiceAdminLoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminServiceAdminLoginResponseValidationError{}

// Validate checks the field values on AdminInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AdminInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AdminInfoMultiError, or nil
// if none found.
func (m *AdminInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for Nickname

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	if len(errors) > 0 {
		return AdminInfoMultiError(errors)
	}

	return nil
}

// AdminInfoMultiError is an error wrapping multiple validation errors returned
// by AdminInfo.ValidateAll() if the designated constraints aren't met.
type AdminInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminInfoMultiError) AllErrors() []error { return m }

// AdminInfoValidationError is the validation error returned by
// AdminInfo.Validate if the designated constraints aren't met.
type AdminInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminInfoValidationError) ErrorName() string { return "AdminInfoValidationError" }

// Error satisfies the builtin error interface
func (e AdminInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminInfoValidationError{}

// Validate checks the field values on AdminServiceRefreshTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AdminServiceRefreshTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminServiceRefreshTokenRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AdminServiceRefreshTokenRequestMultiError, or nil if none found.
func (m *AdminServiceRefreshTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminServiceRefreshTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return AdminServiceRefreshTokenRequestMultiError(errors)
	}

	return nil
}

// AdminServiceRefreshTokenRequestMultiError is an error wrapping multiple
// validation errors returned by AdminServiceRefreshTokenRequest.ValidateAll()
// if the designated constraints aren't met.
type AdminServiceRefreshTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminServiceRefreshTokenRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminServiceRefreshTokenRequestMultiError) AllErrors() []error { return m }

// AdminServiceRefreshTokenRequestValidationError is the validation error
// returned by AdminServiceRefreshTokenRequest.Validate if the designated
// constraints aren't met.
type AdminServiceRefreshTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminServiceRefreshTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminServiceRefreshTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminServiceRefreshTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminServiceRefreshTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminServiceRefreshTokenRequestValidationError) ErrorName() string {
	return "AdminServiceRefreshTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AdminServiceRefreshTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminServiceRefreshTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminServiceRefreshTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminServiceRefreshTokenRequestValidationError{}

// Validate checks the field values on AdminServiceRefreshTokenResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *AdminServiceRefreshTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AdminServiceRefreshTokenResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AdminServiceRefreshTokenResponseMultiError, or nil if none found.
func (m *AdminServiceRefreshTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AdminServiceRefreshTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for RefreshToken

	if len(errors) > 0 {
		return AdminServiceRefreshTokenResponseMultiError(errors)
	}

	return nil
}

// AdminServiceRefreshTokenResponseMultiError is an error wrapping multiple
// validation errors returned by
// AdminServiceRefreshTokenResponse.ValidateAll() if the designated
// constraints aren't met.
type AdminServiceRefreshTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AdminServiceRefreshTokenResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AdminServiceRefreshTokenResponseMultiError) AllErrors() []error { return m }

// AdminServiceRefreshTokenResponseValidationError is the validation error
// returned by AdminServiceRefreshTokenResponse.Validate if the designated
// constraints aren't met.
type AdminServiceRefreshTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AdminServiceRefreshTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AdminServiceRefreshTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AdminServiceRefreshTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AdminServiceRefreshTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AdminServiceRefreshTokenResponseValidationError) ErrorName() string {
	return "AdminServiceRefreshTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AdminServiceRefreshTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAdminServiceRefreshTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AdminServiceRefreshTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AdminServiceRefreshTokenResponseValidationError{}
