// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/v1/course.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Course with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Course) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Course with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CourseMultiError, or nil if none found.
func (m *Course) ValidateAll() error {
	return m.validate(true)
}

func (m *Course) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Desc

	// no validation rules for CoverUrl

	// no validation rules for Level

	// no validation rules for Status

	for idx, item := range m.GetSections() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CourseValidationError{
						field:  fmt.Sprintf("Sections[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CourseValidationError{
						field:  fmt.Sprintf("Sections[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CourseValidationError{
					field:  fmt.Sprintf("Sections[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Version

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CourseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CourseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CourseValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CourseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CourseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CourseValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CourseMultiError(errors)
	}

	return nil
}

// CourseMultiError is an error wrapping multiple validation errors returned by
// Course.ValidateAll() if the designated constraints aren't met.
type CourseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CourseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CourseMultiError) AllErrors() []error { return m }

// CourseValidationError is the validation error returned by Course.Validate if
// the designated constraints aren't met.
type CourseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CourseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CourseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CourseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CourseValidationError) ErrorName() string { return "CourseValidationError" }

// Error satisfies the builtin error interface
func (e CourseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourseValidationError{}

// Validate checks the field values on SimpleCourse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SimpleCourse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SimpleCourse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SimpleCourseMultiError, or
// nil if none found.
func (m *SimpleCourse) ValidateAll() error {
	return m.validate(true)
}

func (m *SimpleCourse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Desc

	// no validation rules for CoverUrl

	// no validation rules for Level

	if len(errors) > 0 {
		return SimpleCourseMultiError(errors)
	}

	return nil
}

// SimpleCourseMultiError is an error wrapping multiple validation errors
// returned by SimpleCourse.ValidateAll() if the designated constraints aren't met.
type SimpleCourseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SimpleCourseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SimpleCourseMultiError) AllErrors() []error { return m }

// SimpleCourseValidationError is the validation error returned by
// SimpleCourse.Validate if the designated constraints aren't met.
type SimpleCourseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SimpleCourseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SimpleCourseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SimpleCourseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SimpleCourseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SimpleCourseValidationError) ErrorName() string { return "SimpleCourseValidationError" }

// Error satisfies the builtin error interface
func (e SimpleCourseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSimpleCourse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SimpleCourseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SimpleCourseValidationError{}

// Validate checks the field values on CourseServiceCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CourseServiceCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CourseServiceCreateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CourseServiceCreateRequestMultiError, or nil if none found.
func (m *CourseServiceCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CourseServiceCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _CourseServiceCreateRequest_Title_NotInLookup[m.GetTitle()]; ok {
		err := CourseServiceCreateRequestValidationError{
			field:  "Title",
			reason: "value must not be in list [ 未命名 新建课程]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 2 || l > 50 {
		err := CourseServiceCreateRequestValidationError{
			field:  "Title",
			reason: "value length must be between 2 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDesc()) > 1000 {
		err := CourseServiceCreateRequestValidationError{
			field:  "Desc",
			reason: "value length must be at most 1000 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if uri, err := url.Parse(m.GetCoverUrl()); err != nil {
		err = CourseServiceCreateRequestValidationError{
			field:  "CoverUrl",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := CourseServiceCreateRequestValidationError{
			field:  "CoverUrl",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CourseServiceCreateRequest_Level_NotInLookup[m.GetLevel()]; ok {
		err := CourseServiceCreateRequestValidationError{
			field:  "Level",
			reason: "value must not be in list [COURSE_LEVEL_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetTags()) > 20 {
		err := CourseServiceCreateRequestValidationError{
			field:  "Tags",
			reason: "value must contain no more than 20 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) > 20 {
			err := CourseServiceCreateRequestValidationError{
				field:  fmt.Sprintf("Tags[%v]", idx),
				reason: "value length must be at most 20 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return CourseServiceCreateRequestMultiError(errors)
	}

	return nil
}

// CourseServiceCreateRequestMultiError is an error wrapping multiple
// validation errors returned by CourseServiceCreateRequest.ValidateAll() if
// the designated constraints aren't met.
type CourseServiceCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CourseServiceCreateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CourseServiceCreateRequestMultiError) AllErrors() []error { return m }

// CourseServiceCreateRequestValidationError is the validation error returned
// by CourseServiceCreateRequest.Validate if the designated constraints aren't met.
type CourseServiceCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourseServiceCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CourseServiceCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CourseServiceCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CourseServiceCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CourseServiceCreateRequestValidationError) ErrorName() string {
	return "CourseServiceCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CourseServiceCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourseServiceCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourseServiceCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourseServiceCreateRequestValidationError{}

var _CourseServiceCreateRequest_Title_NotInLookup = map[string]struct{}{
	"":     {},
	"未命名":  {},
	"新建课程": {},
}

var _CourseServiceCreateRequest_Level_NotInLookup = map[CourseLevel]struct{}{
	0: {},
}

// Validate checks the field values on CourseServiceCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CourseServiceCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CourseServiceCreateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CourseServiceCreateResponseMultiError, or nil if none found.
func (m *CourseServiceCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CourseServiceCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CourseServiceCreateResponseMultiError(errors)
	}

	return nil
}

// CourseServiceCreateResponseMultiError is an error wrapping multiple
// validation errors returned by CourseServiceCreateResponse.ValidateAll() if
// the designated constraints aren't met.
type CourseServiceCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CourseServiceCreateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CourseServiceCreateResponseMultiError) AllErrors() []error { return m }

// CourseServiceCreateResponseValidationError is the validation error returned
// by CourseServiceCreateResponse.Validate if the designated constraints
// aren't met.
type CourseServiceCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourseServiceCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CourseServiceCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CourseServiceCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CourseServiceCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CourseServiceCreateResponseValidationError) ErrorName() string {
	return "CourseServiceCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CourseServiceCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourseServiceCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourseServiceCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourseServiceCreateResponseValidationError{}

// Validate checks the field values on CourseServiceUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CourseServiceUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CourseServiceUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CourseServiceUpdateRequestMultiError, or nil if none found.
func (m *CourseServiceUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CourseServiceUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := CourseServiceUpdateRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CourseServiceUpdateRequest_Title_NotInLookup[m.GetTitle()]; ok {
		err := CourseServiceUpdateRequestValidationError{
			field:  "Title",
			reason: "value must not be in list [ 未命名 新建课程]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 2 || l > 100 {
		err := CourseServiceUpdateRequestValidationError{
			field:  "Title",
			reason: "value length must be between 2 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDesc()) > 1000 {
		err := CourseServiceUpdateRequestValidationError{
			field:  "Desc",
			reason: "value length must be at most 1000 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if uri, err := url.Parse(m.GetCoverUrl()); err != nil {
		err = CourseServiceUpdateRequestValidationError{
			field:  "CoverUrl",
			reason: "value must be a valid URI",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	} else if !uri.IsAbs() {
		err := CourseServiceUpdateRequestValidationError{
			field:  "CoverUrl",
			reason: "value must be absolute",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CourseServiceUpdateRequest_Level_NotInLookup[m.GetLevel()]; ok {
		err := CourseServiceUpdateRequestValidationError{
			field:  "Level",
			reason: "value must not be in list [COURSE_LEVEL_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetTags()) > 10 {
		err := CourseServiceUpdateRequestValidationError{
			field:  "Tags",
			reason: "value must contain no more than 10 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetTags() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) > 20 {
			err := CourseServiceUpdateRequestValidationError{
				field:  fmt.Sprintf("Tags[%v]", idx),
				reason: "value length must be at most 20 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if _, ok := _CourseServiceUpdateRequest_Status_NotInLookup[m.GetStatus()]; ok {
		err := CourseServiceUpdateRequestValidationError{
			field:  "Status",
			reason: "value must not be in list [COURSE_STATUS_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CourseServiceUpdateRequestMultiError(errors)
	}

	return nil
}

// CourseServiceUpdateRequestMultiError is an error wrapping multiple
// validation errors returned by CourseServiceUpdateRequest.ValidateAll() if
// the designated constraints aren't met.
type CourseServiceUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CourseServiceUpdateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CourseServiceUpdateRequestMultiError) AllErrors() []error { return m }

// CourseServiceUpdateRequestValidationError is the validation error returned
// by CourseServiceUpdateRequest.Validate if the designated constraints aren't met.
type CourseServiceUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourseServiceUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CourseServiceUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CourseServiceUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CourseServiceUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CourseServiceUpdateRequestValidationError) ErrorName() string {
	return "CourseServiceUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CourseServiceUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourseServiceUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourseServiceUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourseServiceUpdateRequestValidationError{}

var _CourseServiceUpdateRequest_Title_NotInLookup = map[string]struct{}{
	"":     {},
	"未命名":  {},
	"新建课程": {},
}

var _CourseServiceUpdateRequest_Level_NotInLookup = map[CourseLevel]struct{}{
	0: {},
}

var _CourseServiceUpdateRequest_Status_NotInLookup = map[CourseStatus]struct{}{
	0: {},
}

// Validate checks the field values on CourseServiceUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CourseServiceUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CourseServiceUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CourseServiceUpdateResponseMultiError, or nil if none found.
func (m *CourseServiceUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CourseServiceUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CourseServiceUpdateResponseMultiError(errors)
	}

	return nil
}

// CourseServiceUpdateResponseMultiError is an error wrapping multiple
// validation errors returned by CourseServiceUpdateResponse.ValidateAll() if
// the designated constraints aren't met.
type CourseServiceUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CourseServiceUpdateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CourseServiceUpdateResponseMultiError) AllErrors() []error { return m }

// CourseServiceUpdateResponseValidationError is the validation error returned
// by CourseServiceUpdateResponse.Validate if the designated constraints
// aren't met.
type CourseServiceUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourseServiceUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CourseServiceUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CourseServiceUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CourseServiceUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CourseServiceUpdateResponseValidationError) ErrorName() string {
	return "CourseServiceUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CourseServiceUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourseServiceUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourseServiceUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourseServiceUpdateResponseValidationError{}

// Validate checks the field values on CourseServiceGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CourseServiceGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CourseServiceGetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CourseServiceGetRequestMultiError, or nil if none found.
func (m *CourseServiceGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CourseServiceGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := CourseServiceGetRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CourseServiceGetRequestMultiError(errors)
	}

	return nil
}

// CourseServiceGetRequestMultiError is an error wrapping multiple validation
// errors returned by CourseServiceGetRequest.ValidateAll() if the designated
// constraints aren't met.
type CourseServiceGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CourseServiceGetRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CourseServiceGetRequestMultiError) AllErrors() []error { return m }

// CourseServiceGetRequestValidationError is the validation error returned by
// CourseServiceGetRequest.Validate if the designated constraints aren't met.
type CourseServiceGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourseServiceGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CourseServiceGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CourseServiceGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CourseServiceGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CourseServiceGetRequestValidationError) ErrorName() string {
	return "CourseServiceGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CourseServiceGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourseServiceGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourseServiceGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourseServiceGetRequestValidationError{}

// Validate checks the field values on CourseServiceGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CourseServiceGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CourseServiceGetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CourseServiceGetResponseMultiError, or nil if none found.
func (m *CourseServiceGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CourseServiceGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCourse()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CourseServiceGetResponseValidationError{
					field:  "Course",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CourseServiceGetResponseValidationError{
					field:  "Course",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCourse()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CourseServiceGetResponseValidationError{
				field:  "Course",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CourseServiceGetResponseMultiError(errors)
	}

	return nil
}

// CourseServiceGetResponseMultiError is an error wrapping multiple validation
// errors returned by CourseServiceGetResponse.ValidateAll() if the designated
// constraints aren't met.
type CourseServiceGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CourseServiceGetResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CourseServiceGetResponseMultiError) AllErrors() []error { return m }

// CourseServiceGetResponseValidationError is the validation error returned by
// CourseServiceGetResponse.Validate if the designated constraints aren't met.
type CourseServiceGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourseServiceGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CourseServiceGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CourseServiceGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CourseServiceGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CourseServiceGetResponseValidationError) ErrorName() string {
	return "CourseServiceGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CourseServiceGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourseServiceGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourseServiceGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourseServiceGetResponseValidationError{}

// Validate checks the field values on CourseServiceDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CourseServiceDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CourseServiceDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CourseServiceDeleteRequestMultiError, or nil if none found.
func (m *CourseServiceDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CourseServiceDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := CourseServiceDeleteRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CourseServiceDeleteRequestMultiError(errors)
	}

	return nil
}

// CourseServiceDeleteRequestMultiError is an error wrapping multiple
// validation errors returned by CourseServiceDeleteRequest.ValidateAll() if
// the designated constraints aren't met.
type CourseServiceDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CourseServiceDeleteRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CourseServiceDeleteRequestMultiError) AllErrors() []error { return m }

// CourseServiceDeleteRequestValidationError is the validation error returned
// by CourseServiceDeleteRequest.Validate if the designated constraints aren't met.
type CourseServiceDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourseServiceDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CourseServiceDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CourseServiceDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CourseServiceDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CourseServiceDeleteRequestValidationError) ErrorName() string {
	return "CourseServiceDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CourseServiceDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourseServiceDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourseServiceDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourseServiceDeleteRequestValidationError{}

// Validate checks the field values on CourseServiceDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CourseServiceDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CourseServiceDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CourseServiceDeleteResponseMultiError, or nil if none found.
func (m *CourseServiceDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CourseServiceDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CourseServiceDeleteResponseMultiError(errors)
	}

	return nil
}

// CourseServiceDeleteResponseMultiError is an error wrapping multiple
// validation errors returned by CourseServiceDeleteResponse.ValidateAll() if
// the designated constraints aren't met.
type CourseServiceDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CourseServiceDeleteResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CourseServiceDeleteResponseMultiError) AllErrors() []error { return m }

// CourseServiceDeleteResponseValidationError is the validation error returned
// by CourseServiceDeleteResponse.Validate if the designated constraints
// aren't met.
type CourseServiceDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourseServiceDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CourseServiceDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CourseServiceDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CourseServiceDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CourseServiceDeleteResponseValidationError) ErrorName() string {
	return "CourseServiceDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CourseServiceDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourseServiceDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourseServiceDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourseServiceDeleteResponseValidationError{}

// Validate checks the field values on CourseServiceSearchRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CourseServiceSearchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CourseServiceSearchRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CourseServiceSearchRequestMultiError, or nil if none found.
func (m *CourseServiceSearchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CourseServiceSearchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Keyword

	// no validation rules for Level

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return CourseServiceSearchRequestMultiError(errors)
	}

	return nil
}

// CourseServiceSearchRequestMultiError is an error wrapping multiple
// validation errors returned by CourseServiceSearchRequest.ValidateAll() if
// the designated constraints aren't met.
type CourseServiceSearchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CourseServiceSearchRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CourseServiceSearchRequestMultiError) AllErrors() []error { return m }

// CourseServiceSearchRequestValidationError is the validation error returned
// by CourseServiceSearchRequest.Validate if the designated constraints aren't met.
type CourseServiceSearchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourseServiceSearchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CourseServiceSearchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CourseServiceSearchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CourseServiceSearchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CourseServiceSearchRequestValidationError) ErrorName() string {
	return "CourseServiceSearchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CourseServiceSearchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourseServiceSearchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourseServiceSearchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourseServiceSearchRequestValidationError{}

// Validate checks the field values on CourseServiceSearchResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CourseServiceSearchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CourseServiceSearchResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CourseServiceSearchResponseMultiError, or nil if none found.
func (m *CourseServiceSearchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CourseServiceSearchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCourses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CourseServiceSearchResponseValidationError{
						field:  fmt.Sprintf("Courses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CourseServiceSearchResponseValidationError{
						field:  fmt.Sprintf("Courses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CourseServiceSearchResponseValidationError{
					field:  fmt.Sprintf("Courses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return CourseServiceSearchResponseMultiError(errors)
	}

	return nil
}

// CourseServiceSearchResponseMultiError is an error wrapping multiple
// validation errors returned by CourseServiceSearchResponse.ValidateAll() if
// the designated constraints aren't met.
type CourseServiceSearchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CourseServiceSearchResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CourseServiceSearchResponseMultiError) AllErrors() []error { return m }

// CourseServiceSearchResponseValidationError is the validation error returned
// by CourseServiceSearchResponse.Validate if the designated constraints
// aren't met.
type CourseServiceSearchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourseServiceSearchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CourseServiceSearchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CourseServiceSearchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CourseServiceSearchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CourseServiceSearchResponseValidationError) ErrorName() string {
	return "CourseServiceSearchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CourseServiceSearchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourseServiceSearchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourseServiceSearchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourseServiceSearchResponseValidationError{}

// Validate checks the field values on CourseSection with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CourseSection) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CourseSection with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CourseSectionMultiError, or
// nil if none found.
func (m *CourseSection) ValidateAll() error {
	return m.validate(true)
}

func (m *CourseSection) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Desc

	// no validation rules for OrderIndex

	// no validation rules for Status

	for idx, item := range m.GetUnits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CourseSectionValidationError{
						field:  fmt.Sprintf("Units[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CourseSectionValidationError{
						field:  fmt.Sprintf("Units[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CourseSectionValidationError{
					field:  fmt.Sprintf("Units[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CourseSectionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CourseSectionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CourseSectionValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CourseSectionValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CourseSectionValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CourseSectionValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CourseSectionMultiError(errors)
	}

	return nil
}

// CourseSectionMultiError is an error wrapping multiple validation errors
// returned by CourseSection.ValidateAll() if the designated constraints
// aren't met.
type CourseSectionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CourseSectionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CourseSectionMultiError) AllErrors() []error { return m }

// CourseSectionValidationError is the validation error returned by
// CourseSection.Validate if the designated constraints aren't met.
type CourseSectionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourseSectionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CourseSectionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CourseSectionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CourseSectionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CourseSectionValidationError) ErrorName() string { return "CourseSectionValidationError" }

// Error satisfies the builtin error interface
func (e CourseSectionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourseSection.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourseSectionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourseSectionValidationError{}

// Validate checks the field values on CourseSectionUnit with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CourseSectionUnit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CourseSectionUnit with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CourseSectionUnitMultiError, or nil if none found.
func (m *CourseSectionUnit) ValidateAll() error {
	return m.validate(true)
}

func (m *CourseSectionUnit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Desc

	// no validation rules for QuestionIds

	// no validation rules for OrderIndex

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CourseSectionUnitValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CourseSectionUnitValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CourseSectionUnitValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CourseSectionUnitValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CourseSectionUnitValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CourseSectionUnitValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Tags

	if len(errors) > 0 {
		return CourseSectionUnitMultiError(errors)
	}

	return nil
}

// CourseSectionUnitMultiError is an error wrapping multiple validation errors
// returned by CourseSectionUnit.ValidateAll() if the designated constraints
// aren't met.
type CourseSectionUnitMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CourseSectionUnitMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CourseSectionUnitMultiError) AllErrors() []error { return m }

// CourseSectionUnitValidationError is the validation error returned by
// CourseSectionUnit.Validate if the designated constraints aren't met.
type CourseSectionUnitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourseSectionUnitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CourseSectionUnitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CourseSectionUnitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CourseSectionUnitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CourseSectionUnitValidationError) ErrorName() string {
	return "CourseSectionUnitValidationError"
}

// Error satisfies the builtin error interface
func (e CourseSectionUnitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourseSectionUnit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourseSectionUnitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourseSectionUnitValidationError{}

// Validate checks the field values on CourseServiceCreateSectionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CourseServiceCreateSectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CourseServiceCreateSectionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CourseServiceCreateSectionRequestMultiError, or nil if none found.
func (m *CourseServiceCreateSectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CourseServiceCreateSectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCourseId() <= 0 {
		err := CourseServiceCreateSectionRequestValidationError{
			field:  "CourseId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 100 {
		err := CourseServiceCreateSectionRequestValidationError{
			field:  "Title",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDesc()) > 500 {
		err := CourseServiceCreateSectionRequestValidationError{
			field:  "Desc",
			reason: "value length must be at most 500 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CourseServiceCreateSectionRequestMultiError(errors)
	}

	return nil
}

// CourseServiceCreateSectionRequestMultiError is an error wrapping multiple
// validation errors returned by
// CourseServiceCreateSectionRequest.ValidateAll() if the designated
// constraints aren't met.
type CourseServiceCreateSectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CourseServiceCreateSectionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CourseServiceCreateSectionRequestMultiError) AllErrors() []error { return m }

// CourseServiceCreateSectionRequestValidationError is the validation error
// returned by CourseServiceCreateSectionRequest.Validate if the designated
// constraints aren't met.
type CourseServiceCreateSectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourseServiceCreateSectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CourseServiceCreateSectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CourseServiceCreateSectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CourseServiceCreateSectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CourseServiceCreateSectionRequestValidationError) ErrorName() string {
	return "CourseServiceCreateSectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CourseServiceCreateSectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourseServiceCreateSectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourseServiceCreateSectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourseServiceCreateSectionRequestValidationError{}

// Validate checks the field values on CourseServiceCreateSectionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CourseServiceCreateSectionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CourseServiceCreateSectionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CourseServiceCreateSectionResponseMultiError, or nil if none found.
func (m *CourseServiceCreateSectionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CourseServiceCreateSectionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CourseServiceCreateSectionResponseMultiError(errors)
	}

	return nil
}

// CourseServiceCreateSectionResponseMultiError is an error wrapping multiple
// validation errors returned by
// CourseServiceCreateSectionResponse.ValidateAll() if the designated
// constraints aren't met.
type CourseServiceCreateSectionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CourseServiceCreateSectionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CourseServiceCreateSectionResponseMultiError) AllErrors() []error { return m }

// CourseServiceCreateSectionResponseValidationError is the validation error
// returned by CourseServiceCreateSectionResponse.Validate if the designated
// constraints aren't met.
type CourseServiceCreateSectionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourseServiceCreateSectionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CourseServiceCreateSectionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CourseServiceCreateSectionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CourseServiceCreateSectionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CourseServiceCreateSectionResponseValidationError) ErrorName() string {
	return "CourseServiceCreateSectionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CourseServiceCreateSectionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourseServiceCreateSectionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourseServiceCreateSectionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourseServiceCreateSectionResponseValidationError{}

// Validate checks the field values on CourseServiceUpdateSectionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CourseServiceUpdateSectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CourseServiceUpdateSectionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CourseServiceUpdateSectionRequestMultiError, or nil if none found.
func (m *CourseServiceUpdateSectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CourseServiceUpdateSectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := CourseServiceUpdateSectionRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 100 {
		err := CourseServiceUpdateSectionRequestValidationError{
			field:  "Title",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDesc()) > 500 {
		err := CourseServiceUpdateSectionRequestValidationError{
			field:  "Desc",
			reason: "value length must be at most 500 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for OrderIndex

	if _, ok := _CourseServiceUpdateSectionRequest_Status_NotInLookup[m.GetStatus()]; ok {
		err := CourseServiceUpdateSectionRequestValidationError{
			field:  "Status",
			reason: "value must not be in list [COURSE_SECTION_STATUS_UNSPECIFIED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CourseServiceUpdateSectionRequestMultiError(errors)
	}

	return nil
}

// CourseServiceUpdateSectionRequestMultiError is an error wrapping multiple
// validation errors returned by
// CourseServiceUpdateSectionRequest.ValidateAll() if the designated
// constraints aren't met.
type CourseServiceUpdateSectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CourseServiceUpdateSectionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CourseServiceUpdateSectionRequestMultiError) AllErrors() []error { return m }

// CourseServiceUpdateSectionRequestValidationError is the validation error
// returned by CourseServiceUpdateSectionRequest.Validate if the designated
// constraints aren't met.
type CourseServiceUpdateSectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourseServiceUpdateSectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CourseServiceUpdateSectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CourseServiceUpdateSectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CourseServiceUpdateSectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CourseServiceUpdateSectionRequestValidationError) ErrorName() string {
	return "CourseServiceUpdateSectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CourseServiceUpdateSectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourseServiceUpdateSectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourseServiceUpdateSectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourseServiceUpdateSectionRequestValidationError{}

var _CourseServiceUpdateSectionRequest_Status_NotInLookup = map[CourseSectionStatus]struct{}{
	0: {},
}

// Validate checks the field values on CourseServiceUpdateSectionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CourseServiceUpdateSectionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CourseServiceUpdateSectionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CourseServiceUpdateSectionResponseMultiError, or nil if none found.
func (m *CourseServiceUpdateSectionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CourseServiceUpdateSectionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CourseServiceUpdateSectionResponseMultiError(errors)
	}

	return nil
}

// CourseServiceUpdateSectionResponseMultiError is an error wrapping multiple
// validation errors returned by
// CourseServiceUpdateSectionResponse.ValidateAll() if the designated
// constraints aren't met.
type CourseServiceUpdateSectionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CourseServiceUpdateSectionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CourseServiceUpdateSectionResponseMultiError) AllErrors() []error { return m }

// CourseServiceUpdateSectionResponseValidationError is the validation error
// returned by CourseServiceUpdateSectionResponse.Validate if the designated
// constraints aren't met.
type CourseServiceUpdateSectionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourseServiceUpdateSectionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CourseServiceUpdateSectionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CourseServiceUpdateSectionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CourseServiceUpdateSectionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CourseServiceUpdateSectionResponseValidationError) ErrorName() string {
	return "CourseServiceUpdateSectionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CourseServiceUpdateSectionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourseServiceUpdateSectionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourseServiceUpdateSectionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourseServiceUpdateSectionResponseValidationError{}

// Validate checks the field values on CourseServiceDeleteSectionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CourseServiceDeleteSectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CourseServiceDeleteSectionRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CourseServiceDeleteSectionRequestMultiError, or nil if none found.
func (m *CourseServiceDeleteSectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CourseServiceDeleteSectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CourseServiceDeleteSectionRequestMultiError(errors)
	}

	return nil
}

// CourseServiceDeleteSectionRequestMultiError is an error wrapping multiple
// validation errors returned by
// CourseServiceDeleteSectionRequest.ValidateAll() if the designated
// constraints aren't met.
type CourseServiceDeleteSectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CourseServiceDeleteSectionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CourseServiceDeleteSectionRequestMultiError) AllErrors() []error { return m }

// CourseServiceDeleteSectionRequestValidationError is the validation error
// returned by CourseServiceDeleteSectionRequest.Validate if the designated
// constraints aren't met.
type CourseServiceDeleteSectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourseServiceDeleteSectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CourseServiceDeleteSectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CourseServiceDeleteSectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CourseServiceDeleteSectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CourseServiceDeleteSectionRequestValidationError) ErrorName() string {
	return "CourseServiceDeleteSectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CourseServiceDeleteSectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourseServiceDeleteSectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourseServiceDeleteSectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourseServiceDeleteSectionRequestValidationError{}

// Validate checks the field values on CourseServiceDeleteSectionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CourseServiceDeleteSectionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CourseServiceDeleteSectionResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CourseServiceDeleteSectionResponseMultiError, or nil if none found.
func (m *CourseServiceDeleteSectionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CourseServiceDeleteSectionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CourseServiceDeleteSectionResponseMultiError(errors)
	}

	return nil
}

// CourseServiceDeleteSectionResponseMultiError is an error wrapping multiple
// validation errors returned by
// CourseServiceDeleteSectionResponse.ValidateAll() if the designated
// constraints aren't met.
type CourseServiceDeleteSectionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CourseServiceDeleteSectionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CourseServiceDeleteSectionResponseMultiError) AllErrors() []error { return m }

// CourseServiceDeleteSectionResponseValidationError is the validation error
// returned by CourseServiceDeleteSectionResponse.Validate if the designated
// constraints aren't met.
type CourseServiceDeleteSectionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourseServiceDeleteSectionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CourseServiceDeleteSectionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CourseServiceDeleteSectionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CourseServiceDeleteSectionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CourseServiceDeleteSectionResponseValidationError) ErrorName() string {
	return "CourseServiceDeleteSectionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CourseServiceDeleteSectionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourseServiceDeleteSectionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourseServiceDeleteSectionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourseServiceDeleteSectionResponseValidationError{}

// Validate checks the field values on CourseServiceCreateUnitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CourseServiceCreateUnitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CourseServiceCreateUnitRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CourseServiceCreateUnitRequestMultiError, or nil if none found.
func (m *CourseServiceCreateUnitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CourseServiceCreateUnitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SectionId

	// no validation rules for Title

	// no validation rules for Desc

	// no validation rules for QuestionIds

	// no validation rules for OrderIndex

	// no validation rules for Tags

	if len(errors) > 0 {
		return CourseServiceCreateUnitRequestMultiError(errors)
	}

	return nil
}

// CourseServiceCreateUnitRequestMultiError is an error wrapping multiple
// validation errors returned by CourseServiceCreateUnitRequest.ValidateAll()
// if the designated constraints aren't met.
type CourseServiceCreateUnitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CourseServiceCreateUnitRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CourseServiceCreateUnitRequestMultiError) AllErrors() []error { return m }

// CourseServiceCreateUnitRequestValidationError is the validation error
// returned by CourseServiceCreateUnitRequest.Validate if the designated
// constraints aren't met.
type CourseServiceCreateUnitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourseServiceCreateUnitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CourseServiceCreateUnitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CourseServiceCreateUnitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CourseServiceCreateUnitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CourseServiceCreateUnitRequestValidationError) ErrorName() string {
	return "CourseServiceCreateUnitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CourseServiceCreateUnitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourseServiceCreateUnitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourseServiceCreateUnitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourseServiceCreateUnitRequestValidationError{}

// Validate checks the field values on CourseServiceCreateUnitResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CourseServiceCreateUnitResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CourseServiceCreateUnitResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CourseServiceCreateUnitResponseMultiError, or nil if none found.
func (m *CourseServiceCreateUnitResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CourseServiceCreateUnitResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CourseServiceCreateUnitResponseMultiError(errors)
	}

	return nil
}

// CourseServiceCreateUnitResponseMultiError is an error wrapping multiple
// validation errors returned by CourseServiceCreateUnitResponse.ValidateAll()
// if the designated constraints aren't met.
type CourseServiceCreateUnitResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CourseServiceCreateUnitResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CourseServiceCreateUnitResponseMultiError) AllErrors() []error { return m }

// CourseServiceCreateUnitResponseValidationError is the validation error
// returned by CourseServiceCreateUnitResponse.Validate if the designated
// constraints aren't met.
type CourseServiceCreateUnitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourseServiceCreateUnitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CourseServiceCreateUnitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CourseServiceCreateUnitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CourseServiceCreateUnitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CourseServiceCreateUnitResponseValidationError) ErrorName() string {
	return "CourseServiceCreateUnitResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CourseServiceCreateUnitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourseServiceCreateUnitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourseServiceCreateUnitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourseServiceCreateUnitResponseValidationError{}

// Validate checks the field values on CourseServiceUpdateUnitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CourseServiceUpdateUnitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CourseServiceUpdateUnitRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CourseServiceUpdateUnitRequestMultiError, or nil if none found.
func (m *CourseServiceUpdateUnitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CourseServiceUpdateUnitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Desc

	// no validation rules for QuestionIds

	// no validation rules for OrderIndex

	// no validation rules for Status

	// no validation rules for Tags

	if len(errors) > 0 {
		return CourseServiceUpdateUnitRequestMultiError(errors)
	}

	return nil
}

// CourseServiceUpdateUnitRequestMultiError is an error wrapping multiple
// validation errors returned by CourseServiceUpdateUnitRequest.ValidateAll()
// if the designated constraints aren't met.
type CourseServiceUpdateUnitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CourseServiceUpdateUnitRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CourseServiceUpdateUnitRequestMultiError) AllErrors() []error { return m }

// CourseServiceUpdateUnitRequestValidationError is the validation error
// returned by CourseServiceUpdateUnitRequest.Validate if the designated
// constraints aren't met.
type CourseServiceUpdateUnitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourseServiceUpdateUnitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CourseServiceUpdateUnitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CourseServiceUpdateUnitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CourseServiceUpdateUnitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CourseServiceUpdateUnitRequestValidationError) ErrorName() string {
	return "CourseServiceUpdateUnitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CourseServiceUpdateUnitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourseServiceUpdateUnitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourseServiceUpdateUnitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourseServiceUpdateUnitRequestValidationError{}

// Validate checks the field values on CourseServiceUpdateUnitResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CourseServiceUpdateUnitResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CourseServiceUpdateUnitResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CourseServiceUpdateUnitResponseMultiError, or nil if none found.
func (m *CourseServiceUpdateUnitResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CourseServiceUpdateUnitResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CourseServiceUpdateUnitResponseMultiError(errors)
	}

	return nil
}

// CourseServiceUpdateUnitResponseMultiError is an error wrapping multiple
// validation errors returned by CourseServiceUpdateUnitResponse.ValidateAll()
// if the designated constraints aren't met.
type CourseServiceUpdateUnitResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CourseServiceUpdateUnitResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CourseServiceUpdateUnitResponseMultiError) AllErrors() []error { return m }

// CourseServiceUpdateUnitResponseValidationError is the validation error
// returned by CourseServiceUpdateUnitResponse.Validate if the designated
// constraints aren't met.
type CourseServiceUpdateUnitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourseServiceUpdateUnitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CourseServiceUpdateUnitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CourseServiceUpdateUnitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CourseServiceUpdateUnitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CourseServiceUpdateUnitResponseValidationError) ErrorName() string {
	return "CourseServiceUpdateUnitResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CourseServiceUpdateUnitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourseServiceUpdateUnitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourseServiceUpdateUnitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourseServiceUpdateUnitResponseValidationError{}

// Validate checks the field values on CourseServiceDeleteUnitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CourseServiceDeleteUnitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CourseServiceDeleteUnitRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CourseServiceDeleteUnitRequestMultiError, or nil if none found.
func (m *CourseServiceDeleteUnitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CourseServiceDeleteUnitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CourseServiceDeleteUnitRequestMultiError(errors)
	}

	return nil
}

// CourseServiceDeleteUnitRequestMultiError is an error wrapping multiple
// validation errors returned by CourseServiceDeleteUnitRequest.ValidateAll()
// if the designated constraints aren't met.
type CourseServiceDeleteUnitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CourseServiceDeleteUnitRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CourseServiceDeleteUnitRequestMultiError) AllErrors() []error { return m }

// CourseServiceDeleteUnitRequestValidationError is the validation error
// returned by CourseServiceDeleteUnitRequest.Validate if the designated
// constraints aren't met.
type CourseServiceDeleteUnitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourseServiceDeleteUnitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CourseServiceDeleteUnitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CourseServiceDeleteUnitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CourseServiceDeleteUnitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CourseServiceDeleteUnitRequestValidationError) ErrorName() string {
	return "CourseServiceDeleteUnitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CourseServiceDeleteUnitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourseServiceDeleteUnitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourseServiceDeleteUnitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourseServiceDeleteUnitRequestValidationError{}

// Validate checks the field values on CourseServiceDeleteUnitResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CourseServiceDeleteUnitResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CourseServiceDeleteUnitResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CourseServiceDeleteUnitResponseMultiError, or nil if none found.
func (m *CourseServiceDeleteUnitResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CourseServiceDeleteUnitResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CourseServiceDeleteUnitResponseMultiError(errors)
	}

	return nil
}

// CourseServiceDeleteUnitResponseMultiError is an error wrapping multiple
// validation errors returned by CourseServiceDeleteUnitResponse.ValidateAll()
// if the designated constraints aren't met.
type CourseServiceDeleteUnitResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CourseServiceDeleteUnitResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CourseServiceDeleteUnitResponseMultiError) AllErrors() []error { return m }

// CourseServiceDeleteUnitResponseValidationError is the validation error
// returned by CourseServiceDeleteUnitResponse.Validate if the designated
// constraints aren't met.
type CourseServiceDeleteUnitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourseServiceDeleteUnitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CourseServiceDeleteUnitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CourseServiceDeleteUnitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CourseServiceDeleteUnitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CourseServiceDeleteUnitResponseValidationError) ErrorName() string {
	return "CourseServiceDeleteUnitResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CourseServiceDeleteUnitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourseServiceDeleteUnitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourseServiceDeleteUnitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourseServiceDeleteUnitResponseValidationError{}

// Validate checks the field values on CourseServiceListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CourseServiceListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CourseServiceListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CourseServiceListRequestMultiError, or nil if none found.
func (m *CourseServiceListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CourseServiceListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Status

	// no validation rules for Level

	if len(errors) > 0 {
		return CourseServiceListRequestMultiError(errors)
	}

	return nil
}

// CourseServiceListRequestMultiError is an error wrapping multiple validation
// errors returned by CourseServiceListRequest.ValidateAll() if the designated
// constraints aren't met.
type CourseServiceListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CourseServiceListRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CourseServiceListRequestMultiError) AllErrors() []error { return m }

// CourseServiceListRequestValidationError is the validation error returned by
// CourseServiceListRequest.Validate if the designated constraints aren't met.
type CourseServiceListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourseServiceListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CourseServiceListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CourseServiceListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CourseServiceListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CourseServiceListRequestValidationError) ErrorName() string {
	return "CourseServiceListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CourseServiceListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourseServiceListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourseServiceListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourseServiceListRequestValidationError{}

// Validate checks the field values on CourseServiceListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CourseServiceListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CourseServiceListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CourseServiceListResponseMultiError, or nil if none found.
func (m *CourseServiceListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CourseServiceListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCourses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CourseServiceListResponseValidationError{
						field:  fmt.Sprintf("Courses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CourseServiceListResponseValidationError{
						field:  fmt.Sprintf("Courses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CourseServiceListResponseValidationError{
					field:  fmt.Sprintf("Courses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return CourseServiceListResponseMultiError(errors)
	}

	return nil
}

// CourseServiceListResponseMultiError is an error wrapping multiple validation
// errors returned by CourseServiceListResponse.ValidateAll() if the
// designated constraints aren't met.
type CourseServiceListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CourseServiceListResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CourseServiceListResponseMultiError) AllErrors() []error { return m }

// CourseServiceListResponseValidationError is the validation error returned by
// CourseServiceListResponse.Validate if the designated constraints aren't met.
type CourseServiceListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CourseServiceListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CourseServiceListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CourseServiceListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CourseServiceListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CourseServiceListResponseValidationError) ErrorName() string {
	return "CourseServiceListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CourseServiceListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCourseServiceListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CourseServiceListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CourseServiceListResponseValidationError{}
