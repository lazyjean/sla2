// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/v1/word.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on WordInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WordInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WordInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WordInfoMultiError, or nil
// if none found.
func (m *WordInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *WordInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Spelling

	// no validation rules for Pronunciation

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WordInfoValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WordInfoValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WordInfoValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WordInfoValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WordInfoValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WordInfoValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WordInfoMultiError(errors)
	}

	return nil
}

// WordInfoMultiError is an error wrapping multiple validation errors returned
// by WordInfo.ValidateAll() if the designated constraints aren't met.
type WordInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WordInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WordInfoMultiError) AllErrors() []error { return m }

// WordInfoValidationError is the validation error returned by
// WordInfo.Validate if the designated constraints aren't met.
type WordInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WordInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WordInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WordInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WordInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WordInfoValidationError) ErrorName() string { return "WordInfoValidationError" }

// Error satisfies the builtin error interface
func (e WordInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWordInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WordInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WordInfoValidationError{}

// Validate checks the field values on WordServiceGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WordServiceGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WordServiceGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WordServiceGetRequestMultiError, or nil if none found.
func (m *WordServiceGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WordServiceGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WordId

	if len(errors) > 0 {
		return WordServiceGetRequestMultiError(errors)
	}

	return nil
}

// WordServiceGetRequestMultiError is an error wrapping multiple validation
// errors returned by WordServiceGetRequest.ValidateAll() if the designated
// constraints aren't met.
type WordServiceGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WordServiceGetRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WordServiceGetRequestMultiError) AllErrors() []error { return m }

// WordServiceGetRequestValidationError is the validation error returned by
// WordServiceGetRequest.Validate if the designated constraints aren't met.
type WordServiceGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WordServiceGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WordServiceGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WordServiceGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WordServiceGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WordServiceGetRequestValidationError) ErrorName() string {
	return "WordServiceGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WordServiceGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWordServiceGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WordServiceGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WordServiceGetRequestValidationError{}

// Validate checks the field values on WordServiceGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WordServiceGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WordServiceGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WordServiceGetResponseMultiError, or nil if none found.
func (m *WordServiceGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WordServiceGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWord()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WordServiceGetResponseValidationError{
					field:  "Word",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WordServiceGetResponseValidationError{
					field:  "Word",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWord()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WordServiceGetResponseValidationError{
				field:  "Word",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WordServiceGetResponseMultiError(errors)
	}

	return nil
}

// WordServiceGetResponseMultiError is an error wrapping multiple validation
// errors returned by WordServiceGetResponse.ValidateAll() if the designated
// constraints aren't met.
type WordServiceGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WordServiceGetResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WordServiceGetResponseMultiError) AllErrors() []error { return m }

// WordServiceGetResponseValidationError is the validation error returned by
// WordServiceGetResponse.Validate if the designated constraints aren't met.
type WordServiceGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WordServiceGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WordServiceGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WordServiceGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WordServiceGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WordServiceGetResponseValidationError) ErrorName() string {
	return "WordServiceGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WordServiceGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWordServiceGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WordServiceGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WordServiceGetResponseValidationError{}

// Validate checks the field values on WordServiceListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WordServiceListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WordServiceListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WordServiceListRequestMultiError, or nil if none found.
func (m *WordServiceListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WordServiceListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return WordServiceListRequestMultiError(errors)
	}

	return nil
}

// WordServiceListRequestMultiError is an error wrapping multiple validation
// errors returned by WordServiceListRequest.ValidateAll() if the designated
// constraints aren't met.
type WordServiceListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WordServiceListRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WordServiceListRequestMultiError) AllErrors() []error { return m }

// WordServiceListRequestValidationError is the validation error returned by
// WordServiceListRequest.Validate if the designated constraints aren't met.
type WordServiceListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WordServiceListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WordServiceListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WordServiceListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WordServiceListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WordServiceListRequestValidationError) ErrorName() string {
	return "WordServiceListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WordServiceListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWordServiceListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WordServiceListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WordServiceListRequestValidationError{}

// Validate checks the field values on WordServiceListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WordServiceListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WordServiceListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WordServiceListResponseMultiError, or nil if none found.
func (m *WordServiceListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WordServiceListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetWords() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WordServiceListResponseValidationError{
						field:  fmt.Sprintf("Words[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WordServiceListResponseValidationError{
						field:  fmt.Sprintf("Words[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WordServiceListResponseValidationError{
					field:  fmt.Sprintf("Words[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return WordServiceListResponseMultiError(errors)
	}

	return nil
}

// WordServiceListResponseMultiError is an error wrapping multiple validation
// errors returned by WordServiceListResponse.ValidateAll() if the designated
// constraints aren't met.
type WordServiceListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WordServiceListResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WordServiceListResponseMultiError) AllErrors() []error { return m }

// WordServiceListResponseValidationError is the validation error returned by
// WordServiceListResponse.Validate if the designated constraints aren't met.
type WordServiceListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WordServiceListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WordServiceListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WordServiceListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WordServiceListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WordServiceListResponseValidationError) ErrorName() string {
	return "WordServiceListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WordServiceListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWordServiceListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WordServiceListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WordServiceListResponseValidationError{}
