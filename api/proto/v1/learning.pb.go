// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: proto/v1/learning.proto

package pb

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MemoryUnitType 记忆单元类型
type MemoryUnitType int32

const (
	MemoryUnitType_MEMORY_UNIT_TYPE_UNSPECIFIED MemoryUnitType = 0
	MemoryUnitType_MEMORY_UNIT_TYPE_HAN_CHAR    MemoryUnitType = 1 // 汉字
	MemoryUnitType_MEMORY_UNIT_TYPE_WORD        MemoryUnitType = 2 // 单词
)

// Enum value maps for MemoryUnitType.
var (
	MemoryUnitType_name = map[int32]string{
		0: "MEMORY_UNIT_TYPE_UNSPECIFIED",
		1: "MEMORY_UNIT_TYPE_HAN_CHAR",
		2: "MEMORY_UNIT_TYPE_WORD",
	}
	MemoryUnitType_value = map[string]int32{
		"MEMORY_UNIT_TYPE_UNSPECIFIED": 0,
		"MEMORY_UNIT_TYPE_HAN_CHAR":    1,
		"MEMORY_UNIT_TYPE_WORD":        2,
	}
)

func (x MemoryUnitType) Enum() *MemoryUnitType {
	p := new(MemoryUnitType)
	*p = x
	return p
}

func (x MemoryUnitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MemoryUnitType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_v1_learning_proto_enumTypes[0].Descriptor()
}

func (MemoryUnitType) Type() protoreflect.EnumType {
	return &file_proto_v1_learning_proto_enumTypes[0]
}

func (x MemoryUnitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MemoryUnitType.Descriptor instead.
func (MemoryUnitType) EnumDescriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{0}
}

// MasteryLevel 掌握程度
type MasteryLevel int32

const (
	MasteryLevel_MASTERY_LEVEL_UNSPECIFIED MasteryLevel = 0 // 未指定
	MasteryLevel_MASTERY_LEVEL_UNLEARNED   MasteryLevel = 1 // 未学习
	MasteryLevel_MASTERY_LEVEL_BEGINNER    MasteryLevel = 2 // 初学
	MasteryLevel_MASTERY_LEVEL_FAMILIAR    MasteryLevel = 3 // 熟悉
	MasteryLevel_MASTERY_LEVEL_MASTERED    MasteryLevel = 4 // 掌握
	MasteryLevel_MASTERY_LEVEL_EXPERT      MasteryLevel = 5 // 精通
)

// Enum value maps for MasteryLevel.
var (
	MasteryLevel_name = map[int32]string{
		0: "MASTERY_LEVEL_UNSPECIFIED",
		1: "MASTERY_LEVEL_UNLEARNED",
		2: "MASTERY_LEVEL_BEGINNER",
		3: "MASTERY_LEVEL_FAMILIAR",
		4: "MASTERY_LEVEL_MASTERED",
		5: "MASTERY_LEVEL_EXPERT",
	}
	MasteryLevel_value = map[string]int32{
		"MASTERY_LEVEL_UNSPECIFIED": 0,
		"MASTERY_LEVEL_UNLEARNED":   1,
		"MASTERY_LEVEL_BEGINNER":    2,
		"MASTERY_LEVEL_FAMILIAR":    3,
		"MASTERY_LEVEL_MASTERED":    4,
		"MASTERY_LEVEL_EXPERT":      5,
	}
)

func (x MasteryLevel) Enum() *MasteryLevel {
	p := new(MasteryLevel)
	*p = x
	return p
}

func (x MasteryLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MasteryLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_v1_learning_proto_enumTypes[1].Descriptor()
}

func (MasteryLevel) Type() protoreflect.EnumType {
	return &file_proto_v1_learning_proto_enumTypes[1]
}

func (x MasteryLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MasteryLevel.Descriptor instead.
func (MasteryLevel) EnumDescriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{1}
}

// ReviewResult 复习结果
type ReviewResult int32

const (
	ReviewResult_REVIEW_RESULT_UNSPECIFIED ReviewResult = 0 // 未指定
	ReviewResult_REVIEW_RESULT_CORRECT     ReviewResult = 1 // 正确
	ReviewResult_REVIEW_RESULT_WRONG       ReviewResult = 2 // 错误
	ReviewResult_REVIEW_RESULT_SKIP        ReviewResult = 3 // 跳过
)

// Enum value maps for ReviewResult.
var (
	ReviewResult_name = map[int32]string{
		0: "REVIEW_RESULT_UNSPECIFIED",
		1: "REVIEW_RESULT_CORRECT",
		2: "REVIEW_RESULT_WRONG",
		3: "REVIEW_RESULT_SKIP",
	}
	ReviewResult_value = map[string]int32{
		"REVIEW_RESULT_UNSPECIFIED": 0,
		"REVIEW_RESULT_CORRECT":     1,
		"REVIEW_RESULT_WRONG":       2,
		"REVIEW_RESULT_SKIP":        3,
	}
)

func (x ReviewResult) Enum() *ReviewResult {
	p := new(ReviewResult)
	*p = x
	return p
}

func (x ReviewResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReviewResult) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_v1_learning_proto_enumTypes[2].Descriptor()
}

func (ReviewResult) Type() protoreflect.EnumType {
	return &file_proto_v1_learning_proto_enumTypes[2]
}

func (x ReviewResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReviewResult.Descriptor instead.
func (ReviewResult) EnumDescriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{2}
}

// MemoryUnit 记忆单元
type MemoryUnit struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	Id        uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                  // 记忆单元ID
	UserId    uint32                 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`            // 用户ID
	Type      MemoryUnitType         `protobuf:"varint,3,opt,name=type,proto3,enum=proto.v1.MemoryUnitType" json:"type,omitempty"` // 记忆单元类型
	ContentId uint32                 `protobuf:"varint,4,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`   // 内容ID（对应汉字ID、单词ID等）
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`    // 创建时间
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`    // 更新时间
	// 学习状态
	MasteryLevel       MasteryLevel           `protobuf:"varint,7,opt,name=mastery_level,json=masteryLevel,proto3,enum=proto.v1.MasteryLevel" json:"mastery_level,omitempty"` // 掌握程度
	ReviewCount        uint32                 `protobuf:"varint,8,opt,name=review_count,json=reviewCount,proto3" json:"review_count,omitempty"`                               // 复习次数
	NextReviewAt       *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=next_review_at,json=nextReviewAt,proto3" json:"next_review_at,omitempty"`                           // 下次复习时间
	LastReviewAt       *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=last_review_at,json=lastReviewAt,proto3" json:"last_review_at,omitempty"`                          // 上次复习时间
	StudyDuration      uint32                 `protobuf:"varint,11,opt,name=study_duration,json=studyDuration,proto3" json:"study_duration,omitempty"`                        // 学习时长（秒）
	RetentionRate      float32                `protobuf:"fixed32,12,opt,name=retention_rate,json=retentionRate,proto3" json:"retention_rate,omitempty"`                       // 记忆保持率（0-1）
	ConsecutiveCorrect uint32                 `protobuf:"varint,13,opt,name=consecutive_correct,json=consecutiveCorrect,proto3" json:"consecutive_correct,omitempty"`         // 连续正确次数
	ConsecutiveWrong   uint32                 `protobuf:"varint,14,opt,name=consecutive_wrong,json=consecutiveWrong,proto3" json:"consecutive_wrong,omitempty"`               // 连续错误次数
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *MemoryUnit) Reset() {
	*x = MemoryUnit{}
	mi := &file_proto_v1_learning_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemoryUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryUnit) ProtoMessage() {}

func (x *MemoryUnit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryUnit.ProtoReflect.Descriptor instead.
func (*MemoryUnit) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{0}
}

func (x *MemoryUnit) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MemoryUnit) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MemoryUnit) GetType() MemoryUnitType {
	if x != nil {
		return x.Type
	}
	return MemoryUnitType_MEMORY_UNIT_TYPE_UNSPECIFIED
}

func (x *MemoryUnit) GetContentId() uint32 {
	if x != nil {
		return x.ContentId
	}
	return 0
}

func (x *MemoryUnit) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *MemoryUnit) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *MemoryUnit) GetMasteryLevel() MasteryLevel {
	if x != nil {
		return x.MasteryLevel
	}
	return MasteryLevel_MASTERY_LEVEL_UNSPECIFIED
}

func (x *MemoryUnit) GetReviewCount() uint32 {
	if x != nil {
		return x.ReviewCount
	}
	return 0
}

func (x *MemoryUnit) GetNextReviewAt() *timestamppb.Timestamp {
	if x != nil {
		return x.NextReviewAt
	}
	return nil
}

func (x *MemoryUnit) GetLastReviewAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastReviewAt
	}
	return nil
}

func (x *MemoryUnit) GetStudyDuration() uint32 {
	if x != nil {
		return x.StudyDuration
	}
	return 0
}

func (x *MemoryUnit) GetRetentionRate() float32 {
	if x != nil {
		return x.RetentionRate
	}
	return 0
}

func (x *MemoryUnit) GetConsecutiveCorrect() uint32 {
	if x != nil {
		return x.ConsecutiveCorrect
	}
	return 0
}

func (x *MemoryUnit) GetConsecutiveWrong() uint32 {
	if x != nil {
		return x.ConsecutiveWrong
	}
	return 0
}

// ReviewInterval 复习间隔
type ReviewInterval struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Days          uint32                 `protobuf:"varint,1,opt,name=days,proto3" json:"days,omitempty"`       // 天数
	Hours         uint32                 `protobuf:"varint,2,opt,name=hours,proto3" json:"hours,omitempty"`     // 小时
	Minutes       uint32                 `protobuf:"varint,3,opt,name=minutes,proto3" json:"minutes,omitempty"` // 分钟
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReviewInterval) Reset() {
	*x = ReviewInterval{}
	mi := &file_proto_v1_learning_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReviewInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewInterval) ProtoMessage() {}

func (x *ReviewInterval) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewInterval.ProtoReflect.Descriptor instead.
func (*ReviewInterval) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{1}
}

func (x *ReviewInterval) GetDays() uint32 {
	if x != nil {
		return x.Days
	}
	return 0
}

func (x *ReviewInterval) GetHours() uint32 {
	if x != nil {
		return x.Hours
	}
	return 0
}

func (x *ReviewInterval) GetMinutes() uint32 {
	if x != nil {
		return x.Minutes
	}
	return 0
}

// LearningProgress 学习进度基础信息
type LearningProgress struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Progress       float32                `protobuf:"fixed32,1,opt,name=progress,proto3" json:"progress,omitempty"`                                  // 进度百分比 0-100
	CompletedItems uint32                 `protobuf:"varint,2,opt,name=completed_items,json=completedItems,proto3" json:"completed_items,omitempty"` // 已完成项目数
	TotalItems     uint32                 `protobuf:"varint,3,opt,name=total_items,json=totalItems,proto3" json:"total_items,omitempty"`             // 总项目数
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *LearningProgress) Reset() {
	*x = LearningProgress{}
	mi := &file_proto_v1_learning_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LearningProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LearningProgress) ProtoMessage() {}

func (x *LearningProgress) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LearningProgress.ProtoReflect.Descriptor instead.
func (*LearningProgress) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{2}
}

func (x *LearningProgress) GetProgress() float32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *LearningProgress) GetCompletedItems() uint32 {
	if x != nil {
		return x.CompletedItems
	}
	return 0
}

func (x *LearningProgress) GetTotalItems() uint32 {
	if x != nil {
		return x.TotalItems
	}
	return 0
}

// GetLearningCourseProgressRequest 获取课程进度请求
type LearningServiceGetCourseProgressRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CourseId      uint32                 `protobuf:"varint,1,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LearningServiceGetCourseProgressRequest) Reset() {
	*x = LearningServiceGetCourseProgressRequest{}
	mi := &file_proto_v1_learning_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LearningServiceGetCourseProgressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LearningServiceGetCourseProgressRequest) ProtoMessage() {}

func (x *LearningServiceGetCourseProgressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LearningServiceGetCourseProgressRequest.ProtoReflect.Descriptor instead.
func (*LearningServiceGetCourseProgressRequest) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{3}
}

func (x *LearningServiceGetCourseProgressRequest) GetCourseId() uint32 {
	if x != nil {
		return x.CourseId
	}
	return 0
}

// GetLearningCourseProgressResponse 获取课程进度响应
type LearningServiceGetCourseProgressResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Progress      *LearningProgress      `protobuf:"bytes,1,opt,name=progress,proto3" json:"progress,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LearningServiceGetCourseProgressResponse) Reset() {
	*x = LearningServiceGetCourseProgressResponse{}
	mi := &file_proto_v1_learning_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LearningServiceGetCourseProgressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LearningServiceGetCourseProgressResponse) ProtoMessage() {}

func (x *LearningServiceGetCourseProgressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LearningServiceGetCourseProgressResponse.ProtoReflect.Descriptor instead.
func (*LearningServiceGetCourseProgressResponse) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{4}
}

func (x *LearningServiceGetCourseProgressResponse) GetProgress() *LearningProgress {
	if x != nil {
		return x.Progress
	}
	return nil
}

// GetLearningSectionProgressRequest 获取章节进度请求
type LearningServiceGetSectionProgressRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SectionId     uint32                 `protobuf:"varint,1,opt,name=section_id,json=sectionId,proto3" json:"section_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LearningServiceGetSectionProgressRequest) Reset() {
	*x = LearningServiceGetSectionProgressRequest{}
	mi := &file_proto_v1_learning_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LearningServiceGetSectionProgressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LearningServiceGetSectionProgressRequest) ProtoMessage() {}

func (x *LearningServiceGetSectionProgressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LearningServiceGetSectionProgressRequest.ProtoReflect.Descriptor instead.
func (*LearningServiceGetSectionProgressRequest) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{5}
}

func (x *LearningServiceGetSectionProgressRequest) GetSectionId() uint32 {
	if x != nil {
		return x.SectionId
	}
	return 0
}

// GetLearningSectionProgressResponse 获取章节进度响应
type LearningServiceGetSectionProgressResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Progress         *LearningProgress      `protobuf:"bytes,1,opt,name=progress,proto3" json:"progress,omitempty"`
	CompletedUnitIds []uint32               `protobuf:"varint,2,rep,packed,name=completed_unit_ids,json=completedUnitIds,proto3" json:"completed_unit_ids,omitempty"` // 已完成的单元ID列表
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *LearningServiceGetSectionProgressResponse) Reset() {
	*x = LearningServiceGetSectionProgressResponse{}
	mi := &file_proto_v1_learning_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LearningServiceGetSectionProgressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LearningServiceGetSectionProgressResponse) ProtoMessage() {}

func (x *LearningServiceGetSectionProgressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LearningServiceGetSectionProgressResponse.ProtoReflect.Descriptor instead.
func (*LearningServiceGetSectionProgressResponse) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{6}
}

func (x *LearningServiceGetSectionProgressResponse) GetProgress() *LearningProgress {
	if x != nil {
		return x.Progress
	}
	return nil
}

func (x *LearningServiceGetSectionProgressResponse) GetCompletedUnitIds() []uint32 {
	if x != nil {
		return x.CompletedUnitIds
	}
	return nil
}

// GetLearningUnitProgressRequest 获取单元进度请求
type LearningServiceGetUnitProgressRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UnitId        uint32                 `protobuf:"varint,1,opt,name=unit_id,json=unitId,proto3" json:"unit_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LearningServiceGetUnitProgressRequest) Reset() {
	*x = LearningServiceGetUnitProgressRequest{}
	mi := &file_proto_v1_learning_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LearningServiceGetUnitProgressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LearningServiceGetUnitProgressRequest) ProtoMessage() {}

func (x *LearningServiceGetUnitProgressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LearningServiceGetUnitProgressRequest.ProtoReflect.Descriptor instead.
func (*LearningServiceGetUnitProgressRequest) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{7}
}

func (x *LearningServiceGetUnitProgressRequest) GetUnitId() uint32 {
	if x != nil {
		return x.UnitId
	}
	return 0
}

// UpdateLearningUnitProgressRequest 更新单元进度请求
type LearningServiceUpdateUnitProgressRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UnitId        uint32                 `protobuf:"varint,1,opt,name=unit_id,json=unitId,proto3" json:"unit_id,omitempty"`
	SectionId     uint32                 `protobuf:"varint,2,opt,name=section_id,json=sectionId,proto3" json:"section_id,omitempty"` // 单元所属的章节ID
	Completed     bool                   `protobuf:"varint,3,opt,name=completed,proto3" json:"completed,omitempty"`                  // 是否完成
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LearningServiceUpdateUnitProgressRequest) Reset() {
	*x = LearningServiceUpdateUnitProgressRequest{}
	mi := &file_proto_v1_learning_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LearningServiceUpdateUnitProgressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LearningServiceUpdateUnitProgressRequest) ProtoMessage() {}

func (x *LearningServiceUpdateUnitProgressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LearningServiceUpdateUnitProgressRequest.ProtoReflect.Descriptor instead.
func (*LearningServiceUpdateUnitProgressRequest) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{8}
}

func (x *LearningServiceUpdateUnitProgressRequest) GetUnitId() uint32 {
	if x != nil {
		return x.UnitId
	}
	return 0
}

func (x *LearningServiceUpdateUnitProgressRequest) GetSectionId() uint32 {
	if x != nil {
		return x.SectionId
	}
	return 0
}

func (x *LearningServiceUpdateUnitProgressRequest) GetCompleted() bool {
	if x != nil {
		return x.Completed
	}
	return false
}

// UpdateLearningUnitProgressResponse 更新单元进度响应
type LearningServiceUpdateUnitProgressResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LearningServiceUpdateUnitProgressResponse) Reset() {
	*x = LearningServiceUpdateUnitProgressResponse{}
	mi := &file_proto_v1_learning_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LearningServiceUpdateUnitProgressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LearningServiceUpdateUnitProgressResponse) ProtoMessage() {}

func (x *LearningServiceUpdateUnitProgressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LearningServiceUpdateUnitProgressResponse.ProtoReflect.Descriptor instead.
func (*LearningServiceUpdateUnitProgressResponse) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{9}
}

// 请求和响应消息
type GetMemoryStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MemoryUnitId  uint32                 `protobuf:"varint,1,opt,name=memory_unit_id,json=memoryUnitId,proto3" json:"memory_unit_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMemoryStatusRequest) Reset() {
	*x = GetMemoryStatusRequest{}
	mi := &file_proto_v1_learning_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMemoryStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMemoryStatusRequest) ProtoMessage() {}

func (x *GetMemoryStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMemoryStatusRequest.ProtoReflect.Descriptor instead.
func (*GetMemoryStatusRequest) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{10}
}

func (x *GetMemoryStatusRequest) GetMemoryUnitId() uint32 {
	if x != nil {
		return x.MemoryUnitId
	}
	return 0
}

type GetMemoryStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *MemoryUnit            `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMemoryStatusResponse) Reset() {
	*x = GetMemoryStatusResponse{}
	mi := &file_proto_v1_learning_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMemoryStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMemoryStatusResponse) ProtoMessage() {}

func (x *GetMemoryStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMemoryStatusResponse.ProtoReflect.Descriptor instead.
func (*GetMemoryStatusResponse) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{11}
}

func (x *GetMemoryStatusResponse) GetStatus() *MemoryUnit {
	if x != nil {
		return x.Status
	}
	return nil
}

type UpdateMemoryStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MemoryUnitId  uint32                 `protobuf:"varint,1,opt,name=memory_unit_id,json=memoryUnitId,proto3" json:"memory_unit_id,omitempty"`
	MasteryLevel  MasteryLevel           `protobuf:"varint,2,opt,name=mastery_level,json=masteryLevel,proto3,enum=proto.v1.MasteryLevel" json:"mastery_level,omitempty"`
	Notes         []string               `protobuf:"bytes,3,rep,name=notes,proto3" json:"notes,omitempty"`
	StudyDuration uint32                 `protobuf:"varint,4,opt,name=study_duration,json=studyDuration,proto3" json:"study_duration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateMemoryStatusRequest) Reset() {
	*x = UpdateMemoryStatusRequest{}
	mi := &file_proto_v1_learning_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMemoryStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMemoryStatusRequest) ProtoMessage() {}

func (x *UpdateMemoryStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMemoryStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateMemoryStatusRequest) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateMemoryStatusRequest) GetMemoryUnitId() uint32 {
	if x != nil {
		return x.MemoryUnitId
	}
	return 0
}

func (x *UpdateMemoryStatusRequest) GetMasteryLevel() MasteryLevel {
	if x != nil {
		return x.MasteryLevel
	}
	return MasteryLevel_MASTERY_LEVEL_UNSPECIFIED
}

func (x *UpdateMemoryStatusRequest) GetNotes() []string {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *UpdateMemoryStatusRequest) GetStudyDuration() uint32 {
	if x != nil {
		return x.StudyDuration
	}
	return 0
}

type UpdateMemoryStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateMemoryStatusResponse) Reset() {
	*x = UpdateMemoryStatusResponse{}
	mi := &file_proto_v1_learning_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMemoryStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMemoryStatusResponse) ProtoMessage() {}

func (x *UpdateMemoryStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMemoryStatusResponse.ProtoReflect.Descriptor instead.
func (*UpdateMemoryStatusResponse) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{13}
}

type ListMemoriesForReviewRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          uint32                 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      uint32                 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Types         []MemoryUnitType       `protobuf:"varint,3,rep,packed,name=types,proto3,enum=proto.v1.MemoryUnitType" json:"types,omitempty"` // 可选的记忆单元类型过滤
	Tags          []string               `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`                                        // 可选的标签过滤
	Categories    []string               `protobuf:"bytes,5,rep,name=categories,proto3" json:"categories,omitempty"`                            // 可选的分类过滤
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMemoriesForReviewRequest) Reset() {
	*x = ListMemoriesForReviewRequest{}
	mi := &file_proto_v1_learning_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMemoriesForReviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMemoriesForReviewRequest) ProtoMessage() {}

func (x *ListMemoriesForReviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMemoriesForReviewRequest.ProtoReflect.Descriptor instead.
func (*ListMemoriesForReviewRequest) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{14}
}

func (x *ListMemoriesForReviewRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListMemoriesForReviewRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListMemoriesForReviewRequest) GetTypes() []MemoryUnitType {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *ListMemoriesForReviewRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ListMemoriesForReviewRequest) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

type ListMemoriesForReviewResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Statuses      []*MemoryUnit          `protobuf:"bytes,1,rep,name=statuses,proto3" json:"statuses,omitempty"`
	Total         uint32                 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMemoriesForReviewResponse) Reset() {
	*x = ListMemoriesForReviewResponse{}
	mi := &file_proto_v1_learning_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMemoriesForReviewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMemoriesForReviewResponse) ProtoMessage() {}

func (x *ListMemoriesForReviewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMemoriesForReviewResponse.ProtoReflect.Descriptor instead.
func (*ListMemoriesForReviewResponse) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{15}
}

func (x *ListMemoriesForReviewResponse) GetStatuses() []*MemoryUnit {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *ListMemoriesForReviewResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetMemoryStatsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          *MemoryUnitType        `protobuf:"varint,1,opt,name=type,proto3,enum=proto.v1.MemoryUnitType,oneof" json:"type,omitempty"` // 可选的记忆单元类型过滤
	Tag           *string                `protobuf:"bytes,2,opt,name=tag,proto3,oneof" json:"tag,omitempty"`                                 // 可选的标签过滤
	Category      *string                `protobuf:"bytes,3,opt,name=category,proto3,oneof" json:"category,omitempty"`                       // 可选的分类过滤
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMemoryStatsRequest) Reset() {
	*x = GetMemoryStatsRequest{}
	mi := &file_proto_v1_learning_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMemoryStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMemoryStatsRequest) ProtoMessage() {}

func (x *GetMemoryStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMemoryStatsRequest.ProtoReflect.Descriptor instead.
func (*GetMemoryStatsRequest) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{16}
}

func (x *GetMemoryStatsRequest) GetType() MemoryUnitType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return MemoryUnitType_MEMORY_UNIT_TYPE_UNSPECIFIED
}

func (x *GetMemoryStatsRequest) GetTag() string {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return ""
}

func (x *GetMemoryStatsRequest) GetCategory() string {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return ""
}

type GetMemoryStatsResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TotalLearned    uint32                 `protobuf:"varint,1,opt,name=total_learned,json=totalLearned,proto3" json:"total_learned,omitempty"`                                                                                   // 已学习总数
	MasteredCount   uint32                 `protobuf:"varint,2,opt,name=mastered_count,json=masteredCount,proto3" json:"mastered_count,omitempty"`                                                                                // 已掌握数量
	NeedReviewCount uint32                 `protobuf:"varint,3,opt,name=need_review_count,json=needReviewCount,proto3" json:"need_review_count,omitempty"`                                                                        // 需要复习数量
	TotalStudyTime  uint32                 `protobuf:"varint,4,opt,name=total_study_time,json=totalStudyTime,proto3" json:"total_study_time,omitempty"`                                                                           // 总学习时长（秒）
	LevelStats      map[uint32]uint32      `protobuf:"bytes,5,rep,name=level_stats,json=levelStats,proto3" json:"level_stats,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`              // 各掌握程度统计
	RetentionRates  map[uint32]float32     `protobuf:"bytes,6,rep,name=retention_rates,json=retentionRates,proto3" json:"retention_rates,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"` // 各类型记忆保持率
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetMemoryStatsResponse) Reset() {
	*x = GetMemoryStatsResponse{}
	mi := &file_proto_v1_learning_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMemoryStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMemoryStatsResponse) ProtoMessage() {}

func (x *GetMemoryStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMemoryStatsResponse.ProtoReflect.Descriptor instead.
func (*GetMemoryStatsResponse) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{17}
}

func (x *GetMemoryStatsResponse) GetTotalLearned() uint32 {
	if x != nil {
		return x.TotalLearned
	}
	return 0
}

func (x *GetMemoryStatsResponse) GetMasteredCount() uint32 {
	if x != nil {
		return x.MasteredCount
	}
	return 0
}

func (x *GetMemoryStatsResponse) GetNeedReviewCount() uint32 {
	if x != nil {
		return x.NeedReviewCount
	}
	return 0
}

func (x *GetMemoryStatsResponse) GetTotalStudyTime() uint32 {
	if x != nil {
		return x.TotalStudyTime
	}
	return 0
}

func (x *GetMemoryStatsResponse) GetLevelStats() map[uint32]uint32 {
	if x != nil {
		return x.LevelStats
	}
	return nil
}

func (x *GetMemoryStatsResponse) GetRetentionRates() map[uint32]float32 {
	if x != nil {
		return x.RetentionRates
	}
	return nil
}

// ReviewWordRequest 复习单词请求
type ReviewWordRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WordId        uint32                 `protobuf:"varint,1,opt,name=word_id,json=wordId,proto3" json:"word_id,omitempty"`                   // 单词ID (对应 MemoryUnit 的 ContentID)
	Result        ReviewResult           `protobuf:"varint,2,opt,name=result,proto3,enum=proto.v1.ReviewResult" json:"result,omitempty"`      // 复习结果
	ResponseTime  uint32                 `protobuf:"varint,3,opt,name=response_time,json=responseTime,proto3" json:"response_time,omitempty"` // 响应时间（毫秒）
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReviewWordRequest) Reset() {
	*x = ReviewWordRequest{}
	mi := &file_proto_v1_learning_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReviewWordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewWordRequest) ProtoMessage() {}

func (x *ReviewWordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewWordRequest.ProtoReflect.Descriptor instead.
func (*ReviewWordRequest) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{18}
}

func (x *ReviewWordRequest) GetWordId() uint32 {
	if x != nil {
		return x.WordId
	}
	return 0
}

func (x *ReviewWordRequest) GetResult() ReviewResult {
	if x != nil {
		return x.Result
	}
	return ReviewResult_REVIEW_RESULT_UNSPECIFIED
}

func (x *ReviewWordRequest) GetResponseTime() uint32 {
	if x != nil {
		return x.ResponseTime
	}
	return 0
}

// ReviewWordResponse 复习单词响应
type ReviewWordResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReviewWordResponse) Reset() {
	*x = ReviewWordResponse{}
	mi := &file_proto_v1_learning_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReviewWordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewWordResponse) ProtoMessage() {}

func (x *ReviewWordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewWordResponse.ProtoReflect.Descriptor instead.
func (*ReviewWordResponse) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{19}
}

// ReviewHanCharRequest 复习汉字请求
type ReviewHanCharRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HanCharId     uint32                 `protobuf:"varint,1,opt,name=han_char_id,json=hanCharId,proto3" json:"han_char_id,omitempty"`        // 汉字ID (对应 MemoryUnit 的 ContentID)
	Result        ReviewResult           `protobuf:"varint,2,opt,name=result,proto3,enum=proto.v1.ReviewResult" json:"result,omitempty"`      // 复习结果
	ResponseTime  uint32                 `protobuf:"varint,3,opt,name=response_time,json=responseTime,proto3" json:"response_time,omitempty"` // 响应时间（毫秒）
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReviewHanCharRequest) Reset() {
	*x = ReviewHanCharRequest{}
	mi := &file_proto_v1_learning_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReviewHanCharRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewHanCharRequest) ProtoMessage() {}

func (x *ReviewHanCharRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewHanCharRequest.ProtoReflect.Descriptor instead.
func (*ReviewHanCharRequest) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{20}
}

func (x *ReviewHanCharRequest) GetHanCharId() uint32 {
	if x != nil {
		return x.HanCharId
	}
	return 0
}

func (x *ReviewHanCharRequest) GetResult() ReviewResult {
	if x != nil {
		return x.Result
	}
	return ReviewResult_REVIEW_RESULT_UNSPECIFIED
}

func (x *ReviewHanCharRequest) GetResponseTime() uint32 {
	if x != nil {
		return x.ResponseTime
	}
	return 0
}

// ReviewHanCharResponse 复习汉字响应
type ReviewHanCharResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReviewHanCharResponse) Reset() {
	*x = ReviewHanCharResponse{}
	mi := &file_proto_v1_learning_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReviewHanCharResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewHanCharResponse) ProtoMessage() {}

func (x *ReviewHanCharResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewHanCharResponse.ProtoReflect.Descriptor instead.
func (*ReviewHanCharResponse) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{21}
}

// MemoryReview 记忆复习记录
type MemoryReview struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                           // 记忆复习记录ID
	MemoryUnitId  uint32                 `protobuf:"varint,2,opt,name=memory_unit_id,json=memoryUnitId,proto3" json:"memory_unit_id,omitempty"` // 记忆单元ID
	UserId        uint32                 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                     // 用户ID
	Result        ReviewResult           `protobuf:"varint,4,opt,name=result,proto3,enum=proto.v1.ReviewResult" json:"result,omitempty"`        // 复习结果
	ResponseTime  uint32                 `protobuf:"varint,5,opt,name=response_time,json=responseTime,proto3" json:"response_time,omitempty"`   // 响应时间（毫秒）
	ReviewTime    *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=review_time,json=reviewTime,proto3" json:"review_time,omitempty"`          // 复习时间
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`             // 创建时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MemoryReview) Reset() {
	*x = MemoryReview{}
	mi := &file_proto_v1_learning_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemoryReview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryReview) ProtoMessage() {}

func (x *MemoryReview) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryReview.ProtoReflect.Descriptor instead.
func (*MemoryReview) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{22}
}

func (x *MemoryReview) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MemoryReview) GetMemoryUnitId() uint32 {
	if x != nil {
		return x.MemoryUnitId
	}
	return 0
}

func (x *MemoryReview) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MemoryReview) GetResult() ReviewResult {
	if x != nil {
		return x.Result
	}
	return ReviewResult_REVIEW_RESULT_UNSPECIFIED
}

func (x *MemoryReview) GetResponseTime() uint32 {
	if x != nil {
		return x.ResponseTime
	}
	return 0
}

func (x *MemoryReview) GetReviewTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ReviewTime
	}
	return nil
}

func (x *MemoryReview) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

// 提交汉字复习结果请求
type SubmitHanCharReviewRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 复习的汉字ID
	HanCharId string `protobuf:"bytes,1,opt,name=han_char_id,json=hanCharId,proto3" json:"han_char_id,omitempty"`
	// 是否认识
	IsRecognized bool `protobuf:"varint,2,opt,name=is_recognized,json=isRecognized,proto3" json:"is_recognized,omitempty"`
	// 复习时间
	ReviewTime    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=review_time,json=reviewTime,proto3" json:"review_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitHanCharReviewRequest) Reset() {
	*x = SubmitHanCharReviewRequest{}
	mi := &file_proto_v1_learning_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitHanCharReviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitHanCharReviewRequest) ProtoMessage() {}

func (x *SubmitHanCharReviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitHanCharReviewRequest.ProtoReflect.Descriptor instead.
func (*SubmitHanCharReviewRequest) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{23}
}

func (x *SubmitHanCharReviewRequest) GetHanCharId() string {
	if x != nil {
		return x.HanCharId
	}
	return ""
}

func (x *SubmitHanCharReviewRequest) GetIsRecognized() bool {
	if x != nil {
		return x.IsRecognized
	}
	return false
}

func (x *SubmitHanCharReviewRequest) GetReviewTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ReviewTime
	}
	return nil
}

// 提交汉字复习结果响应
type SubmitHanCharReviewResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 下次复习时间
	NextReviewTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=next_review_time,json=nextReviewTime,proto3" json:"next_review_time,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SubmitHanCharReviewResponse) Reset() {
	*x = SubmitHanCharReviewResponse{}
	mi := &file_proto_v1_learning_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitHanCharReviewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitHanCharReviewResponse) ProtoMessage() {}

func (x *SubmitHanCharReviewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitHanCharReviewResponse.ProtoReflect.Descriptor instead.
func (*SubmitHanCharReviewResponse) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{24}
}

func (x *SubmitHanCharReviewResponse) GetNextReviewTime() *timestamppb.Timestamp {
	if x != nil {
		return x.NextReviewTime
	}
	return nil
}

// 获取汉字测试请求
type GetHanCharTestRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 测试数量
	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	// 难度等级（1-5，数字越大难度越高）
	DifficultyLevel int32 `protobuf:"varint,2,opt,name=difficulty_level,json=difficultyLevel,proto3" json:"difficulty_level,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetHanCharTestRequest) Reset() {
	*x = GetHanCharTestRequest{}
	mi := &file_proto_v1_learning_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHanCharTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHanCharTestRequest) ProtoMessage() {}

func (x *GetHanCharTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHanCharTestRequest.ProtoReflect.Descriptor instead.
func (*GetHanCharTestRequest) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{25}
}

func (x *GetHanCharTestRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetHanCharTestRequest) GetDifficultyLevel() int32 {
	if x != nil {
		return x.DifficultyLevel
	}
	return 0
}

// 获取汉字测试响应
type GetHanCharTestResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 测试汉字列表
	HanChars      []*HanChar `protobuf:"bytes,1,rep,name=han_chars,json=hanChars,proto3" json:"han_chars,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetHanCharTestResponse) Reset() {
	*x = GetHanCharTestResponse{}
	mi := &file_proto_v1_learning_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetHanCharTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHanCharTestResponse) ProtoMessage() {}

func (x *GetHanCharTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHanCharTestResponse.ProtoReflect.Descriptor instead.
func (*GetHanCharTestResponse) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{26}
}

func (x *GetHanCharTestResponse) GetHanChars() []*HanChar {
	if x != nil {
		return x.HanChars
	}
	return nil
}

// 提交汉字测试结果请求
type SubmitHanCharTestResultRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 测试结果
	Results       []*HanCharTestResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitHanCharTestResultRequest) Reset() {
	*x = SubmitHanCharTestResultRequest{}
	mi := &file_proto_v1_learning_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitHanCharTestResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitHanCharTestResultRequest) ProtoMessage() {}

func (x *SubmitHanCharTestResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitHanCharTestResultRequest.ProtoReflect.Descriptor instead.
func (*SubmitHanCharTestResultRequest) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{27}
}

func (x *SubmitHanCharTestResultRequest) GetResults() []*HanCharTestResult {
	if x != nil {
		return x.Results
	}
	return nil
}

// 汉字测试结果
type HanCharTestResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 汉字ID
	HanCharId uint32 `protobuf:"varint,1,opt,name=han_char_id,json=hanCharId,proto3" json:"han_char_id,omitempty"`
	// 是否认识
	IsRecognized  bool `protobuf:"varint,2,opt,name=is_recognized,json=isRecognized,proto3" json:"is_recognized,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HanCharTestResult) Reset() {
	*x = HanCharTestResult{}
	mi := &file_proto_v1_learning_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HanCharTestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HanCharTestResult) ProtoMessage() {}

func (x *HanCharTestResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HanCharTestResult.ProtoReflect.Descriptor instead.
func (*HanCharTestResult) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{28}
}

func (x *HanCharTestResult) GetHanCharId() uint32 {
	if x != nil {
		return x.HanCharId
	}
	return 0
}

func (x *HanCharTestResult) GetIsRecognized() bool {
	if x != nil {
		return x.IsRecognized
	}
	return false
}

// 提交汉字测试结果响应
type SubmitHanCharTestResultResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitHanCharTestResultResponse) Reset() {
	*x = SubmitHanCharTestResultResponse{}
	mi := &file_proto_v1_learning_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitHanCharTestResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitHanCharTestResultResponse) ProtoMessage() {}

func (x *SubmitHanCharTestResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitHanCharTestResultResponse.ProtoReflect.Descriptor instead.
func (*SubmitHanCharTestResultResponse) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{29}
}

// 获取生字学习内容请求
type GetNewHanCharLearningRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 学习数量
	Count         int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNewHanCharLearningRequest) Reset() {
	*x = GetNewHanCharLearningRequest{}
	mi := &file_proto_v1_learning_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNewHanCharLearningRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewHanCharLearningRequest) ProtoMessage() {}

func (x *GetNewHanCharLearningRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewHanCharLearningRequest.ProtoReflect.Descriptor instead.
func (*GetNewHanCharLearningRequest) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{30}
}

func (x *GetNewHanCharLearningRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// 获取生字学习内容响应
type GetNewHanCharLearningResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 学习内容
	Contents      []*HanCharLearningContent `protobuf:"bytes,1,rep,name=contents,proto3" json:"contents,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNewHanCharLearningResponse) Reset() {
	*x = GetNewHanCharLearningResponse{}
	mi := &file_proto_v1_learning_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNewHanCharLearningResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNewHanCharLearningResponse) ProtoMessage() {}

func (x *GetNewHanCharLearningResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNewHanCharLearningResponse.ProtoReflect.Descriptor instead.
func (*GetNewHanCharLearningResponse) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{31}
}

func (x *GetNewHanCharLearningResponse) GetContents() []*HanCharLearningContent {
	if x != nil {
		return x.Contents
	}
	return nil
}

// 汉字学习内容
type HanCharLearningContent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 汉字ID
	HanCharId string `protobuf:"bytes,1,opt,name=han_char_id,json=hanCharId,proto3" json:"han_char_id,omitempty"`
	// 汉字
	HanChar string `protobuf:"bytes,2,opt,name=han_char,json=hanChar,proto3" json:"han_char,omitempty"`
	// 拼音
	Pinyin string `protobuf:"bytes,3,opt,name=pinyin,proto3" json:"pinyin,omitempty"`
	// 释义
	Meaning string `protobuf:"bytes,4,opt,name=meaning,proto3" json:"meaning,omitempty"`
	// 例句
	Examples      []string `protobuf:"bytes,5,rep,name=examples,proto3" json:"examples,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HanCharLearningContent) Reset() {
	*x = HanCharLearningContent{}
	mi := &file_proto_v1_learning_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HanCharLearningContent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HanCharLearningContent) ProtoMessage() {}

func (x *HanCharLearningContent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HanCharLearningContent.ProtoReflect.Descriptor instead.
func (*HanCharLearningContent) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{32}
}

func (x *HanCharLearningContent) GetHanCharId() string {
	if x != nil {
		return x.HanCharId
	}
	return ""
}

func (x *HanCharLearningContent) GetHanChar() string {
	if x != nil {
		return x.HanChar
	}
	return ""
}

func (x *HanCharLearningContent) GetPinyin() string {
	if x != nil {
		return x.Pinyin
	}
	return ""
}

func (x *HanCharLearningContent) GetMeaning() string {
	if x != nil {
		return x.Meaning
	}
	return ""
}

func (x *HanCharLearningContent) GetExamples() []string {
	if x != nil {
		return x.Examples
	}
	return nil
}

// 提交生字学习结果请求
type SubmitNewHanCharLearningResultRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 学习时间
	LearningTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=learning_time,json=learningTime,proto3" json:"learning_time,omitempty"`
	// 学习时长（秒）
	StudyDuration uint32 `protobuf:"varint,2,opt,name=study_duration,json=studyDuration,proto3" json:"study_duration,omitempty"`
	// 学习结果列表
	Results       []*HanCharLearningResultItem `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitNewHanCharLearningResultRequest) Reset() {
	*x = SubmitNewHanCharLearningResultRequest{}
	mi := &file_proto_v1_learning_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitNewHanCharLearningResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitNewHanCharLearningResultRequest) ProtoMessage() {}

func (x *SubmitNewHanCharLearningResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitNewHanCharLearningResultRequest.ProtoReflect.Descriptor instead.
func (*SubmitNewHanCharLearningResultRequest) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{33}
}

func (x *SubmitNewHanCharLearningResultRequest) GetLearningTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LearningTime
	}
	return nil
}

func (x *SubmitNewHanCharLearningResultRequest) GetStudyDuration() uint32 {
	if x != nil {
		return x.StudyDuration
	}
	return 0
}

func (x *SubmitNewHanCharLearningResultRequest) GetResults() []*HanCharLearningResultItem {
	if x != nil {
		return x.Results
	}
	return nil
}

// 单个汉字学习结果项
type HanCharLearningResultItem struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 生字ID
	NewHanCharId string `protobuf:"bytes,1,opt,name=new_han_char_id,json=newHanCharId,proto3" json:"new_han_char_id,omitempty"`
	// 学习结果
	Result        *HanCharLearningResult `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HanCharLearningResultItem) Reset() {
	*x = HanCharLearningResultItem{}
	mi := &file_proto_v1_learning_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HanCharLearningResultItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HanCharLearningResultItem) ProtoMessage() {}

func (x *HanCharLearningResultItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HanCharLearningResultItem.ProtoReflect.Descriptor instead.
func (*HanCharLearningResultItem) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{34}
}

func (x *HanCharLearningResultItem) GetNewHanCharId() string {
	if x != nil {
		return x.NewHanCharId
	}
	return ""
}

func (x *HanCharLearningResultItem) GetResult() *HanCharLearningResult {
	if x != nil {
		return x.Result
	}
	return nil
}

// 提交生字学习结果响应
type SubmitNewHanCharLearningResultResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitNewHanCharLearningResultResponse) Reset() {
	*x = SubmitNewHanCharLearningResultResponse{}
	mi := &file_proto_v1_learning_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitNewHanCharLearningResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitNewHanCharLearningResultResponse) ProtoMessage() {}

func (x *SubmitNewHanCharLearningResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitNewHanCharLearningResultResponse.ProtoReflect.Descriptor instead.
func (*SubmitNewHanCharLearningResultResponse) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{35}
}

// 汉字学习结果
type HanCharLearningResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 第一次是否做对
	FirstTryCorrect bool `protobuf:"varint,1,opt,name=first_try_correct,json=firstTryCorrect,proto3" json:"first_try_correct,omitempty"`
	// 第二次是否做对
	SecondTryCorrect bool `protobuf:"varint,2,opt,name=second_try_correct,json=secondTryCorrect,proto3" json:"second_try_correct,omitempty"`
	// 第三次是否做对
	ThirdTryCorrect bool `protobuf:"varint,3,opt,name=third_try_correct,json=thirdTryCorrect,proto3" json:"third_try_correct,omitempty"`
	// 最终是否掌握
	Mastered bool `protobuf:"varint,4,opt,name=mastered,proto3" json:"mastered,omitempty"`
	// 学习过程中的错误次数
	ErrorCount uint32 `protobuf:"varint,5,opt,name=error_count,json=errorCount,proto3" json:"error_count,omitempty"`
	// 学习过程中的正确次数
	CorrectCount  uint32 `protobuf:"varint,6,opt,name=correct_count,json=correctCount,proto3" json:"correct_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HanCharLearningResult) Reset() {
	*x = HanCharLearningResult{}
	mi := &file_proto_v1_learning_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HanCharLearningResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HanCharLearningResult) ProtoMessage() {}

func (x *HanCharLearningResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HanCharLearningResult.ProtoReflect.Descriptor instead.
func (*HanCharLearningResult) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{36}
}

func (x *HanCharLearningResult) GetFirstTryCorrect() bool {
	if x != nil {
		return x.FirstTryCorrect
	}
	return false
}

func (x *HanCharLearningResult) GetSecondTryCorrect() bool {
	if x != nil {
		return x.SecondTryCorrect
	}
	return false
}

func (x *HanCharLearningResult) GetThirdTryCorrect() bool {
	if x != nil {
		return x.ThirdTryCorrect
	}
	return false
}

func (x *HanCharLearningResult) GetMastered() bool {
	if x != nil {
		return x.Mastered
	}
	return false
}

func (x *HanCharLearningResult) GetErrorCount() uint32 {
	if x != nil {
		return x.ErrorCount
	}
	return 0
}

func (x *HanCharLearningResult) GetCorrectCount() uint32 {
	if x != nil {
		return x.CorrectCount
	}
	return 0
}

var File_proto_v1_learning_proto protoreflect.FileDescriptor

var file_proto_v1_learning_proto_rawDesc = string([]byte{
	0x0a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65,
	0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x6f, 0x63, 0x61, 0x62,
	0x75, 0x6c, 0x61, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x88, 0x05, 0x0a, 0x0a,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3b, 0x0a, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x79,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x79, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0e, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6c, 0x61,
	0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x41, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74,
	0x75, 0x64, 0x79, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x73, 0x74, 0x75, 0x64, 0x79, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x76, 0x65, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x72, 0x6f, 0x6e, 0x67, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76,
	0x65, 0x57, 0x72, 0x6f, 0x6e, 0x67, 0x22, 0x54, 0x0a, 0x0e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x68, 0x6f, 0x75,
	0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x22, 0x78, 0x0a, 0x10,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x46, 0x0a, 0x27, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x22, 0x62,
	0x0a, 0x28, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x49, 0x0a, 0x28, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x91, 0x01,
	0x0a, 0x29, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64,
	0x73, 0x22, 0x40, 0x0a, 0x25, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x6e, 0x69,
	0x74, 0x49, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x28, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x2b, 0x0a, 0x29, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x3e, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x0e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x6e, 0x69,
	0x74, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xbb, 0x01, 0x0a,
	0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64,
	0x12, 0x3b, 0x0a, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f,
	0x74, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x74, 0x75,
	0x64, 0x79, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1c, 0x0a, 0x1a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x67,
	0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f,
	0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x30, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xa0, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x03, 0x74, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x61, 0x67, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0xee, 0x03, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c,
	0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6e, 0x65,
	0x65, 0x64, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a,
	0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74,
	0x75, 0x64, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x0b, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x5d, 0x0a, 0x0f, 0x72, 0x65,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x52, 0x65, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x81, 0x01, 0x0a, 0x11,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x57, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x77, 0x6f, 0x72, 0x64, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x14, 0x0a, 0x12, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x57, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x48, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0b, 0x68, 0x61, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x48, 0x61, 0x6e,
	0x43, 0x68, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xaa, 0x02, 0x0a,
	0x0c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a,
	0x0e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x6e, 0x69,
	0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xad, 0x01, 0x0a, 0x1a, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x48, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0b, 0x68, 0x61, 0x6e, 0x5f,
	0x63, 0x68, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x09, 0x68, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x0d, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x69, 0x73, 0x52, 0x65, 0x63,
	0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x0b, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x63, 0x0a, 0x1b, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x48, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e,
	0x6e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x62,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x48, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x10, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0f, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x22, 0x48, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x48, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x72,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x09,
	0x68, 0x61, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x6e, 0x43, 0x68,
	0x61, 0x72, 0x52, 0x08, 0x68, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x73, 0x22, 0x5c, 0x0a, 0x1e,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x48, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a,
	0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x6e, 0x43, 0x68,
	0x61, 0x72, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x58, 0x0a, 0x11, 0x48, 0x61,
	0x6e, 0x43, 0x68, 0x61, 0x72, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x1e, 0x0a, 0x0b, 0x68, 0x61, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x49, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e,
	0x69, 0x7a, 0x65, 0x64, 0x22, 0x21, 0x0a, 0x1f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x48, 0x61,
	0x6e, 0x43, 0x68, 0x61, 0x72, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4e, 0x65,
	0x77, 0x48, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x5d, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x48, 0x61, 0x6e, 0x43,
	0x68, 0x61, 0x72, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0xa1, 0x01, 0x0a, 0x16, 0x48, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x4c, 0x65, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0b,
	0x68, 0x61, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x68, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x68, 0x61, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x68, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x69, 0x6e, 0x79, 0x69,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x69, 0x6e, 0x79, 0x69, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x61, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x22, 0xdd, 0x01, 0x0a, 0x25, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x4e, 0x65, 0x77, 0x48, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x44, 0x0a, 0x0d, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0d, 0x73, 0x74, 0x75, 0x64, 0x79, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x42, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61,
	0x6e, 0x43, 0x68, 0x61, 0x72, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x19, 0x48, 0x61, 0x6e, 0x43, 0x68, 0x61,
	0x72, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x2a, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x68, 0x61, 0x6e, 0x5f, 0x63,
	0x68, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x48, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x49, 0x64, 0x12,
	0x3c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x6e, 0x43, 0x68,
	0x61, 0x72, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x28, 0x0a,
	0x26, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4e, 0x65, 0x77, 0x48, 0x61, 0x6e, 0x43, 0x68, 0x61,
	0x72, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xff, 0x01, 0x0a, 0x15, 0x48, 0x61, 0x6e, 0x43,
	0x68, 0x61, 0x72, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x79, 0x5f, 0x63,
	0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x54, 0x72, 0x79, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x12, 0x2c, 0x0a,
	0x12, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x54, 0x72, 0x79, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74,
	0x68, 0x69, 0x72, 0x64, 0x5f, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x54, 0x72, 0x79,
	0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x72,
	0x72, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x2a, 0x6c, 0x0a, 0x0e, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x4d,
	0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a,
	0x19, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x48, 0x41, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15,
	0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x02, 0x2a, 0xb8, 0x01, 0x0a, 0x0c, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x41, 0x53, 0x54,
	0x45, 0x52, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x41, 0x53, 0x54, 0x45,
	0x52, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x4c, 0x45, 0x41, 0x52, 0x4e,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x59, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x4e, 0x45, 0x52, 0x10, 0x02,
	0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x5f, 0x46, 0x41, 0x4d, 0x49, 0x4c, 0x49, 0x41, 0x52, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16,
	0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4d, 0x41,
	0x53, 0x54, 0x45, 0x52, 0x45, 0x44, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x41, 0x53, 0x54,
	0x45, 0x52, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x50, 0x45, 0x52, 0x54,
	0x10, 0x05, 0x2a, 0x79, 0x0a, 0x0c, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x52, 0x45, 0x53, 0x55,
	0x4c, 0x54, 0x5f, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13,
	0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x57, 0x52,
	0x4f, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x5f,
	0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x10, 0x03, 0x32, 0xea, 0x10,
	0x0a, 0x0f, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0xb1, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73,
	0x2f, 0x7b, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0xb6, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x12, 0x2f, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2f,
	0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0xb3,
	0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x3a, 0x01, 0x2a, 0x1a, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x75, 0x6e, 0x69, 0x74,
	0x73, 0x2f, 0x7b, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x91, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x33, 0x12, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c,
	0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x2f, 0x7b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x36, 0x3a, 0x01, 0x2a, 0x1a, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c,
	0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x2f, 0x7b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64,
	0x7d, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x92, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x12, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x7c, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x71, 0x0a, 0x0a, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x57, 0x6f, 0x72, 0x64, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x57, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x57, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x22,
	0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x2f, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x7e,
	0x0a, 0x0d, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x48, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x12,
	0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x48, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x48, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01, 0x2a, 0x22, 0x21, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x68, 0x61,
	0x6e, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x73, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x93,
	0x01, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x48, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x72,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x48, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x52,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x48, 0x61,
	0x6e, 0x43, 0x68, 0x61, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24,
	0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x68, 0x61, 0x6e,
	0x5f, 0x63, 0x68, 0x61, 0x72, 0x73, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x2f, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x12, 0x78, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x48, 0x61, 0x6e, 0x43, 0x68,
	0x61, 0x72, 0x54, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1d, 0x12, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2f,
	0x68, 0x61, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x12, 0x9d,
	0x01, 0x0a, 0x17, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x48, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x72,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x48, 0x61, 0x6e, 0x43,
	0x68, 0x61, 0x72, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x48, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x76, 0x31, 0x2f,
	0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x68, 0x61, 0x6e, 0x5f, 0x63, 0x68, 0x61,
	0x72, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x12, 0x8c,
	0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x48, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x72,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x48, 0x61, 0x6e, 0x43, 0x68, 0x61,
	0x72, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e,
	0x65, 0x77, 0x48, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1c, 0x12, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2f,
	0x68, 0x61, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x77, 0x12, 0xba, 0x01,
	0x0a, 0x1e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4e, 0x65, 0x77, 0x48, 0x61, 0x6e, 0x43, 0x68,
	0x61, 0x72, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x4e, 0x65, 0x77, 0x48, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x4c, 0x65, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x4e, 0x65, 0x77, 0x48, 0x61, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x4c, 0x65, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a,
	0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x68, 0x61, 0x6e,
	0x5f, 0x63, 0x68, 0x61, 0x72, 0x73, 0x2f, 0x6e, 0x65, 0x77, 0x2f, 0x6c, 0x65, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x2f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x42, 0x31, 0x5a, 0x28, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x61, 0x7a, 0x79, 0x6a, 0x65, 0x61,
	0x6e, 0x2f, 0x73, 0x6c, 0x61, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x76, 0x31, 0x3b, 0x70, 0x62, 0xba, 0x02, 0x04, 0x53, 0x4c, 0x41, 0x32, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_proto_v1_learning_proto_rawDescOnce sync.Once
	file_proto_v1_learning_proto_rawDescData []byte
)

func file_proto_v1_learning_proto_rawDescGZIP() []byte {
	file_proto_v1_learning_proto_rawDescOnce.Do(func() {
		file_proto_v1_learning_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_v1_learning_proto_rawDesc), len(file_proto_v1_learning_proto_rawDesc)))
	})
	return file_proto_v1_learning_proto_rawDescData
}

var file_proto_v1_learning_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_proto_v1_learning_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_proto_v1_learning_proto_goTypes = []any{
	(MemoryUnitType)(0),                               // 0: proto.v1.MemoryUnitType
	(MasteryLevel)(0),                                 // 1: proto.v1.MasteryLevel
	(ReviewResult)(0),                                 // 2: proto.v1.ReviewResult
	(*MemoryUnit)(nil),                                // 3: proto.v1.MemoryUnit
	(*ReviewInterval)(nil),                            // 4: proto.v1.ReviewInterval
	(*LearningProgress)(nil),                          // 5: proto.v1.LearningProgress
	(*LearningServiceGetCourseProgressRequest)(nil),   // 6: proto.v1.LearningServiceGetCourseProgressRequest
	(*LearningServiceGetCourseProgressResponse)(nil),  // 7: proto.v1.LearningServiceGetCourseProgressResponse
	(*LearningServiceGetSectionProgressRequest)(nil),  // 8: proto.v1.LearningServiceGetSectionProgressRequest
	(*LearningServiceGetSectionProgressResponse)(nil), // 9: proto.v1.LearningServiceGetSectionProgressResponse
	(*LearningServiceGetUnitProgressRequest)(nil),     // 10: proto.v1.LearningServiceGetUnitProgressRequest
	(*LearningServiceUpdateUnitProgressRequest)(nil),  // 11: proto.v1.LearningServiceUpdateUnitProgressRequest
	(*LearningServiceUpdateUnitProgressResponse)(nil), // 12: proto.v1.LearningServiceUpdateUnitProgressResponse
	(*GetMemoryStatusRequest)(nil),                    // 13: proto.v1.GetMemoryStatusRequest
	(*GetMemoryStatusResponse)(nil),                   // 14: proto.v1.GetMemoryStatusResponse
	(*UpdateMemoryStatusRequest)(nil),                 // 15: proto.v1.UpdateMemoryStatusRequest
	(*UpdateMemoryStatusResponse)(nil),                // 16: proto.v1.UpdateMemoryStatusResponse
	(*ListMemoriesForReviewRequest)(nil),              // 17: proto.v1.ListMemoriesForReviewRequest
	(*ListMemoriesForReviewResponse)(nil),             // 18: proto.v1.ListMemoriesForReviewResponse
	(*GetMemoryStatsRequest)(nil),                     // 19: proto.v1.GetMemoryStatsRequest
	(*GetMemoryStatsResponse)(nil),                    // 20: proto.v1.GetMemoryStatsResponse
	(*ReviewWordRequest)(nil),                         // 21: proto.v1.ReviewWordRequest
	(*ReviewWordResponse)(nil),                        // 22: proto.v1.ReviewWordResponse
	(*ReviewHanCharRequest)(nil),                      // 23: proto.v1.ReviewHanCharRequest
	(*ReviewHanCharResponse)(nil),                     // 24: proto.v1.ReviewHanCharResponse
	(*MemoryReview)(nil),                              // 25: proto.v1.MemoryReview
	(*SubmitHanCharReviewRequest)(nil),                // 26: proto.v1.SubmitHanCharReviewRequest
	(*SubmitHanCharReviewResponse)(nil),               // 27: proto.v1.SubmitHanCharReviewResponse
	(*GetHanCharTestRequest)(nil),                     // 28: proto.v1.GetHanCharTestRequest
	(*GetHanCharTestResponse)(nil),                    // 29: proto.v1.GetHanCharTestResponse
	(*SubmitHanCharTestResultRequest)(nil),            // 30: proto.v1.SubmitHanCharTestResultRequest
	(*HanCharTestResult)(nil),                         // 31: proto.v1.HanCharTestResult
	(*SubmitHanCharTestResultResponse)(nil),           // 32: proto.v1.SubmitHanCharTestResultResponse
	(*GetNewHanCharLearningRequest)(nil),              // 33: proto.v1.GetNewHanCharLearningRequest
	(*GetNewHanCharLearningResponse)(nil),             // 34: proto.v1.GetNewHanCharLearningResponse
	(*HanCharLearningContent)(nil),                    // 35: proto.v1.HanCharLearningContent
	(*SubmitNewHanCharLearningResultRequest)(nil),     // 36: proto.v1.SubmitNewHanCharLearningResultRequest
	(*HanCharLearningResultItem)(nil),                 // 37: proto.v1.HanCharLearningResultItem
	(*SubmitNewHanCharLearningResultResponse)(nil),    // 38: proto.v1.SubmitNewHanCharLearningResultResponse
	(*HanCharLearningResult)(nil),                     // 39: proto.v1.HanCharLearningResult
	nil,                                               // 40: proto.v1.GetMemoryStatsResponse.LevelStatsEntry
	nil,                                               // 41: proto.v1.GetMemoryStatsResponse.RetentionRatesEntry
	(*timestamppb.Timestamp)(nil),                     // 42: google.protobuf.Timestamp
	(*HanChar)(nil),                                   // 43: proto.v1.HanChar
}
var file_proto_v1_learning_proto_depIdxs = []int32{
	0,  // 0: proto.v1.MemoryUnit.type:type_name -> proto.v1.MemoryUnitType
	42, // 1: proto.v1.MemoryUnit.created_at:type_name -> google.protobuf.Timestamp
	42, // 2: proto.v1.MemoryUnit.updated_at:type_name -> google.protobuf.Timestamp
	1,  // 3: proto.v1.MemoryUnit.mastery_level:type_name -> proto.v1.MasteryLevel
	42, // 4: proto.v1.MemoryUnit.next_review_at:type_name -> google.protobuf.Timestamp
	42, // 5: proto.v1.MemoryUnit.last_review_at:type_name -> google.protobuf.Timestamp
	5,  // 6: proto.v1.LearningServiceGetCourseProgressResponse.progress:type_name -> proto.v1.LearningProgress
	5,  // 7: proto.v1.LearningServiceGetSectionProgressResponse.progress:type_name -> proto.v1.LearningProgress
	3,  // 8: proto.v1.GetMemoryStatusResponse.status:type_name -> proto.v1.MemoryUnit
	1,  // 9: proto.v1.UpdateMemoryStatusRequest.mastery_level:type_name -> proto.v1.MasteryLevel
	0,  // 10: proto.v1.ListMemoriesForReviewRequest.types:type_name -> proto.v1.MemoryUnitType
	3,  // 11: proto.v1.ListMemoriesForReviewResponse.statuses:type_name -> proto.v1.MemoryUnit
	0,  // 12: proto.v1.GetMemoryStatsRequest.type:type_name -> proto.v1.MemoryUnitType
	40, // 13: proto.v1.GetMemoryStatsResponse.level_stats:type_name -> proto.v1.GetMemoryStatsResponse.LevelStatsEntry
	41, // 14: proto.v1.GetMemoryStatsResponse.retention_rates:type_name -> proto.v1.GetMemoryStatsResponse.RetentionRatesEntry
	2,  // 15: proto.v1.ReviewWordRequest.result:type_name -> proto.v1.ReviewResult
	2,  // 16: proto.v1.ReviewHanCharRequest.result:type_name -> proto.v1.ReviewResult
	2,  // 17: proto.v1.MemoryReview.result:type_name -> proto.v1.ReviewResult
	42, // 18: proto.v1.MemoryReview.review_time:type_name -> google.protobuf.Timestamp
	42, // 19: proto.v1.MemoryReview.created_at:type_name -> google.protobuf.Timestamp
	42, // 20: proto.v1.SubmitHanCharReviewRequest.review_time:type_name -> google.protobuf.Timestamp
	42, // 21: proto.v1.SubmitHanCharReviewResponse.next_review_time:type_name -> google.protobuf.Timestamp
	43, // 22: proto.v1.GetHanCharTestResponse.han_chars:type_name -> proto.v1.HanChar
	31, // 23: proto.v1.SubmitHanCharTestResultRequest.results:type_name -> proto.v1.HanCharTestResult
	35, // 24: proto.v1.GetNewHanCharLearningResponse.contents:type_name -> proto.v1.HanCharLearningContent
	42, // 25: proto.v1.SubmitNewHanCharLearningResultRequest.learning_time:type_name -> google.protobuf.Timestamp
	37, // 26: proto.v1.SubmitNewHanCharLearningResultRequest.results:type_name -> proto.v1.HanCharLearningResultItem
	39, // 27: proto.v1.HanCharLearningResultItem.result:type_name -> proto.v1.HanCharLearningResult
	6,  // 28: proto.v1.LearningService.GetCourseProgress:input_type -> proto.v1.LearningServiceGetCourseProgressRequest
	8,  // 29: proto.v1.LearningService.GetSectionProgress:input_type -> proto.v1.LearningServiceGetSectionProgressRequest
	11, // 30: proto.v1.LearningService.UpdateUnitProgress:input_type -> proto.v1.LearningServiceUpdateUnitProgressRequest
	13, // 31: proto.v1.LearningService.GetMemoryStatus:input_type -> proto.v1.GetMemoryStatusRequest
	15, // 32: proto.v1.LearningService.UpdateMemoryStatus:input_type -> proto.v1.UpdateMemoryStatusRequest
	17, // 33: proto.v1.LearningService.ListMemoriesForReview:input_type -> proto.v1.ListMemoriesForReviewRequest
	19, // 34: proto.v1.LearningService.GetMemoryStats:input_type -> proto.v1.GetMemoryStatsRequest
	21, // 35: proto.v1.LearningService.ReviewWord:input_type -> proto.v1.ReviewWordRequest
	23, // 36: proto.v1.LearningService.ReviewHanChar:input_type -> proto.v1.ReviewHanCharRequest
	26, // 37: proto.v1.LearningService.SubmitHanCharReview:input_type -> proto.v1.SubmitHanCharReviewRequest
	28, // 38: proto.v1.LearningService.GetHanCharTest:input_type -> proto.v1.GetHanCharTestRequest
	30, // 39: proto.v1.LearningService.SubmitHanCharTestResult:input_type -> proto.v1.SubmitHanCharTestResultRequest
	33, // 40: proto.v1.LearningService.GetNewHanCharLearning:input_type -> proto.v1.GetNewHanCharLearningRequest
	36, // 41: proto.v1.LearningService.SubmitNewHanCharLearningResult:input_type -> proto.v1.SubmitNewHanCharLearningResultRequest
	7,  // 42: proto.v1.LearningService.GetCourseProgress:output_type -> proto.v1.LearningServiceGetCourseProgressResponse
	9,  // 43: proto.v1.LearningService.GetSectionProgress:output_type -> proto.v1.LearningServiceGetSectionProgressResponse
	12, // 44: proto.v1.LearningService.UpdateUnitProgress:output_type -> proto.v1.LearningServiceUpdateUnitProgressResponse
	14, // 45: proto.v1.LearningService.GetMemoryStatus:output_type -> proto.v1.GetMemoryStatusResponse
	16, // 46: proto.v1.LearningService.UpdateMemoryStatus:output_type -> proto.v1.UpdateMemoryStatusResponse
	18, // 47: proto.v1.LearningService.ListMemoriesForReview:output_type -> proto.v1.ListMemoriesForReviewResponse
	20, // 48: proto.v1.LearningService.GetMemoryStats:output_type -> proto.v1.GetMemoryStatsResponse
	22, // 49: proto.v1.LearningService.ReviewWord:output_type -> proto.v1.ReviewWordResponse
	24, // 50: proto.v1.LearningService.ReviewHanChar:output_type -> proto.v1.ReviewHanCharResponse
	27, // 51: proto.v1.LearningService.SubmitHanCharReview:output_type -> proto.v1.SubmitHanCharReviewResponse
	29, // 52: proto.v1.LearningService.GetHanCharTest:output_type -> proto.v1.GetHanCharTestResponse
	32, // 53: proto.v1.LearningService.SubmitHanCharTestResult:output_type -> proto.v1.SubmitHanCharTestResultResponse
	34, // 54: proto.v1.LearningService.GetNewHanCharLearning:output_type -> proto.v1.GetNewHanCharLearningResponse
	38, // 55: proto.v1.LearningService.SubmitNewHanCharLearningResult:output_type -> proto.v1.SubmitNewHanCharLearningResultResponse
	42, // [42:56] is the sub-list for method output_type
	28, // [28:42] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_proto_v1_learning_proto_init() }
func file_proto_v1_learning_proto_init() {
	if File_proto_v1_learning_proto != nil {
		return
	}
	file_proto_v1_vocabulary_proto_init()
	file_proto_v1_learning_proto_msgTypes[16].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_v1_learning_proto_rawDesc), len(file_proto_v1_learning_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_v1_learning_proto_goTypes,
		DependencyIndexes: file_proto_v1_learning_proto_depIdxs,
		EnumInfos:         file_proto_v1_learning_proto_enumTypes,
		MessageInfos:      file_proto_v1_learning_proto_msgTypes,
	}.Build()
	File_proto_v1_learning_proto = out.File
	file_proto_v1_learning_proto_goTypes = nil
	file_proto_v1_learning_proto_depIdxs = nil
}
