// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: proto/v1/learning.proto

package pb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MemoryUnitType 记忆单元类型
type MemoryUnitType int32

const (
	MemoryUnitType_MEMORY_UNIT_TYPE_UNSPECIFIED MemoryUnitType = 0
	MemoryUnitType_MEMORY_UNIT_TYPE_HAN_CHAR    MemoryUnitType = 1 // 汉字
	MemoryUnitType_MEMORY_UNIT_TYPE_WORD        MemoryUnitType = 2 // 单词
	MemoryUnitType_MEMORY_UNIT_TYPE_SENTENCE    MemoryUnitType = 3 // 句子
	MemoryUnitType_MEMORY_UNIT_TYPE_PHRASE      MemoryUnitType = 4 // 短语
	MemoryUnitType_MEMORY_UNIT_TYPE_GRAMMAR     MemoryUnitType = 5 // 语法点
)

// Enum value maps for MemoryUnitType.
var (
	MemoryUnitType_name = map[int32]string{
		0: "MEMORY_UNIT_TYPE_UNSPECIFIED",
		1: "MEMORY_UNIT_TYPE_HAN_CHAR",
		2: "MEMORY_UNIT_TYPE_WORD",
		3: "MEMORY_UNIT_TYPE_SENTENCE",
		4: "MEMORY_UNIT_TYPE_PHRASE",
		5: "MEMORY_UNIT_TYPE_GRAMMAR",
	}
	MemoryUnitType_value = map[string]int32{
		"MEMORY_UNIT_TYPE_UNSPECIFIED": 0,
		"MEMORY_UNIT_TYPE_HAN_CHAR":    1,
		"MEMORY_UNIT_TYPE_WORD":        2,
		"MEMORY_UNIT_TYPE_SENTENCE":    3,
		"MEMORY_UNIT_TYPE_PHRASE":      4,
		"MEMORY_UNIT_TYPE_GRAMMAR":     5,
	}
)

func (x MemoryUnitType) Enum() *MemoryUnitType {
	p := new(MemoryUnitType)
	*p = x
	return p
}

func (x MemoryUnitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MemoryUnitType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_v1_learning_proto_enumTypes[0].Descriptor()
}

func (MemoryUnitType) Type() protoreflect.EnumType {
	return &file_proto_v1_learning_proto_enumTypes[0]
}

func (x MemoryUnitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MemoryUnitType.Descriptor instead.
func (MemoryUnitType) EnumDescriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{0}
}

// MasteryLevel 掌握程度
type MasteryLevel int32

const (
	MasteryLevel_MASTERY_LEVEL_UNSPECIFIED MasteryLevel = 0 // 未学习
	MasteryLevel_MASTERY_LEVEL_NEW         MasteryLevel = 1 // 新学
	MasteryLevel_MASTERY_LEVEL_FAMILIAR    MasteryLevel = 2 // 熟悉
	MasteryLevel_MASTERY_LEVEL_MASTERED    MasteryLevel = 3 // 掌握
	MasteryLevel_MASTERY_LEVEL_EXPERT      MasteryLevel = 4 // 精通
)

// Enum value maps for MasteryLevel.
var (
	MasteryLevel_name = map[int32]string{
		0: "MASTERY_LEVEL_UNSPECIFIED",
		1: "MASTERY_LEVEL_NEW",
		2: "MASTERY_LEVEL_FAMILIAR",
		3: "MASTERY_LEVEL_MASTERED",
		4: "MASTERY_LEVEL_EXPERT",
	}
	MasteryLevel_value = map[string]int32{
		"MASTERY_LEVEL_UNSPECIFIED": 0,
		"MASTERY_LEVEL_NEW":         1,
		"MASTERY_LEVEL_FAMILIAR":    2,
		"MASTERY_LEVEL_MASTERED":    3,
		"MASTERY_LEVEL_EXPERT":      4,
	}
)

func (x MasteryLevel) Enum() *MasteryLevel {
	p := new(MasteryLevel)
	*p = x
	return p
}

func (x MasteryLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MasteryLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_v1_learning_proto_enumTypes[1].Descriptor()
}

func (MasteryLevel) Type() protoreflect.EnumType {
	return &file_proto_v1_learning_proto_enumTypes[1]
}

func (x MasteryLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MasteryLevel.Descriptor instead.
func (MasteryLevel) EnumDescriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{1}
}

// MemoryUnit 记忆单元
type MemoryUnit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                  // 记忆单元ID
	Type          MemoryUnitType         `protobuf:"varint,2,opt,name=type,proto3,enum=proto.v1.MemoryUnitType" json:"type,omitempty"` // 记忆单元类型
	ContentId     uint32                 `protobuf:"varint,3,opt,name=content_id,json=contentId,proto3" json:"content_id,omitempty"`   // 内容ID（对应汉字ID、单词ID等）
	Content       string                 `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`                         // 内容文本
	Tags          []string               `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty"`                               // 标签
	Categories    []string               `protobuf:"bytes,6,rep,name=categories,proto3" json:"categories,omitempty"`                   // 分类
	Difficulty    uint32                 `protobuf:"varint,7,opt,name=difficulty,proto3" json:"difficulty,omitempty"`                  // 难度等级
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MemoryUnit) Reset() {
	*x = MemoryUnit{}
	mi := &file_proto_v1_learning_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemoryUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryUnit) ProtoMessage() {}

func (x *MemoryUnit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryUnit.ProtoReflect.Descriptor instead.
func (*MemoryUnit) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{0}
}

func (x *MemoryUnit) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MemoryUnit) GetType() MemoryUnitType {
	if x != nil {
		return x.Type
	}
	return MemoryUnitType_MEMORY_UNIT_TYPE_UNSPECIFIED
}

func (x *MemoryUnit) GetContentId() uint32 {
	if x != nil {
		return x.ContentId
	}
	return 0
}

func (x *MemoryUnit) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *MemoryUnit) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *MemoryUnit) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *MemoryUnit) GetDifficulty() uint32 {
	if x != nil {
		return x.Difficulty
	}
	return 0
}

// MemoryStatus 记忆状态
type MemoryStatus struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	MemoryUnitId       uint32                 `protobuf:"varint,1,opt,name=memory_unit_id,json=memoryUnitId,proto3" json:"memory_unit_id,omitempty"`                          // 记忆单元ID
	UserId             uint32                 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                              // 用户ID
	MasteryLevel       MasteryLevel           `protobuf:"varint,3,opt,name=mastery_level,json=masteryLevel,proto3,enum=proto.v1.MasteryLevel" json:"mastery_level,omitempty"` // 掌握程度
	ReviewCount        uint32                 `protobuf:"varint,4,opt,name=review_count,json=reviewCount,proto3" json:"review_count,omitempty"`                               // 复习次数
	NextReviewAt       *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=next_review_at,json=nextReviewAt,proto3" json:"next_review_at,omitempty"`                           // 下次复习时间
	LastReviewAt       *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=last_review_at,json=lastReviewAt,proto3" json:"last_review_at,omitempty"`                           // 上次复习时间
	StudyDuration      uint32                 `protobuf:"varint,7,opt,name=study_duration,json=studyDuration,proto3" json:"study_duration,omitempty"`                         // 学习时长（秒）
	Notes              []string               `protobuf:"bytes,8,rep,name=notes,proto3" json:"notes,omitempty"`                                                               // 学习笔记
	RetentionRate      float32                `protobuf:"fixed32,9,opt,name=retention_rate,json=retentionRate,proto3" json:"retention_rate,omitempty"`                        // 记忆保持率（0-1）
	ConsecutiveCorrect uint32                 `protobuf:"varint,10,opt,name=consecutive_correct,json=consecutiveCorrect,proto3" json:"consecutive_correct,omitempty"`         // 连续正确次数
	ConsecutiveWrong   uint32                 `protobuf:"varint,11,opt,name=consecutive_wrong,json=consecutiveWrong,proto3" json:"consecutive_wrong,omitempty"`               // 连续错误次数
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *MemoryStatus) Reset() {
	*x = MemoryStatus{}
	mi := &file_proto_v1_learning_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemoryStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryStatus) ProtoMessage() {}

func (x *MemoryStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryStatus.ProtoReflect.Descriptor instead.
func (*MemoryStatus) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{1}
}

func (x *MemoryStatus) GetMemoryUnitId() uint32 {
	if x != nil {
		return x.MemoryUnitId
	}
	return 0
}

func (x *MemoryStatus) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MemoryStatus) GetMasteryLevel() MasteryLevel {
	if x != nil {
		return x.MasteryLevel
	}
	return MasteryLevel_MASTERY_LEVEL_UNSPECIFIED
}

func (x *MemoryStatus) GetReviewCount() uint32 {
	if x != nil {
		return x.ReviewCount
	}
	return 0
}

func (x *MemoryStatus) GetNextReviewAt() *timestamppb.Timestamp {
	if x != nil {
		return x.NextReviewAt
	}
	return nil
}

func (x *MemoryStatus) GetLastReviewAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastReviewAt
	}
	return nil
}

func (x *MemoryStatus) GetStudyDuration() uint32 {
	if x != nil {
		return x.StudyDuration
	}
	return 0
}

func (x *MemoryStatus) GetNotes() []string {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *MemoryStatus) GetRetentionRate() float32 {
	if x != nil {
		return x.RetentionRate
	}
	return 0
}

func (x *MemoryStatus) GetConsecutiveCorrect() uint32 {
	if x != nil {
		return x.ConsecutiveCorrect
	}
	return 0
}

func (x *MemoryStatus) GetConsecutiveWrong() uint32 {
	if x != nil {
		return x.ConsecutiveWrong
	}
	return 0
}

// ReviewInterval 复习间隔
type ReviewInterval struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Days          uint32                 `protobuf:"varint,1,opt,name=days,proto3" json:"days,omitempty"`       // 天数
	Hours         uint32                 `protobuf:"varint,2,opt,name=hours,proto3" json:"hours,omitempty"`     // 小时
	Minutes       uint32                 `protobuf:"varint,3,opt,name=minutes,proto3" json:"minutes,omitempty"` // 分钟
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReviewInterval) Reset() {
	*x = ReviewInterval{}
	mi := &file_proto_v1_learning_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReviewInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewInterval) ProtoMessage() {}

func (x *ReviewInterval) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewInterval.ProtoReflect.Descriptor instead.
func (*ReviewInterval) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{2}
}

func (x *ReviewInterval) GetDays() uint32 {
	if x != nil {
		return x.Days
	}
	return 0
}

func (x *ReviewInterval) GetHours() uint32 {
	if x != nil {
		return x.Hours
	}
	return 0
}

func (x *ReviewInterval) GetMinutes() uint32 {
	if x != nil {
		return x.Minutes
	}
	return 0
}

// LearningProgress 学习进度基础信息
type LearningProgress struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Progress       float32                `protobuf:"fixed32,1,opt,name=progress,proto3" json:"progress,omitempty"`                                  // 进度百分比 0-100
	CompletedItems uint32                 `protobuf:"varint,2,opt,name=completed_items,json=completedItems,proto3" json:"completed_items,omitempty"` // 已完成项目数
	TotalItems     uint32                 `protobuf:"varint,3,opt,name=total_items,json=totalItems,proto3" json:"total_items,omitempty"`             // 总项目数
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *LearningProgress) Reset() {
	*x = LearningProgress{}
	mi := &file_proto_v1_learning_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LearningProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LearningProgress) ProtoMessage() {}

func (x *LearningProgress) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LearningProgress.ProtoReflect.Descriptor instead.
func (*LearningProgress) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{3}
}

func (x *LearningProgress) GetProgress() float32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *LearningProgress) GetCompletedItems() uint32 {
	if x != nil {
		return x.CompletedItems
	}
	return 0
}

func (x *LearningProgress) GetTotalItems() uint32 {
	if x != nil {
		return x.TotalItems
	}
	return 0
}

// LearningUnitStatus 学习单元状态
type LearningUnitStatus struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Completed      bool                   `protobuf:"varint,1,opt,name=completed,proto3" json:"completed,omitempty"`                                  // 是否完成
	LastAccessTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=last_access_time,json=lastAccessTime,proto3" json:"last_access_time,omitempty"` // 最后访问时间
	StudyDuration  uint32                 `protobuf:"varint,3,opt,name=study_duration,json=studyDuration,proto3" json:"study_duration,omitempty"`     // 学习时长（秒）
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *LearningUnitStatus) Reset() {
	*x = LearningUnitStatus{}
	mi := &file_proto_v1_learning_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LearningUnitStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LearningUnitStatus) ProtoMessage() {}

func (x *LearningUnitStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LearningUnitStatus.ProtoReflect.Descriptor instead.
func (*LearningUnitStatus) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{4}
}

func (x *LearningUnitStatus) GetCompleted() bool {
	if x != nil {
		return x.Completed
	}
	return false
}

func (x *LearningUnitStatus) GetLastAccessTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastAccessTime
	}
	return nil
}

func (x *LearningUnitStatus) GetStudyDuration() uint32 {
	if x != nil {
		return x.StudyDuration
	}
	return 0
}

// GetLearningCourseProgressRequest 获取课程进度请求
type LearningServiceGetCourseProgressRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CourseId      uint32                 `protobuf:"varint,1,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LearningServiceGetCourseProgressRequest) Reset() {
	*x = LearningServiceGetCourseProgressRequest{}
	mi := &file_proto_v1_learning_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LearningServiceGetCourseProgressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LearningServiceGetCourseProgressRequest) ProtoMessage() {}

func (x *LearningServiceGetCourseProgressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LearningServiceGetCourseProgressRequest.ProtoReflect.Descriptor instead.
func (*LearningServiceGetCourseProgressRequest) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{5}
}

func (x *LearningServiceGetCourseProgressRequest) GetCourseId() uint32 {
	if x != nil {
		return x.CourseId
	}
	return 0
}

// GetLearningCourseProgressResponse 获取课程进度响应
type LearningServiceGetCourseProgressResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Progress      *LearningProgress      `protobuf:"bytes,1,opt,name=progress,proto3" json:"progress,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LearningServiceGetCourseProgressResponse) Reset() {
	*x = LearningServiceGetCourseProgressResponse{}
	mi := &file_proto_v1_learning_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LearningServiceGetCourseProgressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LearningServiceGetCourseProgressResponse) ProtoMessage() {}

func (x *LearningServiceGetCourseProgressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LearningServiceGetCourseProgressResponse.ProtoReflect.Descriptor instead.
func (*LearningServiceGetCourseProgressResponse) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{6}
}

func (x *LearningServiceGetCourseProgressResponse) GetProgress() *LearningProgress {
	if x != nil {
		return x.Progress
	}
	return nil
}

// GetLearningSectionProgressRequest 获取章节进度请求
type LearningServiceGetSectionProgressRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SectionId     uint32                 `protobuf:"varint,1,opt,name=section_id,json=sectionId,proto3" json:"section_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LearningServiceGetSectionProgressRequest) Reset() {
	*x = LearningServiceGetSectionProgressRequest{}
	mi := &file_proto_v1_learning_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LearningServiceGetSectionProgressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LearningServiceGetSectionProgressRequest) ProtoMessage() {}

func (x *LearningServiceGetSectionProgressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LearningServiceGetSectionProgressRequest.ProtoReflect.Descriptor instead.
func (*LearningServiceGetSectionProgressRequest) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{7}
}

func (x *LearningServiceGetSectionProgressRequest) GetSectionId() uint32 {
	if x != nil {
		return x.SectionId
	}
	return 0
}

// GetLearningSectionProgressResponse 获取章节进度响应
type LearningServiceGetSectionProgressResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Progress      *LearningProgress      `protobuf:"bytes,1,opt,name=progress,proto3" json:"progress,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LearningServiceGetSectionProgressResponse) Reset() {
	*x = LearningServiceGetSectionProgressResponse{}
	mi := &file_proto_v1_learning_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LearningServiceGetSectionProgressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LearningServiceGetSectionProgressResponse) ProtoMessage() {}

func (x *LearningServiceGetSectionProgressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LearningServiceGetSectionProgressResponse.ProtoReflect.Descriptor instead.
func (*LearningServiceGetSectionProgressResponse) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{8}
}

func (x *LearningServiceGetSectionProgressResponse) GetProgress() *LearningProgress {
	if x != nil {
		return x.Progress
	}
	return nil
}

// GetLearningUnitProgressRequest 获取单元进度请求
type LearningServiceGetUnitProgressRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UnitId        uint32                 `protobuf:"varint,1,opt,name=unit_id,json=unitId,proto3" json:"unit_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LearningServiceGetUnitProgressRequest) Reset() {
	*x = LearningServiceGetUnitProgressRequest{}
	mi := &file_proto_v1_learning_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LearningServiceGetUnitProgressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LearningServiceGetUnitProgressRequest) ProtoMessage() {}

func (x *LearningServiceGetUnitProgressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LearningServiceGetUnitProgressRequest.ProtoReflect.Descriptor instead.
func (*LearningServiceGetUnitProgressRequest) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{9}
}

func (x *LearningServiceGetUnitProgressRequest) GetUnitId() uint32 {
	if x != nil {
		return x.UnitId
	}
	return 0
}

// GetLearningUnitProgressResponse 获取单元进度响应
type LearningServiceGetUnitProgressResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *LearningUnitStatus    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LearningServiceGetUnitProgressResponse) Reset() {
	*x = LearningServiceGetUnitProgressResponse{}
	mi := &file_proto_v1_learning_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LearningServiceGetUnitProgressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LearningServiceGetUnitProgressResponse) ProtoMessage() {}

func (x *LearningServiceGetUnitProgressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LearningServiceGetUnitProgressResponse.ProtoReflect.Descriptor instead.
func (*LearningServiceGetUnitProgressResponse) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{10}
}

func (x *LearningServiceGetUnitProgressResponse) GetStatus() *LearningUnitStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// UpdateLearningUnitProgressRequest 更新单元进度请求
type LearningServiceUpdateUnitProgressRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UnitId        uint32                 `protobuf:"varint,1,opt,name=unit_id,json=unitId,proto3" json:"unit_id,omitempty"`
	Completed     bool                   `protobuf:"varint,2,opt,name=completed,proto3" json:"completed,omitempty"`                              // 是否完成
	StudyDuration uint32                 `protobuf:"varint,3,opt,name=study_duration,json=studyDuration,proto3" json:"study_duration,omitempty"` // 本次学习时长（秒）
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LearningServiceUpdateUnitProgressRequest) Reset() {
	*x = LearningServiceUpdateUnitProgressRequest{}
	mi := &file_proto_v1_learning_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LearningServiceUpdateUnitProgressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LearningServiceUpdateUnitProgressRequest) ProtoMessage() {}

func (x *LearningServiceUpdateUnitProgressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LearningServiceUpdateUnitProgressRequest.ProtoReflect.Descriptor instead.
func (*LearningServiceUpdateUnitProgressRequest) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{11}
}

func (x *LearningServiceUpdateUnitProgressRequest) GetUnitId() uint32 {
	if x != nil {
		return x.UnitId
	}
	return 0
}

func (x *LearningServiceUpdateUnitProgressRequest) GetCompleted() bool {
	if x != nil {
		return x.Completed
	}
	return false
}

func (x *LearningServiceUpdateUnitProgressRequest) GetStudyDuration() uint32 {
	if x != nil {
		return x.StudyDuration
	}
	return 0
}

// UpdateLearningUnitProgressResponse 更新单元进度响应
type LearningServiceUpdateUnitProgressResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LearningServiceUpdateUnitProgressResponse) Reset() {
	*x = LearningServiceUpdateUnitProgressResponse{}
	mi := &file_proto_v1_learning_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LearningServiceUpdateUnitProgressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LearningServiceUpdateUnitProgressResponse) ProtoMessage() {}

func (x *LearningServiceUpdateUnitProgressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LearningServiceUpdateUnitProgressResponse.ProtoReflect.Descriptor instead.
func (*LearningServiceUpdateUnitProgressResponse) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{12}
}

// 请求和响应消息
type GetMemoryStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MemoryUnitId  uint32                 `protobuf:"varint,1,opt,name=memory_unit_id,json=memoryUnitId,proto3" json:"memory_unit_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMemoryStatusRequest) Reset() {
	*x = GetMemoryStatusRequest{}
	mi := &file_proto_v1_learning_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMemoryStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMemoryStatusRequest) ProtoMessage() {}

func (x *GetMemoryStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMemoryStatusRequest.ProtoReflect.Descriptor instead.
func (*GetMemoryStatusRequest) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{13}
}

func (x *GetMemoryStatusRequest) GetMemoryUnitId() uint32 {
	if x != nil {
		return x.MemoryUnitId
	}
	return 0
}

type GetMemoryStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *MemoryStatus          `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMemoryStatusResponse) Reset() {
	*x = GetMemoryStatusResponse{}
	mi := &file_proto_v1_learning_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMemoryStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMemoryStatusResponse) ProtoMessage() {}

func (x *GetMemoryStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMemoryStatusResponse.ProtoReflect.Descriptor instead.
func (*GetMemoryStatusResponse) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{14}
}

func (x *GetMemoryStatusResponse) GetStatus() *MemoryStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type UpdateMemoryStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MemoryUnitId  uint32                 `protobuf:"varint,1,opt,name=memory_unit_id,json=memoryUnitId,proto3" json:"memory_unit_id,omitempty"`
	MasteryLevel  MasteryLevel           `protobuf:"varint,2,opt,name=mastery_level,json=masteryLevel,proto3,enum=proto.v1.MasteryLevel" json:"mastery_level,omitempty"`
	Notes         []string               `protobuf:"bytes,3,rep,name=notes,proto3" json:"notes,omitempty"`
	StudyDuration uint32                 `protobuf:"varint,4,opt,name=study_duration,json=studyDuration,proto3" json:"study_duration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateMemoryStatusRequest) Reset() {
	*x = UpdateMemoryStatusRequest{}
	mi := &file_proto_v1_learning_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMemoryStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMemoryStatusRequest) ProtoMessage() {}

func (x *UpdateMemoryStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMemoryStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateMemoryStatusRequest) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateMemoryStatusRequest) GetMemoryUnitId() uint32 {
	if x != nil {
		return x.MemoryUnitId
	}
	return 0
}

func (x *UpdateMemoryStatusRequest) GetMasteryLevel() MasteryLevel {
	if x != nil {
		return x.MasteryLevel
	}
	return MasteryLevel_MASTERY_LEVEL_UNSPECIFIED
}

func (x *UpdateMemoryStatusRequest) GetNotes() []string {
	if x != nil {
		return x.Notes
	}
	return nil
}

func (x *UpdateMemoryStatusRequest) GetStudyDuration() uint32 {
	if x != nil {
		return x.StudyDuration
	}
	return 0
}

type UpdateMemoryStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *MemoryStatus          `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateMemoryStatusResponse) Reset() {
	*x = UpdateMemoryStatusResponse{}
	mi := &file_proto_v1_learning_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMemoryStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMemoryStatusResponse) ProtoMessage() {}

func (x *UpdateMemoryStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMemoryStatusResponse.ProtoReflect.Descriptor instead.
func (*UpdateMemoryStatusResponse) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateMemoryStatusResponse) GetStatus() *MemoryStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type ListMemoriesForReviewRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          uint32                 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      uint32                 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Types         []MemoryUnitType       `protobuf:"varint,3,rep,packed,name=types,proto3,enum=proto.v1.MemoryUnitType" json:"types,omitempty"` // 可选的记忆单元类型过滤
	Tags          []string               `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty"`                                        // 可选的标签过滤
	Categories    []string               `protobuf:"bytes,5,rep,name=categories,proto3" json:"categories,omitempty"`                            // 可选的分类过滤
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMemoriesForReviewRequest) Reset() {
	*x = ListMemoriesForReviewRequest{}
	mi := &file_proto_v1_learning_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMemoriesForReviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMemoriesForReviewRequest) ProtoMessage() {}

func (x *ListMemoriesForReviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMemoriesForReviewRequest.ProtoReflect.Descriptor instead.
func (*ListMemoriesForReviewRequest) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{17}
}

func (x *ListMemoriesForReviewRequest) GetPage() uint32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListMemoriesForReviewRequest) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListMemoriesForReviewRequest) GetTypes() []MemoryUnitType {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *ListMemoriesForReviewRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ListMemoriesForReviewRequest) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

type ListMemoriesForReviewResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Statuses      []*MemoryStatus        `protobuf:"bytes,1,rep,name=statuses,proto3" json:"statuses,omitempty"`
	Total         uint32                 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMemoriesForReviewResponse) Reset() {
	*x = ListMemoriesForReviewResponse{}
	mi := &file_proto_v1_learning_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMemoriesForReviewResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMemoriesForReviewResponse) ProtoMessage() {}

func (x *ListMemoriesForReviewResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMemoriesForReviewResponse.ProtoReflect.Descriptor instead.
func (*ListMemoriesForReviewResponse) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{18}
}

func (x *ListMemoriesForReviewResponse) GetStatuses() []*MemoryStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *ListMemoriesForReviewResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetMemoryStatsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          *MemoryUnitType        `protobuf:"varint,1,opt,name=type,proto3,enum=proto.v1.MemoryUnitType,oneof" json:"type,omitempty"` // 可选的记忆单元类型过滤
	Tag           *string                `protobuf:"bytes,2,opt,name=tag,proto3,oneof" json:"tag,omitempty"`                                 // 可选的标签过滤
	Category      *string                `protobuf:"bytes,3,opt,name=category,proto3,oneof" json:"category,omitempty"`                       // 可选的分类过滤
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMemoryStatsRequest) Reset() {
	*x = GetMemoryStatsRequest{}
	mi := &file_proto_v1_learning_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMemoryStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMemoryStatsRequest) ProtoMessage() {}

func (x *GetMemoryStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMemoryStatsRequest.ProtoReflect.Descriptor instead.
func (*GetMemoryStatsRequest) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{19}
}

func (x *GetMemoryStatsRequest) GetType() MemoryUnitType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return MemoryUnitType_MEMORY_UNIT_TYPE_UNSPECIFIED
}

func (x *GetMemoryStatsRequest) GetTag() string {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return ""
}

func (x *GetMemoryStatsRequest) GetCategory() string {
	if x != nil && x.Category != nil {
		return *x.Category
	}
	return ""
}

type GetMemoryStatsResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TotalLearned    uint32                 `protobuf:"varint,1,opt,name=total_learned,json=totalLearned,proto3" json:"total_learned,omitempty"`                                                                                   // 已学习总数
	MasteredCount   uint32                 `protobuf:"varint,2,opt,name=mastered_count,json=masteredCount,proto3" json:"mastered_count,omitempty"`                                                                                // 已掌握数量
	NeedReviewCount uint32                 `protobuf:"varint,3,opt,name=need_review_count,json=needReviewCount,proto3" json:"need_review_count,omitempty"`                                                                        // 需要复习数量
	TotalStudyTime  uint32                 `protobuf:"varint,4,opt,name=total_study_time,json=totalStudyTime,proto3" json:"total_study_time,omitempty"`                                                                           // 总学习时长（秒）
	LevelStats      map[uint32]uint32      `protobuf:"bytes,5,rep,name=level_stats,json=levelStats,proto3" json:"level_stats,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`              // 各掌握程度统计
	RetentionRates  map[uint32]float32     `protobuf:"bytes,6,rep,name=retention_rates,json=retentionRates,proto3" json:"retention_rates,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"` // 各类型记忆保持率
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetMemoryStatsResponse) Reset() {
	*x = GetMemoryStatsResponse{}
	mi := &file_proto_v1_learning_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMemoryStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMemoryStatsResponse) ProtoMessage() {}

func (x *GetMemoryStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMemoryStatsResponse.ProtoReflect.Descriptor instead.
func (*GetMemoryStatsResponse) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{20}
}

func (x *GetMemoryStatsResponse) GetTotalLearned() uint32 {
	if x != nil {
		return x.TotalLearned
	}
	return 0
}

func (x *GetMemoryStatsResponse) GetMasteredCount() uint32 {
	if x != nil {
		return x.MasteredCount
	}
	return 0
}

func (x *GetMemoryStatsResponse) GetNeedReviewCount() uint32 {
	if x != nil {
		return x.NeedReviewCount
	}
	return 0
}

func (x *GetMemoryStatsResponse) GetTotalStudyTime() uint32 {
	if x != nil {
		return x.TotalStudyTime
	}
	return 0
}

func (x *GetMemoryStatsResponse) GetLevelStats() map[uint32]uint32 {
	if x != nil {
		return x.LevelStats
	}
	return nil
}

func (x *GetMemoryStatsResponse) GetRetentionRates() map[uint32]float32 {
	if x != nil {
		return x.RetentionRates
	}
	return nil
}

type RecordLearningResultRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MemoryUnitId  uint32                 `protobuf:"varint,1,opt,name=memory_unit_id,json=memoryUnitId,proto3" json:"memory_unit_id,omitempty"`
	IsCorrect     bool                   `protobuf:"varint,2,opt,name=is_correct,json=isCorrect,proto3" json:"is_correct,omitempty"`          // 是否正确
	ResponseTime  uint32                 `protobuf:"varint,3,opt,name=response_time,json=responseTime,proto3" json:"response_time,omitempty"` // 响应时间（毫秒）
	UserNotes     []string               `protobuf:"bytes,4,rep,name=user_notes,json=userNotes,proto3" json:"user_notes,omitempty"`           // 用户笔记
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecordLearningResultRequest) Reset() {
	*x = RecordLearningResultRequest{}
	mi := &file_proto_v1_learning_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordLearningResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordLearningResultRequest) ProtoMessage() {}

func (x *RecordLearningResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordLearningResultRequest.ProtoReflect.Descriptor instead.
func (*RecordLearningResultRequest) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{21}
}

func (x *RecordLearningResultRequest) GetMemoryUnitId() uint32 {
	if x != nil {
		return x.MemoryUnitId
	}
	return 0
}

func (x *RecordLearningResultRequest) GetIsCorrect() bool {
	if x != nil {
		return x.IsCorrect
	}
	return false
}

func (x *RecordLearningResultRequest) GetResponseTime() uint32 {
	if x != nil {
		return x.ResponseTime
	}
	return 0
}

func (x *RecordLearningResultRequest) GetUserNotes() []string {
	if x != nil {
		return x.UserNotes
	}
	return nil
}

type RecordLearningResultResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Status             *MemoryStatus          `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	NextReviewInterval *ReviewInterval        `protobuf:"bytes,2,opt,name=next_review_interval,json=nextReviewInterval,proto3" json:"next_review_interval,omitempty"` // 建议的下次复习间隔
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *RecordLearningResultResponse) Reset() {
	*x = RecordLearningResultResponse{}
	mi := &file_proto_v1_learning_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecordLearningResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordLearningResultResponse) ProtoMessage() {}

func (x *RecordLearningResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_v1_learning_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordLearningResultResponse.ProtoReflect.Descriptor instead.
func (*RecordLearningResultResponse) Descriptor() ([]byte, []int) {
	return file_proto_v1_learning_proto_rawDescGZIP(), []int{22}
}

func (x *RecordLearningResultResponse) GetStatus() *MemoryStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *RecordLearningResultResponse) GetNextReviewInterval() *ReviewInterval {
	if x != nil {
		return x.NextReviewInterval
	}
	return nil
}

var File_proto_v1_learning_proto protoreflect.FileDescriptor

var file_proto_v1_learning_proto_rawDesc = string([]byte{
	0x0a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xd7, 0x01, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x22, 0xf3, 0x03, 0x0a,
	0x0c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a,
	0x0e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x6e, 0x69,
	0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0d,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0c, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0e,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x61, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x41, 0x74, 0x12, 0x40,
	0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x41, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x74, 0x75, 0x64, 0x79, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x77, 0x72, 0x6f, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x74, 0x69, 0x76, 0x65, 0x57, 0x72, 0x6f,
	0x6e, 0x67, 0x22, 0x54, 0x0a, 0x0e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x79, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6f, 0x75, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x22, 0x78, 0x0a, 0x10, 0x4c, 0x65, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x12, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x55,
	0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6c,
	0x61, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x74, 0x75, 0x64, 0x79, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x46, 0x0a, 0x27, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x28,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x22, 0x49, 0x0a, 0x28, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x29, 0x4c,
	0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x22, 0x40, 0x0a, 0x25, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x74,
	0x49, 0x64, 0x22, 0x5e, 0x0a, 0x26, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x55, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x28, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x73, 0x74, 0x75, 0x64, 0x79, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2b, 0x0a,
	0x29, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xbb, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0d, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x74, 0x75, 0x64, 0x79, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x4c, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xb3, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x69, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0xa0, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x6e, 0x69, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x15, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x03,
	0x74, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x61, 0x67, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0xee, 0x03, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65,
	0x61, 0x72, 0x6e, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x6e, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6e, 0x65, 0x65, 0x64, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x73, 0x74, 0x75, 0x64, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x75, 0x64, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x51, 0x0a, 0x0b, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x5d, 0x0a, 0x0f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x61, 0x74, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x61, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa6, 0x01, 0x0a, 0x1b, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x73, 0x5f, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x43, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x22,
	0x9a, 0x01, 0x0a, 0x1c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x4a, 0x0a, 0x14, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x12, 0x6e, 0x65, 0x78, 0x74, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x2a, 0xc6, 0x01, 0x0a,
	0x0e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x20, 0x0a, 0x1c, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x49, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x41, 0x4e, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x10, 0x01,
	0x12, 0x19, 0x0a, 0x15, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x44, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x4d,
	0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x45, 0x4e, 0x54, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x45,
	0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50,
	0x48, 0x52, 0x41, 0x53, 0x45, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x45, 0x4d, 0x4f, 0x52,
	0x59, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x41, 0x4d,
	0x4d, 0x41, 0x52, 0x10, 0x05, 0x2a, 0x96, 0x01, 0x0a, 0x0c, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52,
	0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x59,
	0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16,
	0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x46, 0x41,
	0x4d, 0x49, 0x4c, 0x49, 0x41, 0x52, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x41, 0x53, 0x54,
	0x45, 0x52, 0x59, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x59, 0x5f,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x45, 0x58, 0x50, 0x45, 0x52, 0x54, 0x10, 0x04, 0x32, 0xba,
	0x0b, 0x0a, 0x0f, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0xb1, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0xb6, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x32, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x12, 0x2f,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x2f, 0x73, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12,
	0xa7, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47,
	0x65, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x2f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2f, 0x7b, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0xb3, 0x01, 0x0a, 0x12, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2e, 0x3a, 0x01, 0x2a, 0x1a, 0x29, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2f, 0x7b, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x91, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33,
	0x12, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x2f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x3a, 0x01, 0x2a,
	0x1a, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x2f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x7b, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x92, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x26, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x46, 0x6f, 0x72,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x2f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x7c, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c,
	0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x92, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x31, 0x5a, 0x28, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x61, 0x7a, 0x79, 0x6a, 0x65,
	0x61, 0x6e, 0x2f, 0x73, 0x6c, 0x61, 0x32, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x76, 0x31, 0x3b, 0x70, 0x62, 0xba, 0x02, 0x04, 0x53, 0x4c, 0x41, 0x32, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_proto_v1_learning_proto_rawDescOnce sync.Once
	file_proto_v1_learning_proto_rawDescData []byte
)

func file_proto_v1_learning_proto_rawDescGZIP() []byte {
	file_proto_v1_learning_proto_rawDescOnce.Do(func() {
		file_proto_v1_learning_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_v1_learning_proto_rawDesc), len(file_proto_v1_learning_proto_rawDesc)))
	})
	return file_proto_v1_learning_proto_rawDescData
}

var file_proto_v1_learning_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_v1_learning_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_proto_v1_learning_proto_goTypes = []any{
	(MemoryUnitType)(0),                               // 0: proto.v1.MemoryUnitType
	(MasteryLevel)(0),                                 // 1: proto.v1.MasteryLevel
	(*MemoryUnit)(nil),                                // 2: proto.v1.MemoryUnit
	(*MemoryStatus)(nil),                              // 3: proto.v1.MemoryStatus
	(*ReviewInterval)(nil),                            // 4: proto.v1.ReviewInterval
	(*LearningProgress)(nil),                          // 5: proto.v1.LearningProgress
	(*LearningUnitStatus)(nil),                        // 6: proto.v1.LearningUnitStatus
	(*LearningServiceGetCourseProgressRequest)(nil),   // 7: proto.v1.LearningServiceGetCourseProgressRequest
	(*LearningServiceGetCourseProgressResponse)(nil),  // 8: proto.v1.LearningServiceGetCourseProgressResponse
	(*LearningServiceGetSectionProgressRequest)(nil),  // 9: proto.v1.LearningServiceGetSectionProgressRequest
	(*LearningServiceGetSectionProgressResponse)(nil), // 10: proto.v1.LearningServiceGetSectionProgressResponse
	(*LearningServiceGetUnitProgressRequest)(nil),     // 11: proto.v1.LearningServiceGetUnitProgressRequest
	(*LearningServiceGetUnitProgressResponse)(nil),    // 12: proto.v1.LearningServiceGetUnitProgressResponse
	(*LearningServiceUpdateUnitProgressRequest)(nil),  // 13: proto.v1.LearningServiceUpdateUnitProgressRequest
	(*LearningServiceUpdateUnitProgressResponse)(nil), // 14: proto.v1.LearningServiceUpdateUnitProgressResponse
	(*GetMemoryStatusRequest)(nil),                    // 15: proto.v1.GetMemoryStatusRequest
	(*GetMemoryStatusResponse)(nil),                   // 16: proto.v1.GetMemoryStatusResponse
	(*UpdateMemoryStatusRequest)(nil),                 // 17: proto.v1.UpdateMemoryStatusRequest
	(*UpdateMemoryStatusResponse)(nil),                // 18: proto.v1.UpdateMemoryStatusResponse
	(*ListMemoriesForReviewRequest)(nil),              // 19: proto.v1.ListMemoriesForReviewRequest
	(*ListMemoriesForReviewResponse)(nil),             // 20: proto.v1.ListMemoriesForReviewResponse
	(*GetMemoryStatsRequest)(nil),                     // 21: proto.v1.GetMemoryStatsRequest
	(*GetMemoryStatsResponse)(nil),                    // 22: proto.v1.GetMemoryStatsResponse
	(*RecordLearningResultRequest)(nil),               // 23: proto.v1.RecordLearningResultRequest
	(*RecordLearningResultResponse)(nil),              // 24: proto.v1.RecordLearningResultResponse
	nil,                                               // 25: proto.v1.GetMemoryStatsResponse.LevelStatsEntry
	nil,                                               // 26: proto.v1.GetMemoryStatsResponse.RetentionRatesEntry
	(*timestamppb.Timestamp)(nil),                     // 27: google.protobuf.Timestamp
}
var file_proto_v1_learning_proto_depIdxs = []int32{
	0,  // 0: proto.v1.MemoryUnit.type:type_name -> proto.v1.MemoryUnitType
	1,  // 1: proto.v1.MemoryStatus.mastery_level:type_name -> proto.v1.MasteryLevel
	27, // 2: proto.v1.MemoryStatus.next_review_at:type_name -> google.protobuf.Timestamp
	27, // 3: proto.v1.MemoryStatus.last_review_at:type_name -> google.protobuf.Timestamp
	27, // 4: proto.v1.LearningUnitStatus.last_access_time:type_name -> google.protobuf.Timestamp
	5,  // 5: proto.v1.LearningServiceGetCourseProgressResponse.progress:type_name -> proto.v1.LearningProgress
	5,  // 6: proto.v1.LearningServiceGetSectionProgressResponse.progress:type_name -> proto.v1.LearningProgress
	6,  // 7: proto.v1.LearningServiceGetUnitProgressResponse.status:type_name -> proto.v1.LearningUnitStatus
	3,  // 8: proto.v1.GetMemoryStatusResponse.status:type_name -> proto.v1.MemoryStatus
	1,  // 9: proto.v1.UpdateMemoryStatusRequest.mastery_level:type_name -> proto.v1.MasteryLevel
	3,  // 10: proto.v1.UpdateMemoryStatusResponse.status:type_name -> proto.v1.MemoryStatus
	0,  // 11: proto.v1.ListMemoriesForReviewRequest.types:type_name -> proto.v1.MemoryUnitType
	3,  // 12: proto.v1.ListMemoriesForReviewResponse.statuses:type_name -> proto.v1.MemoryStatus
	0,  // 13: proto.v1.GetMemoryStatsRequest.type:type_name -> proto.v1.MemoryUnitType
	25, // 14: proto.v1.GetMemoryStatsResponse.level_stats:type_name -> proto.v1.GetMemoryStatsResponse.LevelStatsEntry
	26, // 15: proto.v1.GetMemoryStatsResponse.retention_rates:type_name -> proto.v1.GetMemoryStatsResponse.RetentionRatesEntry
	3,  // 16: proto.v1.RecordLearningResultResponse.status:type_name -> proto.v1.MemoryStatus
	4,  // 17: proto.v1.RecordLearningResultResponse.next_review_interval:type_name -> proto.v1.ReviewInterval
	7,  // 18: proto.v1.LearningService.GetCourseProgress:input_type -> proto.v1.LearningServiceGetCourseProgressRequest
	9,  // 19: proto.v1.LearningService.GetSectionProgress:input_type -> proto.v1.LearningServiceGetSectionProgressRequest
	11, // 20: proto.v1.LearningService.GetUnitProgress:input_type -> proto.v1.LearningServiceGetUnitProgressRequest
	13, // 21: proto.v1.LearningService.UpdateUnitProgress:input_type -> proto.v1.LearningServiceUpdateUnitProgressRequest
	15, // 22: proto.v1.LearningService.GetMemoryStatus:input_type -> proto.v1.GetMemoryStatusRequest
	17, // 23: proto.v1.LearningService.UpdateMemoryStatus:input_type -> proto.v1.UpdateMemoryStatusRequest
	19, // 24: proto.v1.LearningService.ListMemoriesForReview:input_type -> proto.v1.ListMemoriesForReviewRequest
	21, // 25: proto.v1.LearningService.GetMemoryStats:input_type -> proto.v1.GetMemoryStatsRequest
	23, // 26: proto.v1.LearningService.RecordLearningResult:input_type -> proto.v1.RecordLearningResultRequest
	8,  // 27: proto.v1.LearningService.GetCourseProgress:output_type -> proto.v1.LearningServiceGetCourseProgressResponse
	10, // 28: proto.v1.LearningService.GetSectionProgress:output_type -> proto.v1.LearningServiceGetSectionProgressResponse
	12, // 29: proto.v1.LearningService.GetUnitProgress:output_type -> proto.v1.LearningServiceGetUnitProgressResponse
	14, // 30: proto.v1.LearningService.UpdateUnitProgress:output_type -> proto.v1.LearningServiceUpdateUnitProgressResponse
	16, // 31: proto.v1.LearningService.GetMemoryStatus:output_type -> proto.v1.GetMemoryStatusResponse
	18, // 32: proto.v1.LearningService.UpdateMemoryStatus:output_type -> proto.v1.UpdateMemoryStatusResponse
	20, // 33: proto.v1.LearningService.ListMemoriesForReview:output_type -> proto.v1.ListMemoriesForReviewResponse
	22, // 34: proto.v1.LearningService.GetMemoryStats:output_type -> proto.v1.GetMemoryStatsResponse
	24, // 35: proto.v1.LearningService.RecordLearningResult:output_type -> proto.v1.RecordLearningResultResponse
	27, // [27:36] is the sub-list for method output_type
	18, // [18:27] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_proto_v1_learning_proto_init() }
func file_proto_v1_learning_proto_init() {
	if File_proto_v1_learning_proto != nil {
		return
	}
	file_proto_v1_learning_proto_msgTypes[19].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_v1_learning_proto_rawDesc), len(file_proto_v1_learning_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_v1_learning_proto_goTypes,
		DependencyIndexes: file_proto_v1_learning_proto_depIdxs,
		EnumInfos:         file_proto_v1_learning_proto_enumTypes,
		MessageInfos:      file_proto_v1_learning_proto_msgTypes,
	}.Build()
	File_proto_v1_learning_proto = out.File
	file_proto_v1_learning_proto_goTypes = nil
	file_proto_v1_learning_proto_depIdxs = nil
}
