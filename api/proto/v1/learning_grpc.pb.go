// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/v1/learning.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LearningService_GetCourseProgress_FullMethodName  = "/proto.v1.LearningService/GetCourseProgress"
	LearningService_GetSectionProgress_FullMethodName = "/proto.v1.LearningService/GetSectionProgress"
	LearningService_GetUnitProgress_FullMethodName    = "/proto.v1.LearningService/GetUnitProgress"
	LearningService_UpdateUnitProgress_FullMethodName = "/proto.v1.LearningService/UpdateUnitProgress"
)

// LearningServiceClient is the client API for LearningService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// LearningService 提供学习进度相关的服务
type LearningServiceClient interface {
	// GetCourseProgress 获取课程学习进度
	GetCourseProgress(ctx context.Context, in *LearningServiceGetCourseProgressRequest, opts ...grpc.CallOption) (*LearningServiceGetCourseProgressResponse, error)
	// GetSectionProgress 获取章节学习进度
	GetSectionProgress(ctx context.Context, in *LearningServiceGetSectionProgressRequest, opts ...grpc.CallOption) (*LearningServiceGetSectionProgressResponse, error)
	// GetUnitProgress 获取单元学习进度
	GetUnitProgress(ctx context.Context, in *LearningServiceGetUnitProgressRequest, opts ...grpc.CallOption) (*LearningServiceGetUnitProgressResponse, error)
	// UpdateUnitProgress 更新单元学习进度
	UpdateUnitProgress(ctx context.Context, in *LearningServiceUpdateUnitProgressRequest, opts ...grpc.CallOption) (*LearningServiceUpdateUnitProgressResponse, error)
}

type learningServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLearningServiceClient(cc grpc.ClientConnInterface) LearningServiceClient {
	return &learningServiceClient{cc}
}

func (c *learningServiceClient) GetCourseProgress(ctx context.Context, in *LearningServiceGetCourseProgressRequest, opts ...grpc.CallOption) (*LearningServiceGetCourseProgressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LearningServiceGetCourseProgressResponse)
	err := c.cc.Invoke(ctx, LearningService_GetCourseProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningServiceClient) GetSectionProgress(ctx context.Context, in *LearningServiceGetSectionProgressRequest, opts ...grpc.CallOption) (*LearningServiceGetSectionProgressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LearningServiceGetSectionProgressResponse)
	err := c.cc.Invoke(ctx, LearningService_GetSectionProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningServiceClient) GetUnitProgress(ctx context.Context, in *LearningServiceGetUnitProgressRequest, opts ...grpc.CallOption) (*LearningServiceGetUnitProgressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LearningServiceGetUnitProgressResponse)
	err := c.cc.Invoke(ctx, LearningService_GetUnitProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningServiceClient) UpdateUnitProgress(ctx context.Context, in *LearningServiceUpdateUnitProgressRequest, opts ...grpc.CallOption) (*LearningServiceUpdateUnitProgressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LearningServiceUpdateUnitProgressResponse)
	err := c.cc.Invoke(ctx, LearningService_UpdateUnitProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LearningServiceServer is the server API for LearningService service.
// All implementations must embed UnimplementedLearningServiceServer
// for forward compatibility.
//
// LearningService 提供学习进度相关的服务
type LearningServiceServer interface {
	// GetCourseProgress 获取课程学习进度
	GetCourseProgress(context.Context, *LearningServiceGetCourseProgressRequest) (*LearningServiceGetCourseProgressResponse, error)
	// GetSectionProgress 获取章节学习进度
	GetSectionProgress(context.Context, *LearningServiceGetSectionProgressRequest) (*LearningServiceGetSectionProgressResponse, error)
	// GetUnitProgress 获取单元学习进度
	GetUnitProgress(context.Context, *LearningServiceGetUnitProgressRequest) (*LearningServiceGetUnitProgressResponse, error)
	// UpdateUnitProgress 更新单元学习进度
	UpdateUnitProgress(context.Context, *LearningServiceUpdateUnitProgressRequest) (*LearningServiceUpdateUnitProgressResponse, error)
	mustEmbedUnimplementedLearningServiceServer()
}

// UnimplementedLearningServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLearningServiceServer struct{}

func (UnimplementedLearningServiceServer) GetCourseProgress(context.Context, *LearningServiceGetCourseProgressRequest) (*LearningServiceGetCourseProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourseProgress not implemented")
}
func (UnimplementedLearningServiceServer) GetSectionProgress(context.Context, *LearningServiceGetSectionProgressRequest) (*LearningServiceGetSectionProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSectionProgress not implemented")
}
func (UnimplementedLearningServiceServer) GetUnitProgress(context.Context, *LearningServiceGetUnitProgressRequest) (*LearningServiceGetUnitProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnitProgress not implemented")
}
func (UnimplementedLearningServiceServer) UpdateUnitProgress(context.Context, *LearningServiceUpdateUnitProgressRequest) (*LearningServiceUpdateUnitProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUnitProgress not implemented")
}
func (UnimplementedLearningServiceServer) mustEmbedUnimplementedLearningServiceServer() {}
func (UnimplementedLearningServiceServer) testEmbeddedByValue()                         {}

// UnsafeLearningServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LearningServiceServer will
// result in compilation errors.
type UnsafeLearningServiceServer interface {
	mustEmbedUnimplementedLearningServiceServer()
}

func RegisterLearningServiceServer(s grpc.ServiceRegistrar, srv LearningServiceServer) {
	// If the following call pancis, it indicates UnimplementedLearningServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LearningService_ServiceDesc, srv)
}

func _LearningService_GetCourseProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LearningServiceGetCourseProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).GetCourseProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningService_GetCourseProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).GetCourseProgress(ctx, req.(*LearningServiceGetCourseProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningService_GetSectionProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LearningServiceGetSectionProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).GetSectionProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningService_GetSectionProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).GetSectionProgress(ctx, req.(*LearningServiceGetSectionProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningService_GetUnitProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LearningServiceGetUnitProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).GetUnitProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningService_GetUnitProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).GetUnitProgress(ctx, req.(*LearningServiceGetUnitProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningService_UpdateUnitProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LearningServiceUpdateUnitProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).UpdateUnitProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningService_UpdateUnitProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).UpdateUnitProgress(ctx, req.(*LearningServiceUpdateUnitProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LearningService_ServiceDesc is the grpc.ServiceDesc for LearningService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LearningService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.v1.LearningService",
	HandlerType: (*LearningServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCourseProgress",
			Handler:    _LearningService_GetCourseProgress_Handler,
		},
		{
			MethodName: "GetSectionProgress",
			Handler:    _LearningService_GetSectionProgress_Handler,
		},
		{
			MethodName: "GetUnitProgress",
			Handler:    _LearningService_GetUnitProgress_Handler,
		},
		{
			MethodName: "UpdateUnitProgress",
			Handler:    _LearningService_UpdateUnitProgress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/learning.proto",
}
