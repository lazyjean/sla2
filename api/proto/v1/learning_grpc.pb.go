// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: api/proto/v1/learning.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LearningService_UpdateLearningProgress_FullMethodName = "/sla2.v1.LearningService/UpdateLearningProgress"
	LearningService_ListLearningProgress_FullMethodName   = "/sla2.v1.LearningService/ListLearningProgress"
	LearningService_GetLearningStats_FullMethodName       = "/sla2.v1.LearningService/GetLearningStats"
	LearningService_ListReviewWords_FullMethodName        = "/sla2.v1.LearningService/ListReviewWords"
)

// LearningServiceClient is the client API for LearningService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// LearningService 提供学习进度相关的服务
type LearningServiceClient interface {
	// UpdateLearningProgress 更新学习进度
	UpdateLearningProgress(ctx context.Context, in *UpdateLearningProgressRequest, opts ...grpc.CallOption) (*UpdateLearningProgressResponse, error)
	// ListLearningProgress 获取用户的学习进度列表
	ListLearningProgress(ctx context.Context, in *ListLearningProgressRequest, opts ...grpc.CallOption) (*ListLearningProgressResponse, error)
	// GetLearningStats 获取用户的学习统计信息
	GetLearningStats(ctx context.Context, in *GetLearningStatsRequest, opts ...grpc.CallOption) (*GetLearningStatsResponse, error)
	// ListReviewWords 获取用户待复习的单词列表
	ListReviewWords(ctx context.Context, in *ListReviewWordsRequest, opts ...grpc.CallOption) (*ListReviewWordsResponse, error)
}

type learningServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLearningServiceClient(cc grpc.ClientConnInterface) LearningServiceClient {
	return &learningServiceClient{cc}
}

func (c *learningServiceClient) UpdateLearningProgress(ctx context.Context, in *UpdateLearningProgressRequest, opts ...grpc.CallOption) (*UpdateLearningProgressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateLearningProgressResponse)
	err := c.cc.Invoke(ctx, LearningService_UpdateLearningProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningServiceClient) ListLearningProgress(ctx context.Context, in *ListLearningProgressRequest, opts ...grpc.CallOption) (*ListLearningProgressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLearningProgressResponse)
	err := c.cc.Invoke(ctx, LearningService_ListLearningProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningServiceClient) GetLearningStats(ctx context.Context, in *GetLearningStatsRequest, opts ...grpc.CallOption) (*GetLearningStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLearningStatsResponse)
	err := c.cc.Invoke(ctx, LearningService_GetLearningStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningServiceClient) ListReviewWords(ctx context.Context, in *ListReviewWordsRequest, opts ...grpc.CallOption) (*ListReviewWordsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListReviewWordsResponse)
	err := c.cc.Invoke(ctx, LearningService_ListReviewWords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LearningServiceServer is the server API for LearningService service.
// All implementations must embed UnimplementedLearningServiceServer
// for forward compatibility.
//
// LearningService 提供学习进度相关的服务
type LearningServiceServer interface {
	// UpdateLearningProgress 更新学习进度
	UpdateLearningProgress(context.Context, *UpdateLearningProgressRequest) (*UpdateLearningProgressResponse, error)
	// ListLearningProgress 获取用户的学习进度列表
	ListLearningProgress(context.Context, *ListLearningProgressRequest) (*ListLearningProgressResponse, error)
	// GetLearningStats 获取用户的学习统计信息
	GetLearningStats(context.Context, *GetLearningStatsRequest) (*GetLearningStatsResponse, error)
	// ListReviewWords 获取用户待复习的单词列表
	ListReviewWords(context.Context, *ListReviewWordsRequest) (*ListReviewWordsResponse, error)
	mustEmbedUnimplementedLearningServiceServer()
}

// UnimplementedLearningServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLearningServiceServer struct{}

func (UnimplementedLearningServiceServer) UpdateLearningProgress(context.Context, *UpdateLearningProgressRequest) (*UpdateLearningProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLearningProgress not implemented")
}
func (UnimplementedLearningServiceServer) ListLearningProgress(context.Context, *ListLearningProgressRequest) (*ListLearningProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLearningProgress not implemented")
}
func (UnimplementedLearningServiceServer) GetLearningStats(context.Context, *GetLearningStatsRequest) (*GetLearningStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLearningStats not implemented")
}
func (UnimplementedLearningServiceServer) ListReviewWords(context.Context, *ListReviewWordsRequest) (*ListReviewWordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReviewWords not implemented")
}
func (UnimplementedLearningServiceServer) mustEmbedUnimplementedLearningServiceServer() {}
func (UnimplementedLearningServiceServer) testEmbeddedByValue()                         {}

// UnsafeLearningServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LearningServiceServer will
// result in compilation errors.
type UnsafeLearningServiceServer interface {
	mustEmbedUnimplementedLearningServiceServer()
}

func RegisterLearningServiceServer(s grpc.ServiceRegistrar, srv LearningServiceServer) {
	// If the following call pancis, it indicates UnimplementedLearningServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LearningService_ServiceDesc, srv)
}

func _LearningService_UpdateLearningProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLearningProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).UpdateLearningProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningService_UpdateLearningProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).UpdateLearningProgress(ctx, req.(*UpdateLearningProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningService_ListLearningProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLearningProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).ListLearningProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningService_ListLearningProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).ListLearningProgress(ctx, req.(*ListLearningProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningService_GetLearningStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLearningStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).GetLearningStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningService_GetLearningStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).GetLearningStats(ctx, req.(*GetLearningStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningService_ListReviewWords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReviewWordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).ListReviewWords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningService_ListReviewWords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).ListReviewWords(ctx, req.(*ListReviewWordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LearningService_ServiceDesc is the grpc.ServiceDesc for LearningService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LearningService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sla2.v1.LearningService",
	HandlerType: (*LearningServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateLearningProgress",
			Handler:    _LearningService_UpdateLearningProgress_Handler,
		},
		{
			MethodName: "ListLearningProgress",
			Handler:    _LearningService_ListLearningProgress_Handler,
		},
		{
			MethodName: "GetLearningStats",
			Handler:    _LearningService_GetLearningStats_Handler,
		},
		{
			MethodName: "ListReviewWords",
			Handler:    _LearningService_ListReviewWords_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/v1/learning.proto",
}
