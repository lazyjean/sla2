// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/v1/learning.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LearningService_GetCourseProgress_FullMethodName              = "/proto.v1.LearningService/GetCourseProgress"
	LearningService_GetSectionProgress_FullMethodName             = "/proto.v1.LearningService/GetSectionProgress"
	LearningService_UpdateUnitProgress_FullMethodName             = "/proto.v1.LearningService/UpdateUnitProgress"
	LearningService_GetMemoryStatus_FullMethodName                = "/proto.v1.LearningService/GetMemoryStatus"
	LearningService_UpdateMemoryStatus_FullMethodName             = "/proto.v1.LearningService/UpdateMemoryStatus"
	LearningService_ListMemoriesForReview_FullMethodName          = "/proto.v1.LearningService/ListMemoriesForReview"
	LearningService_GetMemoryStats_FullMethodName                 = "/proto.v1.LearningService/GetMemoryStats"
	LearningService_ReviewWord_FullMethodName                     = "/proto.v1.LearningService/ReviewWord"
	LearningService_ReviewHanChar_FullMethodName                  = "/proto.v1.LearningService/ReviewHanChar"
	LearningService_SubmitHanCharReview_FullMethodName            = "/proto.v1.LearningService/SubmitHanCharReview"
	LearningService_GetHanCharTest_FullMethodName                 = "/proto.v1.LearningService/GetHanCharTest"
	LearningService_SubmitHanCharTestResult_FullMethodName        = "/proto.v1.LearningService/SubmitHanCharTestResult"
	LearningService_GetNewHanCharLearning_FullMethodName          = "/proto.v1.LearningService/GetNewHanCharLearning"
	LearningService_SubmitNewHanCharLearningResult_FullMethodName = "/proto.v1.LearningService/SubmitNewHanCharLearningResult"
)

// LearningServiceClient is the client API for LearningService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// LearningService 提供学习进度相关的服务
type LearningServiceClient interface {
	// GetCourseProgress 获取课程学习进度
	GetCourseProgress(ctx context.Context, in *LearningServiceGetCourseProgressRequest, opts ...grpc.CallOption) (*LearningServiceGetCourseProgressResponse, error)
	// GetSectionProgress 获取章节学习进度
	GetSectionProgress(ctx context.Context, in *LearningServiceGetSectionProgressRequest, opts ...grpc.CallOption) (*LearningServiceGetSectionProgressResponse, error)
	// UpdateUnitProgress 更新单元学习进度
	UpdateUnitProgress(ctx context.Context, in *LearningServiceUpdateUnitProgressRequest, opts ...grpc.CallOption) (*LearningServiceUpdateUnitProgressResponse, error)
	// 获取记忆单元状态
	GetMemoryStatus(ctx context.Context, in *GetMemoryStatusRequest, opts ...grpc.CallOption) (*GetMemoryStatusResponse, error)
	// 更新记忆单元状态
	UpdateMemoryStatus(ctx context.Context, in *UpdateMemoryStatusRequest, opts ...grpc.CallOption) (*UpdateMemoryStatusResponse, error)
	// 获取需要复习的记忆单元列表
	ListMemoriesForReview(ctx context.Context, in *ListMemoriesForReviewRequest, opts ...grpc.CallOption) (*ListMemoriesForReviewResponse, error)
	// 获取记忆单元学习统计
	GetMemoryStats(ctx context.Context, in *GetMemoryStatsRequest, opts ...grpc.CallOption) (*GetMemoryStatsResponse, error)
	// 复习单词
	ReviewWord(ctx context.Context, in *ReviewWordRequest, opts ...grpc.CallOption) (*ReviewWordResponse, error)
	// 待复习汉字
	ReviewHanChar(ctx context.Context, in *ReviewHanCharRequest, opts ...grpc.CallOption) (*ReviewHanCharResponse, error)
	// 提交复习结果
	SubmitHanCharReview(ctx context.Context, in *SubmitHanCharReviewRequest, opts ...grpc.CallOption) (*SubmitHanCharReviewResponse, error)
	// 获取汉字测试
	GetHanCharTest(ctx context.Context, in *GetHanCharTestRequest, opts ...grpc.CallOption) (*GetHanCharTestResponse, error)
	// 提交测试结果
	SubmitHanCharTestResult(ctx context.Context, in *SubmitHanCharTestResultRequest, opts ...grpc.CallOption) (*SubmitHanCharTestResultResponse, error)
	// 获取生字学习内容
	GetNewHanCharLearning(ctx context.Context, in *GetNewHanCharLearningRequest, opts ...grpc.CallOption) (*GetNewHanCharLearningResponse, error)
	// 提交生字学习结果
	SubmitNewHanCharLearningResult(ctx context.Context, in *SubmitNewHanCharLearningResultRequest, opts ...grpc.CallOption) (*SubmitNewHanCharLearningResultResponse, error)
}

type learningServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLearningServiceClient(cc grpc.ClientConnInterface) LearningServiceClient {
	return &learningServiceClient{cc}
}

func (c *learningServiceClient) GetCourseProgress(ctx context.Context, in *LearningServiceGetCourseProgressRequest, opts ...grpc.CallOption) (*LearningServiceGetCourseProgressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LearningServiceGetCourseProgressResponse)
	err := c.cc.Invoke(ctx, LearningService_GetCourseProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningServiceClient) GetSectionProgress(ctx context.Context, in *LearningServiceGetSectionProgressRequest, opts ...grpc.CallOption) (*LearningServiceGetSectionProgressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LearningServiceGetSectionProgressResponse)
	err := c.cc.Invoke(ctx, LearningService_GetSectionProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningServiceClient) UpdateUnitProgress(ctx context.Context, in *LearningServiceUpdateUnitProgressRequest, opts ...grpc.CallOption) (*LearningServiceUpdateUnitProgressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LearningServiceUpdateUnitProgressResponse)
	err := c.cc.Invoke(ctx, LearningService_UpdateUnitProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningServiceClient) GetMemoryStatus(ctx context.Context, in *GetMemoryStatusRequest, opts ...grpc.CallOption) (*GetMemoryStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMemoryStatusResponse)
	err := c.cc.Invoke(ctx, LearningService_GetMemoryStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningServiceClient) UpdateMemoryStatus(ctx context.Context, in *UpdateMemoryStatusRequest, opts ...grpc.CallOption) (*UpdateMemoryStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMemoryStatusResponse)
	err := c.cc.Invoke(ctx, LearningService_UpdateMemoryStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningServiceClient) ListMemoriesForReview(ctx context.Context, in *ListMemoriesForReviewRequest, opts ...grpc.CallOption) (*ListMemoriesForReviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMemoriesForReviewResponse)
	err := c.cc.Invoke(ctx, LearningService_ListMemoriesForReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningServiceClient) GetMemoryStats(ctx context.Context, in *GetMemoryStatsRequest, opts ...grpc.CallOption) (*GetMemoryStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMemoryStatsResponse)
	err := c.cc.Invoke(ctx, LearningService_GetMemoryStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningServiceClient) ReviewWord(ctx context.Context, in *ReviewWordRequest, opts ...grpc.CallOption) (*ReviewWordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReviewWordResponse)
	err := c.cc.Invoke(ctx, LearningService_ReviewWord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningServiceClient) ReviewHanChar(ctx context.Context, in *ReviewHanCharRequest, opts ...grpc.CallOption) (*ReviewHanCharResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReviewHanCharResponse)
	err := c.cc.Invoke(ctx, LearningService_ReviewHanChar_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningServiceClient) SubmitHanCharReview(ctx context.Context, in *SubmitHanCharReviewRequest, opts ...grpc.CallOption) (*SubmitHanCharReviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitHanCharReviewResponse)
	err := c.cc.Invoke(ctx, LearningService_SubmitHanCharReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningServiceClient) GetHanCharTest(ctx context.Context, in *GetHanCharTestRequest, opts ...grpc.CallOption) (*GetHanCharTestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHanCharTestResponse)
	err := c.cc.Invoke(ctx, LearningService_GetHanCharTest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningServiceClient) SubmitHanCharTestResult(ctx context.Context, in *SubmitHanCharTestResultRequest, opts ...grpc.CallOption) (*SubmitHanCharTestResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitHanCharTestResultResponse)
	err := c.cc.Invoke(ctx, LearningService_SubmitHanCharTestResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningServiceClient) GetNewHanCharLearning(ctx context.Context, in *GetNewHanCharLearningRequest, opts ...grpc.CallOption) (*GetNewHanCharLearningResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNewHanCharLearningResponse)
	err := c.cc.Invoke(ctx, LearningService_GetNewHanCharLearning_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningServiceClient) SubmitNewHanCharLearningResult(ctx context.Context, in *SubmitNewHanCharLearningResultRequest, opts ...grpc.CallOption) (*SubmitNewHanCharLearningResultResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitNewHanCharLearningResultResponse)
	err := c.cc.Invoke(ctx, LearningService_SubmitNewHanCharLearningResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LearningServiceServer is the server API for LearningService service.
// All implementations must embed UnimplementedLearningServiceServer
// for forward compatibility.
//
// LearningService 提供学习进度相关的服务
type LearningServiceServer interface {
	// GetCourseProgress 获取课程学习进度
	GetCourseProgress(context.Context, *LearningServiceGetCourseProgressRequest) (*LearningServiceGetCourseProgressResponse, error)
	// GetSectionProgress 获取章节学习进度
	GetSectionProgress(context.Context, *LearningServiceGetSectionProgressRequest) (*LearningServiceGetSectionProgressResponse, error)
	// UpdateUnitProgress 更新单元学习进度
	UpdateUnitProgress(context.Context, *LearningServiceUpdateUnitProgressRequest) (*LearningServiceUpdateUnitProgressResponse, error)
	// 获取记忆单元状态
	GetMemoryStatus(context.Context, *GetMemoryStatusRequest) (*GetMemoryStatusResponse, error)
	// 更新记忆单元状态
	UpdateMemoryStatus(context.Context, *UpdateMemoryStatusRequest) (*UpdateMemoryStatusResponse, error)
	// 获取需要复习的记忆单元列表
	ListMemoriesForReview(context.Context, *ListMemoriesForReviewRequest) (*ListMemoriesForReviewResponse, error)
	// 获取记忆单元学习统计
	GetMemoryStats(context.Context, *GetMemoryStatsRequest) (*GetMemoryStatsResponse, error)
	// 复习单词
	ReviewWord(context.Context, *ReviewWordRequest) (*ReviewWordResponse, error)
	// 待复习汉字
	ReviewHanChar(context.Context, *ReviewHanCharRequest) (*ReviewHanCharResponse, error)
	// 提交复习结果
	SubmitHanCharReview(context.Context, *SubmitHanCharReviewRequest) (*SubmitHanCharReviewResponse, error)
	// 获取汉字测试
	GetHanCharTest(context.Context, *GetHanCharTestRequest) (*GetHanCharTestResponse, error)
	// 提交测试结果
	SubmitHanCharTestResult(context.Context, *SubmitHanCharTestResultRequest) (*SubmitHanCharTestResultResponse, error)
	// 获取生字学习内容
	GetNewHanCharLearning(context.Context, *GetNewHanCharLearningRequest) (*GetNewHanCharLearningResponse, error)
	// 提交生字学习结果
	SubmitNewHanCharLearningResult(context.Context, *SubmitNewHanCharLearningResultRequest) (*SubmitNewHanCharLearningResultResponse, error)
	mustEmbedUnimplementedLearningServiceServer()
}

// UnimplementedLearningServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLearningServiceServer struct{}

func (UnimplementedLearningServiceServer) GetCourseProgress(context.Context, *LearningServiceGetCourseProgressRequest) (*LearningServiceGetCourseProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourseProgress not implemented")
}
func (UnimplementedLearningServiceServer) GetSectionProgress(context.Context, *LearningServiceGetSectionProgressRequest) (*LearningServiceGetSectionProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSectionProgress not implemented")
}
func (UnimplementedLearningServiceServer) UpdateUnitProgress(context.Context, *LearningServiceUpdateUnitProgressRequest) (*LearningServiceUpdateUnitProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUnitProgress not implemented")
}
func (UnimplementedLearningServiceServer) GetMemoryStatus(context.Context, *GetMemoryStatusRequest) (*GetMemoryStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemoryStatus not implemented")
}
func (UnimplementedLearningServiceServer) UpdateMemoryStatus(context.Context, *UpdateMemoryStatusRequest) (*UpdateMemoryStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMemoryStatus not implemented")
}
func (UnimplementedLearningServiceServer) ListMemoriesForReview(context.Context, *ListMemoriesForReviewRequest) (*ListMemoriesForReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMemoriesForReview not implemented")
}
func (UnimplementedLearningServiceServer) GetMemoryStats(context.Context, *GetMemoryStatsRequest) (*GetMemoryStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemoryStats not implemented")
}
func (UnimplementedLearningServiceServer) ReviewWord(context.Context, *ReviewWordRequest) (*ReviewWordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewWord not implemented")
}
func (UnimplementedLearningServiceServer) ReviewHanChar(context.Context, *ReviewHanCharRequest) (*ReviewHanCharResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewHanChar not implemented")
}
func (UnimplementedLearningServiceServer) SubmitHanCharReview(context.Context, *SubmitHanCharReviewRequest) (*SubmitHanCharReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitHanCharReview not implemented")
}
func (UnimplementedLearningServiceServer) GetHanCharTest(context.Context, *GetHanCharTestRequest) (*GetHanCharTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHanCharTest not implemented")
}
func (UnimplementedLearningServiceServer) SubmitHanCharTestResult(context.Context, *SubmitHanCharTestResultRequest) (*SubmitHanCharTestResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitHanCharTestResult not implemented")
}
func (UnimplementedLearningServiceServer) GetNewHanCharLearning(context.Context, *GetNewHanCharLearningRequest) (*GetNewHanCharLearningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewHanCharLearning not implemented")
}
func (UnimplementedLearningServiceServer) SubmitNewHanCharLearningResult(context.Context, *SubmitNewHanCharLearningResultRequest) (*SubmitNewHanCharLearningResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitNewHanCharLearningResult not implemented")
}
func (UnimplementedLearningServiceServer) mustEmbedUnimplementedLearningServiceServer() {}
func (UnimplementedLearningServiceServer) testEmbeddedByValue()                         {}

// UnsafeLearningServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LearningServiceServer will
// result in compilation errors.
type UnsafeLearningServiceServer interface {
	mustEmbedUnimplementedLearningServiceServer()
}

func RegisterLearningServiceServer(s grpc.ServiceRegistrar, srv LearningServiceServer) {
	// If the following call pancis, it indicates UnimplementedLearningServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LearningService_ServiceDesc, srv)
}

func _LearningService_GetCourseProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LearningServiceGetCourseProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).GetCourseProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningService_GetCourseProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).GetCourseProgress(ctx, req.(*LearningServiceGetCourseProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningService_GetSectionProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LearningServiceGetSectionProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).GetSectionProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningService_GetSectionProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).GetSectionProgress(ctx, req.(*LearningServiceGetSectionProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningService_UpdateUnitProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LearningServiceUpdateUnitProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).UpdateUnitProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningService_UpdateUnitProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).UpdateUnitProgress(ctx, req.(*LearningServiceUpdateUnitProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningService_GetMemoryStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemoryStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).GetMemoryStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningService_GetMemoryStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).GetMemoryStatus(ctx, req.(*GetMemoryStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningService_UpdateMemoryStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemoryStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).UpdateMemoryStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningService_UpdateMemoryStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).UpdateMemoryStatus(ctx, req.(*UpdateMemoryStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningService_ListMemoriesForReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMemoriesForReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).ListMemoriesForReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningService_ListMemoriesForReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).ListMemoriesForReview(ctx, req.(*ListMemoriesForReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningService_GetMemoryStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemoryStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).GetMemoryStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningService_GetMemoryStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).GetMemoryStats(ctx, req.(*GetMemoryStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningService_ReviewWord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewWordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).ReviewWord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningService_ReviewWord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).ReviewWord(ctx, req.(*ReviewWordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningService_ReviewHanChar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewHanCharRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).ReviewHanChar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningService_ReviewHanChar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).ReviewHanChar(ctx, req.(*ReviewHanCharRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningService_SubmitHanCharReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitHanCharReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).SubmitHanCharReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningService_SubmitHanCharReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).SubmitHanCharReview(ctx, req.(*SubmitHanCharReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningService_GetHanCharTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHanCharTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).GetHanCharTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningService_GetHanCharTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).GetHanCharTest(ctx, req.(*GetHanCharTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningService_SubmitHanCharTestResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitHanCharTestResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).SubmitHanCharTestResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningService_SubmitHanCharTestResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).SubmitHanCharTestResult(ctx, req.(*SubmitHanCharTestResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningService_GetNewHanCharLearning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewHanCharLearningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).GetNewHanCharLearning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningService_GetNewHanCharLearning_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).GetNewHanCharLearning(ctx, req.(*GetNewHanCharLearningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningService_SubmitNewHanCharLearningResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitNewHanCharLearningResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).SubmitNewHanCharLearningResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningService_SubmitNewHanCharLearningResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).SubmitNewHanCharLearningResult(ctx, req.(*SubmitNewHanCharLearningResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LearningService_ServiceDesc is the grpc.ServiceDesc for LearningService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LearningService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.v1.LearningService",
	HandlerType: (*LearningServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCourseProgress",
			Handler:    _LearningService_GetCourseProgress_Handler,
		},
		{
			MethodName: "GetSectionProgress",
			Handler:    _LearningService_GetSectionProgress_Handler,
		},
		{
			MethodName: "UpdateUnitProgress",
			Handler:    _LearningService_UpdateUnitProgress_Handler,
		},
		{
			MethodName: "GetMemoryStatus",
			Handler:    _LearningService_GetMemoryStatus_Handler,
		},
		{
			MethodName: "UpdateMemoryStatus",
			Handler:    _LearningService_UpdateMemoryStatus_Handler,
		},
		{
			MethodName: "ListMemoriesForReview",
			Handler:    _LearningService_ListMemoriesForReview_Handler,
		},
		{
			MethodName: "GetMemoryStats",
			Handler:    _LearningService_GetMemoryStats_Handler,
		},
		{
			MethodName: "ReviewWord",
			Handler:    _LearningService_ReviewWord_Handler,
		},
		{
			MethodName: "ReviewHanChar",
			Handler:    _LearningService_ReviewHanChar_Handler,
		},
		{
			MethodName: "SubmitHanCharReview",
			Handler:    _LearningService_SubmitHanCharReview_Handler,
		},
		{
			MethodName: "GetHanCharTest",
			Handler:    _LearningService_GetHanCharTest_Handler,
		},
		{
			MethodName: "SubmitHanCharTestResult",
			Handler:    _LearningService_SubmitHanCharTestResult_Handler,
		},
		{
			MethodName: "GetNewHanCharLearning",
			Handler:    _LearningService_GetNewHanCharLearning_Handler,
		},
		{
			MethodName: "SubmitNewHanCharLearningResult",
			Handler:    _LearningService_SubmitNewHanCharLearningResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/learning.proto",
}
