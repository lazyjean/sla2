// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/v1/learning.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LearningService_GetCourseProgress_FullMethodName     = "/proto.v1.LearningService/GetCourseProgress"
	LearningService_GetSectionProgress_FullMethodName    = "/proto.v1.LearningService/GetSectionProgress"
	LearningService_UpdateUnitProgress_FullMethodName    = "/proto.v1.LearningService/UpdateUnitProgress"
	LearningService_InitializeMemoryUnits_FullMethodName = "/proto.v1.LearningService/InitializeMemoryUnits"
	LearningService_ListMemoriesForReview_FullMethodName = "/proto.v1.LearningService/ListMemoriesForReview"
	LearningService_ReviewMemoryUnits_FullMethodName     = "/proto.v1.LearningService/ReviewMemoryUnits"
	LearningService_GetMemoryStats_FullMethodName        = "/proto.v1.LearningService/GetMemoryStats"
	LearningService_GetHanCharTest_FullMethodName        = "/proto.v1.LearningService/GetHanCharTest"
	LearningService_GetWordTest_FullMethodName           = "/proto.v1.LearningService/GetWordTest"
)

// LearningServiceClient is the client API for LearningService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// LearningService 提供学习进度相关的服务
type LearningServiceClient interface {
	// name: 获取课程学习进度
	// summary: 获取指定课程的学习进度信息，包括总体进度、已完成章节数等
	// required: course_id
	GetCourseProgress(ctx context.Context, in *LearningServiceGetCourseProgressRequest, opts ...grpc.CallOption) (*LearningServiceGetCourseProgressResponse, error)
	// name: 获取章节学习进度
	// summary: 获取指定章节的学习进度信息，包括章节进度、已完成单元列表等
	// required: section_id
	GetSectionProgress(ctx context.Context, in *LearningServiceGetSectionProgressRequest, opts ...grpc.CallOption) (*LearningServiceGetSectionProgressResponse, error)
	// name: 更新单元学习进度
	// summary: 更新指定单元的学习进度状态，标记单元是否完成
	// required: unit_id, section_id, completed
	UpdateUnitProgress(ctx context.Context, in *LearningServiceUpdateUnitProgressRequest, opts ...grpc.CallOption) (*LearningServiceUpdateUnitProgressResponse, error)
	// name: 初始化记忆单元
	// summary: 测试或学习过程中, 将未掌握, 或者未学习过的内容, 在这里进行初始化, 后续会追踪记忆状态, 提醒及时复习
	// required: user_id
	InitializeMemoryUnits(ctx context.Context, in *LearningServiceInitializeMemoryUnitRequest, opts ...grpc.CallOption) (*LearningServiceInitializeMemoryUnitResponse, error)
	// name: 获取需要复习的记忆单元列表
	// summary: 获取当前需要复习的记忆单元列表，支持分页和类型过滤
	// required: user_id
	// optional: page, page_size, types, tags, categories
	ListMemoriesForReview(ctx context.Context, in *LearningServiceListMemoriesForReviewRequest, opts ...grpc.CallOption) (*LearningServiceListMemoriesForReviewResponse, error)
	// name: 复习记忆单元
	// summary: 提交记忆单元的复习结果，系统会根据复习结果更新记忆状态和下次复习时间
	// required: user_id, items
	ReviewMemoryUnits(ctx context.Context, in *LearningServiceReviewMemoryUnitsRequest, opts ...grpc.CallOption) (*LearningServiceReviewMemoryUnitsResponse, error)
	// name: 获取记忆单元学习统计
	// summary: 获取记忆单元的学习统计信息，包括已学习数量、掌握数量、需要复习数量等
	// required: user_id
	// optional: type, tag, category
	GetMemoryStats(ctx context.Context, in *LearningServiceGetMemoryStatsRequest, opts ...grpc.CallOption) (*LearningServiceGetMemoryStatsResponse, error)
	// name: 获取汉字测试
	// summary: 获取汉字测试内容，支持指定测试数量和难度等级
	// required: count, difficulty_level
	GetHanCharTest(ctx context.Context, in *LearningServiceGetHanCharTestRequest, opts ...grpc.CallOption) (*LearningServiceGetHanCharTestResponse, error)
	// name: 获取单词测试
	// summary: 获取单词测试内容，支持指定测试数量和难度等级
	// required: count, difficulty_level
	GetWordTest(ctx context.Context, in *LearningServiceGetWordTestRequest, opts ...grpc.CallOption) (*LearningServiceGetWordTestResponse, error)
}

type learningServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLearningServiceClient(cc grpc.ClientConnInterface) LearningServiceClient {
	return &learningServiceClient{cc}
}

func (c *learningServiceClient) GetCourseProgress(ctx context.Context, in *LearningServiceGetCourseProgressRequest, opts ...grpc.CallOption) (*LearningServiceGetCourseProgressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LearningServiceGetCourseProgressResponse)
	err := c.cc.Invoke(ctx, LearningService_GetCourseProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningServiceClient) GetSectionProgress(ctx context.Context, in *LearningServiceGetSectionProgressRequest, opts ...grpc.CallOption) (*LearningServiceGetSectionProgressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LearningServiceGetSectionProgressResponse)
	err := c.cc.Invoke(ctx, LearningService_GetSectionProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningServiceClient) UpdateUnitProgress(ctx context.Context, in *LearningServiceUpdateUnitProgressRequest, opts ...grpc.CallOption) (*LearningServiceUpdateUnitProgressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LearningServiceUpdateUnitProgressResponse)
	err := c.cc.Invoke(ctx, LearningService_UpdateUnitProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningServiceClient) InitializeMemoryUnits(ctx context.Context, in *LearningServiceInitializeMemoryUnitRequest, opts ...grpc.CallOption) (*LearningServiceInitializeMemoryUnitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LearningServiceInitializeMemoryUnitResponse)
	err := c.cc.Invoke(ctx, LearningService_InitializeMemoryUnits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningServiceClient) ListMemoriesForReview(ctx context.Context, in *LearningServiceListMemoriesForReviewRequest, opts ...grpc.CallOption) (*LearningServiceListMemoriesForReviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LearningServiceListMemoriesForReviewResponse)
	err := c.cc.Invoke(ctx, LearningService_ListMemoriesForReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningServiceClient) ReviewMemoryUnits(ctx context.Context, in *LearningServiceReviewMemoryUnitsRequest, opts ...grpc.CallOption) (*LearningServiceReviewMemoryUnitsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LearningServiceReviewMemoryUnitsResponse)
	err := c.cc.Invoke(ctx, LearningService_ReviewMemoryUnits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningServiceClient) GetMemoryStats(ctx context.Context, in *LearningServiceGetMemoryStatsRequest, opts ...grpc.CallOption) (*LearningServiceGetMemoryStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LearningServiceGetMemoryStatsResponse)
	err := c.cc.Invoke(ctx, LearningService_GetMemoryStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningServiceClient) GetHanCharTest(ctx context.Context, in *LearningServiceGetHanCharTestRequest, opts ...grpc.CallOption) (*LearningServiceGetHanCharTestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LearningServiceGetHanCharTestResponse)
	err := c.cc.Invoke(ctx, LearningService_GetHanCharTest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningServiceClient) GetWordTest(ctx context.Context, in *LearningServiceGetWordTestRequest, opts ...grpc.CallOption) (*LearningServiceGetWordTestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LearningServiceGetWordTestResponse)
	err := c.cc.Invoke(ctx, LearningService_GetWordTest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LearningServiceServer is the server API for LearningService service.
// All implementations must embed UnimplementedLearningServiceServer
// for forward compatibility.
//
// LearningService 提供学习进度相关的服务
type LearningServiceServer interface {
	// name: 获取课程学习进度
	// summary: 获取指定课程的学习进度信息，包括总体进度、已完成章节数等
	// required: course_id
	GetCourseProgress(context.Context, *LearningServiceGetCourseProgressRequest) (*LearningServiceGetCourseProgressResponse, error)
	// name: 获取章节学习进度
	// summary: 获取指定章节的学习进度信息，包括章节进度、已完成单元列表等
	// required: section_id
	GetSectionProgress(context.Context, *LearningServiceGetSectionProgressRequest) (*LearningServiceGetSectionProgressResponse, error)
	// name: 更新单元学习进度
	// summary: 更新指定单元的学习进度状态，标记单元是否完成
	// required: unit_id, section_id, completed
	UpdateUnitProgress(context.Context, *LearningServiceUpdateUnitProgressRequest) (*LearningServiceUpdateUnitProgressResponse, error)
	// name: 初始化记忆单元
	// summary: 测试或学习过程中, 将未掌握, 或者未学习过的内容, 在这里进行初始化, 后续会追踪记忆状态, 提醒及时复习
	// required: user_id
	InitializeMemoryUnits(context.Context, *LearningServiceInitializeMemoryUnitRequest) (*LearningServiceInitializeMemoryUnitResponse, error)
	// name: 获取需要复习的记忆单元列表
	// summary: 获取当前需要复习的记忆单元列表，支持分页和类型过滤
	// required: user_id
	// optional: page, page_size, types, tags, categories
	ListMemoriesForReview(context.Context, *LearningServiceListMemoriesForReviewRequest) (*LearningServiceListMemoriesForReviewResponse, error)
	// name: 复习记忆单元
	// summary: 提交记忆单元的复习结果，系统会根据复习结果更新记忆状态和下次复习时间
	// required: user_id, items
	ReviewMemoryUnits(context.Context, *LearningServiceReviewMemoryUnitsRequest) (*LearningServiceReviewMemoryUnitsResponse, error)
	// name: 获取记忆单元学习统计
	// summary: 获取记忆单元的学习统计信息，包括已学习数量、掌握数量、需要复习数量等
	// required: user_id
	// optional: type, tag, category
	GetMemoryStats(context.Context, *LearningServiceGetMemoryStatsRequest) (*LearningServiceGetMemoryStatsResponse, error)
	// name: 获取汉字测试
	// summary: 获取汉字测试内容，支持指定测试数量和难度等级
	// required: count, difficulty_level
	GetHanCharTest(context.Context, *LearningServiceGetHanCharTestRequest) (*LearningServiceGetHanCharTestResponse, error)
	// name: 获取单词测试
	// summary: 获取单词测试内容，支持指定测试数量和难度等级
	// required: count, difficulty_level
	GetWordTest(context.Context, *LearningServiceGetWordTestRequest) (*LearningServiceGetWordTestResponse, error)
	mustEmbedUnimplementedLearningServiceServer()
}

// UnimplementedLearningServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLearningServiceServer struct{}

func (UnimplementedLearningServiceServer) GetCourseProgress(context.Context, *LearningServiceGetCourseProgressRequest) (*LearningServiceGetCourseProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourseProgress not implemented")
}
func (UnimplementedLearningServiceServer) GetSectionProgress(context.Context, *LearningServiceGetSectionProgressRequest) (*LearningServiceGetSectionProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSectionProgress not implemented")
}
func (UnimplementedLearningServiceServer) UpdateUnitProgress(context.Context, *LearningServiceUpdateUnitProgressRequest) (*LearningServiceUpdateUnitProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUnitProgress not implemented")
}
func (UnimplementedLearningServiceServer) InitializeMemoryUnits(context.Context, *LearningServiceInitializeMemoryUnitRequest) (*LearningServiceInitializeMemoryUnitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitializeMemoryUnits not implemented")
}
func (UnimplementedLearningServiceServer) ListMemoriesForReview(context.Context, *LearningServiceListMemoriesForReviewRequest) (*LearningServiceListMemoriesForReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMemoriesForReview not implemented")
}
func (UnimplementedLearningServiceServer) ReviewMemoryUnits(context.Context, *LearningServiceReviewMemoryUnitsRequest) (*LearningServiceReviewMemoryUnitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewMemoryUnits not implemented")
}
func (UnimplementedLearningServiceServer) GetMemoryStats(context.Context, *LearningServiceGetMemoryStatsRequest) (*LearningServiceGetMemoryStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemoryStats not implemented")
}
func (UnimplementedLearningServiceServer) GetHanCharTest(context.Context, *LearningServiceGetHanCharTestRequest) (*LearningServiceGetHanCharTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHanCharTest not implemented")
}
func (UnimplementedLearningServiceServer) GetWordTest(context.Context, *LearningServiceGetWordTestRequest) (*LearningServiceGetWordTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWordTest not implemented")
}
func (UnimplementedLearningServiceServer) mustEmbedUnimplementedLearningServiceServer() {}
func (UnimplementedLearningServiceServer) testEmbeddedByValue()                         {}

// UnsafeLearningServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LearningServiceServer will
// result in compilation errors.
type UnsafeLearningServiceServer interface {
	mustEmbedUnimplementedLearningServiceServer()
}

func RegisterLearningServiceServer(s grpc.ServiceRegistrar, srv LearningServiceServer) {
	// If the following call pancis, it indicates UnimplementedLearningServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LearningService_ServiceDesc, srv)
}

func _LearningService_GetCourseProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LearningServiceGetCourseProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).GetCourseProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningService_GetCourseProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).GetCourseProgress(ctx, req.(*LearningServiceGetCourseProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningService_GetSectionProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LearningServiceGetSectionProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).GetSectionProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningService_GetSectionProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).GetSectionProgress(ctx, req.(*LearningServiceGetSectionProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningService_UpdateUnitProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LearningServiceUpdateUnitProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).UpdateUnitProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningService_UpdateUnitProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).UpdateUnitProgress(ctx, req.(*LearningServiceUpdateUnitProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningService_InitializeMemoryUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LearningServiceInitializeMemoryUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).InitializeMemoryUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningService_InitializeMemoryUnits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).InitializeMemoryUnits(ctx, req.(*LearningServiceInitializeMemoryUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningService_ListMemoriesForReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LearningServiceListMemoriesForReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).ListMemoriesForReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningService_ListMemoriesForReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).ListMemoriesForReview(ctx, req.(*LearningServiceListMemoriesForReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningService_ReviewMemoryUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LearningServiceReviewMemoryUnitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).ReviewMemoryUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningService_ReviewMemoryUnits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).ReviewMemoryUnits(ctx, req.(*LearningServiceReviewMemoryUnitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningService_GetMemoryStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LearningServiceGetMemoryStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).GetMemoryStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningService_GetMemoryStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).GetMemoryStats(ctx, req.(*LearningServiceGetMemoryStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningService_GetHanCharTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LearningServiceGetHanCharTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).GetHanCharTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningService_GetHanCharTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).GetHanCharTest(ctx, req.(*LearningServiceGetHanCharTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningService_GetWordTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LearningServiceGetWordTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).GetWordTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningService_GetWordTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).GetWordTest(ctx, req.(*LearningServiceGetWordTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LearningService_ServiceDesc is the grpc.ServiceDesc for LearningService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LearningService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.v1.LearningService",
	HandlerType: (*LearningServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCourseProgress",
			Handler:    _LearningService_GetCourseProgress_Handler,
		},
		{
			MethodName: "GetSectionProgress",
			Handler:    _LearningService_GetSectionProgress_Handler,
		},
		{
			MethodName: "UpdateUnitProgress",
			Handler:    _LearningService_UpdateUnitProgress_Handler,
		},
		{
			MethodName: "InitializeMemoryUnits",
			Handler:    _LearningService_InitializeMemoryUnits_Handler,
		},
		{
			MethodName: "ListMemoriesForReview",
			Handler:    _LearningService_ListMemoriesForReview_Handler,
		},
		{
			MethodName: "ReviewMemoryUnits",
			Handler:    _LearningService_ReviewMemoryUnits_Handler,
		},
		{
			MethodName: "GetMemoryStats",
			Handler:    _LearningService_GetMemoryStats_Handler,
		},
		{
			MethodName: "GetHanCharTest",
			Handler:    _LearningService_GetHanCharTest_Handler,
		},
		{
			MethodName: "GetWordTest",
			Handler:    _LearningService_GetWordTest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/learning.proto",
}
