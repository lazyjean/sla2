// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/v1/learning.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on MemoryUnit with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MemoryUnit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemoryUnit with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MemoryUnitMultiError, or
// nil if none found.
func (m *MemoryUnit) ValidateAll() error {
	return m.validate(true)
}

func (m *MemoryUnit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Type

	// no validation rules for ContentId

	// no validation rules for MasteryLevel

	// no validation rules for ReviewCount

	if all {
		switch v := interface{}(m.GetNextReviewAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemoryUnitValidationError{
					field:  "NextReviewAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemoryUnitValidationError{
					field:  "NextReviewAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNextReviewAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemoryUnitValidationError{
				field:  "NextReviewAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLastReviewAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemoryUnitValidationError{
					field:  "LastReviewAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemoryUnitValidationError{
					field:  "LastReviewAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastReviewAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemoryUnitValidationError{
				field:  "LastReviewAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StudyDuration

	// no validation rules for RetentionRate

	// no validation rules for ConsecutiveCorrect

	// no validation rules for ConsecutiveWrong

	if len(errors) > 0 {
		return MemoryUnitMultiError(errors)
	}

	return nil
}

// MemoryUnitMultiError is an error wrapping multiple validation errors
// returned by MemoryUnit.ValidateAll() if the designated constraints aren't met.
type MemoryUnitMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemoryUnitMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemoryUnitMultiError) AllErrors() []error { return m }

// MemoryUnitValidationError is the validation error returned by
// MemoryUnit.Validate if the designated constraints aren't met.
type MemoryUnitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemoryUnitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemoryUnitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemoryUnitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemoryUnitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemoryUnitValidationError) ErrorName() string { return "MemoryUnitValidationError" }

// Error satisfies the builtin error interface
func (e MemoryUnitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemoryUnit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemoryUnitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemoryUnitValidationError{}

// Validate checks the field values on ReviewInterval with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReviewInterval) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReviewInterval with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReviewIntervalMultiError,
// or nil if none found.
func (m *ReviewInterval) ValidateAll() error {
	return m.validate(true)
}

func (m *ReviewInterval) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Days

	// no validation rules for Hours

	// no validation rules for Minutes

	if len(errors) > 0 {
		return ReviewIntervalMultiError(errors)
	}

	return nil
}

// ReviewIntervalMultiError is an error wrapping multiple validation errors
// returned by ReviewInterval.ValidateAll() if the designated constraints
// aren't met.
type ReviewIntervalMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReviewIntervalMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReviewIntervalMultiError) AllErrors() []error { return m }

// ReviewIntervalValidationError is the validation error returned by
// ReviewInterval.Validate if the designated constraints aren't met.
type ReviewIntervalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReviewIntervalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReviewIntervalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReviewIntervalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReviewIntervalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReviewIntervalValidationError) ErrorName() string { return "ReviewIntervalValidationError" }

// Error satisfies the builtin error interface
func (e ReviewIntervalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReviewInterval.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReviewIntervalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReviewIntervalValidationError{}

// Validate checks the field values on LearningServiceMemoryUnitInitItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *LearningServiceMemoryUnitInitItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LearningServiceMemoryUnitInitItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// LearningServiceMemoryUnitInitItemMultiError, or nil if none found.
func (m *LearningServiceMemoryUnitInitItem) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningServiceMemoryUnitInitItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for ContentId

	// no validation rules for MasteryLevel

	// no validation rules for LearningDuration

	if len(errors) > 0 {
		return LearningServiceMemoryUnitInitItemMultiError(errors)
	}

	return nil
}

// LearningServiceMemoryUnitInitItemMultiError is an error wrapping multiple
// validation errors returned by
// LearningServiceMemoryUnitInitItem.ValidateAll() if the designated
// constraints aren't met.
type LearningServiceMemoryUnitInitItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningServiceMemoryUnitInitItemMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningServiceMemoryUnitInitItemMultiError) AllErrors() []error { return m }

// LearningServiceMemoryUnitInitItemValidationError is the validation error
// returned by LearningServiceMemoryUnitInitItem.Validate if the designated
// constraints aren't met.
type LearningServiceMemoryUnitInitItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningServiceMemoryUnitInitItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningServiceMemoryUnitInitItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearningServiceMemoryUnitInitItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningServiceMemoryUnitInitItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningServiceMemoryUnitInitItemValidationError) ErrorName() string {
	return "LearningServiceMemoryUnitInitItemValidationError"
}

// Error satisfies the builtin error interface
func (e LearningServiceMemoryUnitInitItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningServiceMemoryUnitInitItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningServiceMemoryUnitInitItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningServiceMemoryUnitInitItemValidationError{}

// Validate checks the field values on LearningProgress with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LearningProgress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LearningProgress with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LearningProgressMultiError, or nil if none found.
func (m *LearningProgress) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningProgress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Progress

	// no validation rules for CompletedItems

	// no validation rules for TotalItems

	if len(errors) > 0 {
		return LearningProgressMultiError(errors)
	}

	return nil
}

// LearningProgressMultiError is an error wrapping multiple validation errors
// returned by LearningProgress.ValidateAll() if the designated constraints
// aren't met.
type LearningProgressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningProgressMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningProgressMultiError) AllErrors() []error { return m }

// LearningProgressValidationError is the validation error returned by
// LearningProgress.Validate if the designated constraints aren't met.
type LearningProgressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningProgressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningProgressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearningProgressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningProgressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningProgressValidationError) ErrorName() string { return "LearningProgressValidationError" }

// Error satisfies the builtin error interface
func (e LearningProgressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningProgress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningProgressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningProgressValidationError{}

// Validate checks the field values on LearningServiceHanCharTestResult with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *LearningServiceHanCharTestResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LearningServiceHanCharTestResult with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// LearningServiceHanCharTestResultMultiError, or nil if none found.
func (m *LearningServiceHanCharTestResult) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningServiceHanCharTestResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HanCharId

	// no validation rules for IsRecognized

	if len(errors) > 0 {
		return LearningServiceHanCharTestResultMultiError(errors)
	}

	return nil
}

// LearningServiceHanCharTestResultMultiError is an error wrapping multiple
// validation errors returned by
// LearningServiceHanCharTestResult.ValidateAll() if the designated
// constraints aren't met.
type LearningServiceHanCharTestResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningServiceHanCharTestResultMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningServiceHanCharTestResultMultiError) AllErrors() []error { return m }

// LearningServiceHanCharTestResultValidationError is the validation error
// returned by LearningServiceHanCharTestResult.Validate if the designated
// constraints aren't met.
type LearningServiceHanCharTestResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningServiceHanCharTestResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningServiceHanCharTestResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearningServiceHanCharTestResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningServiceHanCharTestResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningServiceHanCharTestResultValidationError) ErrorName() string {
	return "LearningServiceHanCharTestResultValidationError"
}

// Error satisfies the builtin error interface
func (e LearningServiceHanCharTestResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningServiceHanCharTestResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningServiceHanCharTestResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningServiceHanCharTestResultValidationError{}

// Validate checks the field values on LearningServiceGetCourseProgressRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *LearningServiceGetCourseProgressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// LearningServiceGetCourseProgressRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// LearningServiceGetCourseProgressRequestMultiError, or nil if none found.
func (m *LearningServiceGetCourseProgressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningServiceGetCourseProgressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CourseId

	if len(errors) > 0 {
		return LearningServiceGetCourseProgressRequestMultiError(errors)
	}

	return nil
}

// LearningServiceGetCourseProgressRequestMultiError is an error wrapping
// multiple validation errors returned by
// LearningServiceGetCourseProgressRequest.ValidateAll() if the designated
// constraints aren't met.
type LearningServiceGetCourseProgressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningServiceGetCourseProgressRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningServiceGetCourseProgressRequestMultiError) AllErrors() []error { return m }

// LearningServiceGetCourseProgressRequestValidationError is the validation
// error returned by LearningServiceGetCourseProgressRequest.Validate if the
// designated constraints aren't met.
type LearningServiceGetCourseProgressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningServiceGetCourseProgressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningServiceGetCourseProgressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearningServiceGetCourseProgressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningServiceGetCourseProgressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningServiceGetCourseProgressRequestValidationError) ErrorName() string {
	return "LearningServiceGetCourseProgressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LearningServiceGetCourseProgressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningServiceGetCourseProgressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningServiceGetCourseProgressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningServiceGetCourseProgressRequestValidationError{}

// Validate checks the field values on LearningServiceGetCourseProgressResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *LearningServiceGetCourseProgressResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// LearningServiceGetCourseProgressResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// LearningServiceGetCourseProgressResponseMultiError, or nil if none found.
func (m *LearningServiceGetCourseProgressResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningServiceGetCourseProgressResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProgress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LearningServiceGetCourseProgressResponseValidationError{
					field:  "Progress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LearningServiceGetCourseProgressResponseValidationError{
					field:  "Progress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProgress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LearningServiceGetCourseProgressResponseValidationError{
				field:  "Progress",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LearningServiceGetCourseProgressResponseMultiError(errors)
	}

	return nil
}

// LearningServiceGetCourseProgressResponseMultiError is an error wrapping
// multiple validation errors returned by
// LearningServiceGetCourseProgressResponse.ValidateAll() if the designated
// constraints aren't met.
type LearningServiceGetCourseProgressResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningServiceGetCourseProgressResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningServiceGetCourseProgressResponseMultiError) AllErrors() []error { return m }

// LearningServiceGetCourseProgressResponseValidationError is the validation
// error returned by LearningServiceGetCourseProgressResponse.Validate if the
// designated constraints aren't met.
type LearningServiceGetCourseProgressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningServiceGetCourseProgressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningServiceGetCourseProgressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearningServiceGetCourseProgressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningServiceGetCourseProgressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningServiceGetCourseProgressResponseValidationError) ErrorName() string {
	return "LearningServiceGetCourseProgressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LearningServiceGetCourseProgressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningServiceGetCourseProgressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningServiceGetCourseProgressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningServiceGetCourseProgressResponseValidationError{}

// Validate checks the field values on LearningServiceGetSectionProgressRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *LearningServiceGetSectionProgressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// LearningServiceGetSectionProgressRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// LearningServiceGetSectionProgressRequestMultiError, or nil if none found.
func (m *LearningServiceGetSectionProgressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningServiceGetSectionProgressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SectionId

	if len(errors) > 0 {
		return LearningServiceGetSectionProgressRequestMultiError(errors)
	}

	return nil
}

// LearningServiceGetSectionProgressRequestMultiError is an error wrapping
// multiple validation errors returned by
// LearningServiceGetSectionProgressRequest.ValidateAll() if the designated
// constraints aren't met.
type LearningServiceGetSectionProgressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningServiceGetSectionProgressRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningServiceGetSectionProgressRequestMultiError) AllErrors() []error { return m }

// LearningServiceGetSectionProgressRequestValidationError is the validation
// error returned by LearningServiceGetSectionProgressRequest.Validate if the
// designated constraints aren't met.
type LearningServiceGetSectionProgressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningServiceGetSectionProgressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningServiceGetSectionProgressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearningServiceGetSectionProgressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningServiceGetSectionProgressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningServiceGetSectionProgressRequestValidationError) ErrorName() string {
	return "LearningServiceGetSectionProgressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LearningServiceGetSectionProgressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningServiceGetSectionProgressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningServiceGetSectionProgressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningServiceGetSectionProgressRequestValidationError{}

// Validate checks the field values on
// LearningServiceGetSectionProgressResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LearningServiceGetSectionProgressResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// LearningServiceGetSectionProgressResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// LearningServiceGetSectionProgressResponseMultiError, or nil if none found.
func (m *LearningServiceGetSectionProgressResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningServiceGetSectionProgressResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProgress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LearningServiceGetSectionProgressResponseValidationError{
					field:  "Progress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LearningServiceGetSectionProgressResponseValidationError{
					field:  "Progress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProgress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LearningServiceGetSectionProgressResponseValidationError{
				field:  "Progress",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LearningServiceGetSectionProgressResponseMultiError(errors)
	}

	return nil
}

// LearningServiceGetSectionProgressResponseMultiError is an error wrapping
// multiple validation errors returned by
// LearningServiceGetSectionProgressResponse.ValidateAll() if the designated
// constraints aren't met.
type LearningServiceGetSectionProgressResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningServiceGetSectionProgressResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningServiceGetSectionProgressResponseMultiError) AllErrors() []error { return m }

// LearningServiceGetSectionProgressResponseValidationError is the validation
// error returned by LearningServiceGetSectionProgressResponse.Validate if the
// designated constraints aren't met.
type LearningServiceGetSectionProgressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningServiceGetSectionProgressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningServiceGetSectionProgressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearningServiceGetSectionProgressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningServiceGetSectionProgressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningServiceGetSectionProgressResponseValidationError) ErrorName() string {
	return "LearningServiceGetSectionProgressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LearningServiceGetSectionProgressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningServiceGetSectionProgressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningServiceGetSectionProgressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningServiceGetSectionProgressResponseValidationError{}

// Validate checks the field values on LearningServiceUpdateUnitProgressRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *LearningServiceUpdateUnitProgressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// LearningServiceUpdateUnitProgressRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// LearningServiceUpdateUnitProgressRequestMultiError, or nil if none found.
func (m *LearningServiceUpdateUnitProgressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningServiceUpdateUnitProgressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UnitId

	// no validation rules for SectionId

	// no validation rules for Completed

	if len(errors) > 0 {
		return LearningServiceUpdateUnitProgressRequestMultiError(errors)
	}

	return nil
}

// LearningServiceUpdateUnitProgressRequestMultiError is an error wrapping
// multiple validation errors returned by
// LearningServiceUpdateUnitProgressRequest.ValidateAll() if the designated
// constraints aren't met.
type LearningServiceUpdateUnitProgressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningServiceUpdateUnitProgressRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningServiceUpdateUnitProgressRequestMultiError) AllErrors() []error { return m }

// LearningServiceUpdateUnitProgressRequestValidationError is the validation
// error returned by LearningServiceUpdateUnitProgressRequest.Validate if the
// designated constraints aren't met.
type LearningServiceUpdateUnitProgressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningServiceUpdateUnitProgressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningServiceUpdateUnitProgressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearningServiceUpdateUnitProgressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningServiceUpdateUnitProgressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningServiceUpdateUnitProgressRequestValidationError) ErrorName() string {
	return "LearningServiceUpdateUnitProgressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LearningServiceUpdateUnitProgressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningServiceUpdateUnitProgressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningServiceUpdateUnitProgressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningServiceUpdateUnitProgressRequestValidationError{}

// Validate checks the field values on
// LearningServiceUpdateUnitProgressResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LearningServiceUpdateUnitProgressResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// LearningServiceUpdateUnitProgressResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// LearningServiceUpdateUnitProgressResponseMultiError, or nil if none found.
func (m *LearningServiceUpdateUnitProgressResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningServiceUpdateUnitProgressResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LearningServiceUpdateUnitProgressResponseMultiError(errors)
	}

	return nil
}

// LearningServiceUpdateUnitProgressResponseMultiError is an error wrapping
// multiple validation errors returned by
// LearningServiceUpdateUnitProgressResponse.ValidateAll() if the designated
// constraints aren't met.
type LearningServiceUpdateUnitProgressResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningServiceUpdateUnitProgressResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningServiceUpdateUnitProgressResponseMultiError) AllErrors() []error { return m }

// LearningServiceUpdateUnitProgressResponseValidationError is the validation
// error returned by LearningServiceUpdateUnitProgressResponse.Validate if the
// designated constraints aren't met.
type LearningServiceUpdateUnitProgressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningServiceUpdateUnitProgressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningServiceUpdateUnitProgressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearningServiceUpdateUnitProgressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningServiceUpdateUnitProgressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningServiceUpdateUnitProgressResponseValidationError) ErrorName() string {
	return "LearningServiceUpdateUnitProgressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LearningServiceUpdateUnitProgressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningServiceUpdateUnitProgressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningServiceUpdateUnitProgressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningServiceUpdateUnitProgressResponseValidationError{}

// Validate checks the field values on
// LearningServiceListMemoriesForReviewRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LearningServiceListMemoriesForReviewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// LearningServiceListMemoriesForReviewRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// LearningServiceListMemoriesForReviewRequestMultiError, or nil if none found.
func (m *LearningServiceListMemoriesForReviewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningServiceListMemoriesForReviewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return LearningServiceListMemoriesForReviewRequestMultiError(errors)
	}

	return nil
}

// LearningServiceListMemoriesForReviewRequestMultiError is an error wrapping
// multiple validation errors returned by
// LearningServiceListMemoriesForReviewRequest.ValidateAll() if the designated
// constraints aren't met.
type LearningServiceListMemoriesForReviewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningServiceListMemoriesForReviewRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningServiceListMemoriesForReviewRequestMultiError) AllErrors() []error { return m }

// LearningServiceListMemoriesForReviewRequestValidationError is the validation
// error returned by LearningServiceListMemoriesForReviewRequest.Validate if
// the designated constraints aren't met.
type LearningServiceListMemoriesForReviewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningServiceListMemoriesForReviewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningServiceListMemoriesForReviewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearningServiceListMemoriesForReviewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningServiceListMemoriesForReviewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningServiceListMemoriesForReviewRequestValidationError) ErrorName() string {
	return "LearningServiceListMemoriesForReviewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LearningServiceListMemoriesForReviewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningServiceListMemoriesForReviewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningServiceListMemoriesForReviewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningServiceListMemoriesForReviewRequestValidationError{}

// Validate checks the field values on
// LearningServiceListMemoriesForReviewResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LearningServiceListMemoriesForReviewResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// LearningServiceListMemoriesForReviewResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// LearningServiceListMemoriesForReviewResponseMultiError, or nil if none found.
func (m *LearningServiceListMemoriesForReviewResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningServiceListMemoriesForReviewResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMemoryUnits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LearningServiceListMemoriesForReviewResponseValidationError{
						field:  fmt.Sprintf("MemoryUnits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LearningServiceListMemoriesForReviewResponseValidationError{
						field:  fmt.Sprintf("MemoryUnits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LearningServiceListMemoriesForReviewResponseValidationError{
					field:  fmt.Sprintf("MemoryUnits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return LearningServiceListMemoriesForReviewResponseMultiError(errors)
	}

	return nil
}

// LearningServiceListMemoriesForReviewResponseMultiError is an error wrapping
// multiple validation errors returned by
// LearningServiceListMemoriesForReviewResponse.ValidateAll() if the
// designated constraints aren't met.
type LearningServiceListMemoriesForReviewResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningServiceListMemoriesForReviewResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningServiceListMemoriesForReviewResponseMultiError) AllErrors() []error { return m }

// LearningServiceListMemoriesForReviewResponseValidationError is the
// validation error returned by
// LearningServiceListMemoriesForReviewResponse.Validate if the designated
// constraints aren't met.
type LearningServiceListMemoriesForReviewResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningServiceListMemoriesForReviewResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningServiceListMemoriesForReviewResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearningServiceListMemoriesForReviewResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningServiceListMemoriesForReviewResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningServiceListMemoriesForReviewResponseValidationError) ErrorName() string {
	return "LearningServiceListMemoriesForReviewResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LearningServiceListMemoriesForReviewResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningServiceListMemoriesForReviewResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningServiceListMemoriesForReviewResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningServiceListMemoriesForReviewResponseValidationError{}

// Validate checks the field values on LearningServiceGetMemoryStatsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *LearningServiceGetMemoryStatsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LearningServiceGetMemoryStatsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// LearningServiceGetMemoryStatsRequestMultiError, or nil if none found.
func (m *LearningServiceGetMemoryStatsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningServiceGetMemoryStatsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Type != nil {
		// no validation rules for Type
	}

	if m.Tag != nil {
		// no validation rules for Tag
	}

	if m.Category != nil {
		// no validation rules for Category
	}

	if len(errors) > 0 {
		return LearningServiceGetMemoryStatsRequestMultiError(errors)
	}

	return nil
}

// LearningServiceGetMemoryStatsRequestMultiError is an error wrapping multiple
// validation errors returned by
// LearningServiceGetMemoryStatsRequest.ValidateAll() if the designated
// constraints aren't met.
type LearningServiceGetMemoryStatsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningServiceGetMemoryStatsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningServiceGetMemoryStatsRequestMultiError) AllErrors() []error { return m }

// LearningServiceGetMemoryStatsRequestValidationError is the validation error
// returned by LearningServiceGetMemoryStatsRequest.Validate if the designated
// constraints aren't met.
type LearningServiceGetMemoryStatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningServiceGetMemoryStatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningServiceGetMemoryStatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearningServiceGetMemoryStatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningServiceGetMemoryStatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningServiceGetMemoryStatsRequestValidationError) ErrorName() string {
	return "LearningServiceGetMemoryStatsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LearningServiceGetMemoryStatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningServiceGetMemoryStatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningServiceGetMemoryStatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningServiceGetMemoryStatsRequestValidationError{}

// Validate checks the field values on LearningServiceGetMemoryStatsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *LearningServiceGetMemoryStatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LearningServiceGetMemoryStatsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// LearningServiceGetMemoryStatsResponseMultiError, or nil if none found.
func (m *LearningServiceGetMemoryStatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningServiceGetMemoryStatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalLearned

	// no validation rules for MasteredCount

	// no validation rules for NeedReviewCount

	// no validation rules for TotalStudyTime

	// no validation rules for LevelStats

	// no validation rules for RetentionRates

	if len(errors) > 0 {
		return LearningServiceGetMemoryStatsResponseMultiError(errors)
	}

	return nil
}

// LearningServiceGetMemoryStatsResponseMultiError is an error wrapping
// multiple validation errors returned by
// LearningServiceGetMemoryStatsResponse.ValidateAll() if the designated
// constraints aren't met.
type LearningServiceGetMemoryStatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningServiceGetMemoryStatsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningServiceGetMemoryStatsResponseMultiError) AllErrors() []error { return m }

// LearningServiceGetMemoryStatsResponseValidationError is the validation error
// returned by LearningServiceGetMemoryStatsResponse.Validate if the
// designated constraints aren't met.
type LearningServiceGetMemoryStatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningServiceGetMemoryStatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningServiceGetMemoryStatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearningServiceGetMemoryStatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningServiceGetMemoryStatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningServiceGetMemoryStatsResponseValidationError) ErrorName() string {
	return "LearningServiceGetMemoryStatsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LearningServiceGetMemoryStatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningServiceGetMemoryStatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningServiceGetMemoryStatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningServiceGetMemoryStatsResponseValidationError{}

// Validate checks the field values on LearningServiceGetHanCharTestRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *LearningServiceGetHanCharTestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LearningServiceGetHanCharTestRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// LearningServiceGetHanCharTestRequestMultiError, or nil if none found.
func (m *LearningServiceGetHanCharTestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningServiceGetHanCharTestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	// no validation rules for DifficultyLevel

	if len(errors) > 0 {
		return LearningServiceGetHanCharTestRequestMultiError(errors)
	}

	return nil
}

// LearningServiceGetHanCharTestRequestMultiError is an error wrapping multiple
// validation errors returned by
// LearningServiceGetHanCharTestRequest.ValidateAll() if the designated
// constraints aren't met.
type LearningServiceGetHanCharTestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningServiceGetHanCharTestRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningServiceGetHanCharTestRequestMultiError) AllErrors() []error { return m }

// LearningServiceGetHanCharTestRequestValidationError is the validation error
// returned by LearningServiceGetHanCharTestRequest.Validate if the designated
// constraints aren't met.
type LearningServiceGetHanCharTestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningServiceGetHanCharTestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningServiceGetHanCharTestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearningServiceGetHanCharTestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningServiceGetHanCharTestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningServiceGetHanCharTestRequestValidationError) ErrorName() string {
	return "LearningServiceGetHanCharTestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LearningServiceGetHanCharTestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningServiceGetHanCharTestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningServiceGetHanCharTestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningServiceGetHanCharTestRequestValidationError{}

// Validate checks the field values on LearningServiceGetHanCharTestResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *LearningServiceGetHanCharTestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LearningServiceGetHanCharTestResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// LearningServiceGetHanCharTestResponseMultiError, or nil if none found.
func (m *LearningServiceGetHanCharTestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningServiceGetHanCharTestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetHanChars() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LearningServiceGetHanCharTestResponseValidationError{
						field:  fmt.Sprintf("HanChars[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LearningServiceGetHanCharTestResponseValidationError{
						field:  fmt.Sprintf("HanChars[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LearningServiceGetHanCharTestResponseValidationError{
					field:  fmt.Sprintf("HanChars[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LearningServiceGetHanCharTestResponseMultiError(errors)
	}

	return nil
}

// LearningServiceGetHanCharTestResponseMultiError is an error wrapping
// multiple validation errors returned by
// LearningServiceGetHanCharTestResponse.ValidateAll() if the designated
// constraints aren't met.
type LearningServiceGetHanCharTestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningServiceGetHanCharTestResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningServiceGetHanCharTestResponseMultiError) AllErrors() []error { return m }

// LearningServiceGetHanCharTestResponseValidationError is the validation error
// returned by LearningServiceGetHanCharTestResponse.Validate if the
// designated constraints aren't met.
type LearningServiceGetHanCharTestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningServiceGetHanCharTestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningServiceGetHanCharTestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearningServiceGetHanCharTestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningServiceGetHanCharTestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningServiceGetHanCharTestResponseValidationError) ErrorName() string {
	return "LearningServiceGetHanCharTestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LearningServiceGetHanCharTestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningServiceGetHanCharTestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningServiceGetHanCharTestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningServiceGetHanCharTestResponseValidationError{}

// Validate checks the field values on
// LearningServiceSubmitHanCharTestResultRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LearningServiceSubmitHanCharTestResultRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// LearningServiceSubmitHanCharTestResultRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// LearningServiceSubmitHanCharTestResultRequestMultiError, or nil if none found.
func (m *LearningServiceSubmitHanCharTestResultRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningServiceSubmitHanCharTestResultRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LearningServiceSubmitHanCharTestResultRequestValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LearningServiceSubmitHanCharTestResultRequestValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LearningServiceSubmitHanCharTestResultRequestValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LearningServiceSubmitHanCharTestResultRequestMultiError(errors)
	}

	return nil
}

// LearningServiceSubmitHanCharTestResultRequestMultiError is an error wrapping
// multiple validation errors returned by
// LearningServiceSubmitHanCharTestResultRequest.ValidateAll() if the
// designated constraints aren't met.
type LearningServiceSubmitHanCharTestResultRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningServiceSubmitHanCharTestResultRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningServiceSubmitHanCharTestResultRequestMultiError) AllErrors() []error { return m }

// LearningServiceSubmitHanCharTestResultRequestValidationError is the
// validation error returned by
// LearningServiceSubmitHanCharTestResultRequest.Validate if the designated
// constraints aren't met.
type LearningServiceSubmitHanCharTestResultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningServiceSubmitHanCharTestResultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningServiceSubmitHanCharTestResultRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e LearningServiceSubmitHanCharTestResultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningServiceSubmitHanCharTestResultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningServiceSubmitHanCharTestResultRequestValidationError) ErrorName() string {
	return "LearningServiceSubmitHanCharTestResultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LearningServiceSubmitHanCharTestResultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningServiceSubmitHanCharTestResultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningServiceSubmitHanCharTestResultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningServiceSubmitHanCharTestResultRequestValidationError{}

// Validate checks the field values on
// LearningServiceSubmitHanCharTestResultResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LearningServiceSubmitHanCharTestResultResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// LearningServiceSubmitHanCharTestResultResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// LearningServiceSubmitHanCharTestResultResponseMultiError, or nil if none found.
func (m *LearningServiceSubmitHanCharTestResultResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningServiceSubmitHanCharTestResultResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LearningServiceSubmitHanCharTestResultResponseMultiError(errors)
	}

	return nil
}

// LearningServiceSubmitHanCharTestResultResponseMultiError is an error
// wrapping multiple validation errors returned by
// LearningServiceSubmitHanCharTestResultResponse.ValidateAll() if the
// designated constraints aren't met.
type LearningServiceSubmitHanCharTestResultResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningServiceSubmitHanCharTestResultResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningServiceSubmitHanCharTestResultResponseMultiError) AllErrors() []error { return m }

// LearningServiceSubmitHanCharTestResultResponseValidationError is the
// validation error returned by
// LearningServiceSubmitHanCharTestResultResponse.Validate if the designated
// constraints aren't met.
type LearningServiceSubmitHanCharTestResultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningServiceSubmitHanCharTestResultResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningServiceSubmitHanCharTestResultResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e LearningServiceSubmitHanCharTestResultResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningServiceSubmitHanCharTestResultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningServiceSubmitHanCharTestResultResponseValidationError) ErrorName() string {
	return "LearningServiceSubmitHanCharTestResultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LearningServiceSubmitHanCharTestResultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningServiceSubmitHanCharTestResultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningServiceSubmitHanCharTestResultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningServiceSubmitHanCharTestResultResponseValidationError{}

// Validate checks the field values on
// LearningServiceGetNewHanCharLearningRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LearningServiceGetNewHanCharLearningRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// LearningServiceGetNewHanCharLearningRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// LearningServiceGetNewHanCharLearningRequestMultiError, or nil if none found.
func (m *LearningServiceGetNewHanCharLearningRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningServiceGetNewHanCharLearningRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	if len(errors) > 0 {
		return LearningServiceGetNewHanCharLearningRequestMultiError(errors)
	}

	return nil
}

// LearningServiceGetNewHanCharLearningRequestMultiError is an error wrapping
// multiple validation errors returned by
// LearningServiceGetNewHanCharLearningRequest.ValidateAll() if the designated
// constraints aren't met.
type LearningServiceGetNewHanCharLearningRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningServiceGetNewHanCharLearningRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningServiceGetNewHanCharLearningRequestMultiError) AllErrors() []error { return m }

// LearningServiceGetNewHanCharLearningRequestValidationError is the validation
// error returned by LearningServiceGetNewHanCharLearningRequest.Validate if
// the designated constraints aren't met.
type LearningServiceGetNewHanCharLearningRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningServiceGetNewHanCharLearningRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningServiceGetNewHanCharLearningRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearningServiceGetNewHanCharLearningRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningServiceGetNewHanCharLearningRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningServiceGetNewHanCharLearningRequestValidationError) ErrorName() string {
	return "LearningServiceGetNewHanCharLearningRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LearningServiceGetNewHanCharLearningRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningServiceGetNewHanCharLearningRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningServiceGetNewHanCharLearningRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningServiceGetNewHanCharLearningRequestValidationError{}

// Validate checks the field values on
// LearningServiceGetNewHanCharLearningResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LearningServiceGetNewHanCharLearningResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// LearningServiceGetNewHanCharLearningResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// LearningServiceGetNewHanCharLearningResponseMultiError, or nil if none found.
func (m *LearningServiceGetNewHanCharLearningResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningServiceGetNewHanCharLearningResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetContents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LearningServiceGetNewHanCharLearningResponseValidationError{
						field:  fmt.Sprintf("Contents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LearningServiceGetNewHanCharLearningResponseValidationError{
						field:  fmt.Sprintf("Contents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LearningServiceGetNewHanCharLearningResponseValidationError{
					field:  fmt.Sprintf("Contents[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LearningServiceGetNewHanCharLearningResponseMultiError(errors)
	}

	return nil
}

// LearningServiceGetNewHanCharLearningResponseMultiError is an error wrapping
// multiple validation errors returned by
// LearningServiceGetNewHanCharLearningResponse.ValidateAll() if the
// designated constraints aren't met.
type LearningServiceGetNewHanCharLearningResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningServiceGetNewHanCharLearningResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningServiceGetNewHanCharLearningResponseMultiError) AllErrors() []error { return m }

// LearningServiceGetNewHanCharLearningResponseValidationError is the
// validation error returned by
// LearningServiceGetNewHanCharLearningResponse.Validate if the designated
// constraints aren't met.
type LearningServiceGetNewHanCharLearningResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningServiceGetNewHanCharLearningResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningServiceGetNewHanCharLearningResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearningServiceGetNewHanCharLearningResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningServiceGetNewHanCharLearningResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningServiceGetNewHanCharLearningResponseValidationError) ErrorName() string {
	return "LearningServiceGetNewHanCharLearningResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LearningServiceGetNewHanCharLearningResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningServiceGetNewHanCharLearningResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningServiceGetNewHanCharLearningResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningServiceGetNewHanCharLearningResponseValidationError{}

// Validate checks the field values on LearningServiceHanCharLearningContent
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *LearningServiceHanCharLearningContent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LearningServiceHanCharLearningContent
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// LearningServiceHanCharLearningContentMultiError, or nil if none found.
func (m *LearningServiceHanCharLearningContent) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningServiceHanCharLearningContent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HanCharId

	// no validation rules for HanChar

	// no validation rules for Pinyin

	// no validation rules for Meaning

	if len(errors) > 0 {
		return LearningServiceHanCharLearningContentMultiError(errors)
	}

	return nil
}

// LearningServiceHanCharLearningContentMultiError is an error wrapping
// multiple validation errors returned by
// LearningServiceHanCharLearningContent.ValidateAll() if the designated
// constraints aren't met.
type LearningServiceHanCharLearningContentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningServiceHanCharLearningContentMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningServiceHanCharLearningContentMultiError) AllErrors() []error { return m }

// LearningServiceHanCharLearningContentValidationError is the validation error
// returned by LearningServiceHanCharLearningContent.Validate if the
// designated constraints aren't met.
type LearningServiceHanCharLearningContentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningServiceHanCharLearningContentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningServiceHanCharLearningContentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearningServiceHanCharLearningContentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningServiceHanCharLearningContentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningServiceHanCharLearningContentValidationError) ErrorName() string {
	return "LearningServiceHanCharLearningContentValidationError"
}

// Error satisfies the builtin error interface
func (e LearningServiceHanCharLearningContentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningServiceHanCharLearningContent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningServiceHanCharLearningContentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningServiceHanCharLearningContentValidationError{}

// Validate checks the field values on
// LearningServiceSubmitNewHanCharLearningResultRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LearningServiceSubmitNewHanCharLearningResultRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// LearningServiceSubmitNewHanCharLearningResultRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in
// LearningServiceSubmitNewHanCharLearningResultRequestMultiError, or nil if
// none found.
func (m *LearningServiceSubmitNewHanCharLearningResultRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningServiceSubmitNewHanCharLearningResultRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLearningTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LearningServiceSubmitNewHanCharLearningResultRequestValidationError{
					field:  "LearningTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LearningServiceSubmitNewHanCharLearningResultRequestValidationError{
					field:  "LearningTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLearningTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LearningServiceSubmitNewHanCharLearningResultRequestValidationError{
				field:  "LearningTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StudyDuration

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LearningServiceSubmitNewHanCharLearningResultRequestValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LearningServiceSubmitNewHanCharLearningResultRequestValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LearningServiceSubmitNewHanCharLearningResultRequestValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LearningServiceSubmitNewHanCharLearningResultRequestMultiError(errors)
	}

	return nil
}

// LearningServiceSubmitNewHanCharLearningResultRequestMultiError is an error
// wrapping multiple validation errors returned by
// LearningServiceSubmitNewHanCharLearningResultRequest.ValidateAll() if the
// designated constraints aren't met.
type LearningServiceSubmitNewHanCharLearningResultRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningServiceSubmitNewHanCharLearningResultRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningServiceSubmitNewHanCharLearningResultRequestMultiError) AllErrors() []error { return m }

// LearningServiceSubmitNewHanCharLearningResultRequestValidationError is the
// validation error returned by
// LearningServiceSubmitNewHanCharLearningResultRequest.Validate if the
// designated constraints aren't met.
type LearningServiceSubmitNewHanCharLearningResultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningServiceSubmitNewHanCharLearningResultRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e LearningServiceSubmitNewHanCharLearningResultRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e LearningServiceSubmitNewHanCharLearningResultRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e LearningServiceSubmitNewHanCharLearningResultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningServiceSubmitNewHanCharLearningResultRequestValidationError) ErrorName() string {
	return "LearningServiceSubmitNewHanCharLearningResultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LearningServiceSubmitNewHanCharLearningResultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningServiceSubmitNewHanCharLearningResultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningServiceSubmitNewHanCharLearningResultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningServiceSubmitNewHanCharLearningResultRequestValidationError{}

// Validate checks the field values on LearningServiceHanCharLearningResultItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *LearningServiceHanCharLearningResultItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// LearningServiceHanCharLearningResultItem with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// LearningServiceHanCharLearningResultItemMultiError, or nil if none found.
func (m *LearningServiceHanCharLearningResultItem) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningServiceHanCharLearningResultItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NewHanCharId

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LearningServiceHanCharLearningResultItemValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LearningServiceHanCharLearningResultItemValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LearningServiceHanCharLearningResultItemValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LearningServiceHanCharLearningResultItemMultiError(errors)
	}

	return nil
}

// LearningServiceHanCharLearningResultItemMultiError is an error wrapping
// multiple validation errors returned by
// LearningServiceHanCharLearningResultItem.ValidateAll() if the designated
// constraints aren't met.
type LearningServiceHanCharLearningResultItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningServiceHanCharLearningResultItemMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningServiceHanCharLearningResultItemMultiError) AllErrors() []error { return m }

// LearningServiceHanCharLearningResultItemValidationError is the validation
// error returned by LearningServiceHanCharLearningResultItem.Validate if the
// designated constraints aren't met.
type LearningServiceHanCharLearningResultItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningServiceHanCharLearningResultItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningServiceHanCharLearningResultItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearningServiceHanCharLearningResultItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningServiceHanCharLearningResultItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningServiceHanCharLearningResultItemValidationError) ErrorName() string {
	return "LearningServiceHanCharLearningResultItemValidationError"
}

// Error satisfies the builtin error interface
func (e LearningServiceHanCharLearningResultItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningServiceHanCharLearningResultItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningServiceHanCharLearningResultItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningServiceHanCharLearningResultItemValidationError{}

// Validate checks the field values on SubmitNewHanCharLearningResultResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SubmitNewHanCharLearningResultResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// SubmitNewHanCharLearningResultResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// SubmitNewHanCharLearningResultResponseMultiError, or nil if none found.
func (m *SubmitNewHanCharLearningResultResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SubmitNewHanCharLearningResultResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SubmitNewHanCharLearningResultResponseMultiError(errors)
	}

	return nil
}

// SubmitNewHanCharLearningResultResponseMultiError is an error wrapping
// multiple validation errors returned by
// SubmitNewHanCharLearningResultResponse.ValidateAll() if the designated
// constraints aren't met.
type SubmitNewHanCharLearningResultResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubmitNewHanCharLearningResultResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubmitNewHanCharLearningResultResponseMultiError) AllErrors() []error { return m }

// SubmitNewHanCharLearningResultResponseValidationError is the validation
// error returned by SubmitNewHanCharLearningResultResponse.Validate if the
// designated constraints aren't met.
type SubmitNewHanCharLearningResultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubmitNewHanCharLearningResultResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubmitNewHanCharLearningResultResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubmitNewHanCharLearningResultResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubmitNewHanCharLearningResultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubmitNewHanCharLearningResultResponseValidationError) ErrorName() string {
	return "SubmitNewHanCharLearningResultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SubmitNewHanCharLearningResultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubmitNewHanCharLearningResultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubmitNewHanCharLearningResultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubmitNewHanCharLearningResultResponseValidationError{}

// Validate checks the field values on LearningServiceHanCharLearningResult
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *LearningServiceHanCharLearningResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LearningServiceHanCharLearningResult
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// LearningServiceHanCharLearningResultMultiError, or nil if none found.
func (m *LearningServiceHanCharLearningResult) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningServiceHanCharLearningResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FirstTryCorrect

	// no validation rules for SecondTryCorrect

	// no validation rules for ThirdTryCorrect

	// no validation rules for Mastered

	// no validation rules for ErrorCount

	// no validation rules for CorrectCount

	if len(errors) > 0 {
		return LearningServiceHanCharLearningResultMultiError(errors)
	}

	return nil
}

// LearningServiceHanCharLearningResultMultiError is an error wrapping multiple
// validation errors returned by
// LearningServiceHanCharLearningResult.ValidateAll() if the designated
// constraints aren't met.
type LearningServiceHanCharLearningResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningServiceHanCharLearningResultMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningServiceHanCharLearningResultMultiError) AllErrors() []error { return m }

// LearningServiceHanCharLearningResultValidationError is the validation error
// returned by LearningServiceHanCharLearningResult.Validate if the designated
// constraints aren't met.
type LearningServiceHanCharLearningResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningServiceHanCharLearningResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningServiceHanCharLearningResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearningServiceHanCharLearningResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningServiceHanCharLearningResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningServiceHanCharLearningResultValidationError) ErrorName() string {
	return "LearningServiceHanCharLearningResultValidationError"
}

// Error satisfies the builtin error interface
func (e LearningServiceHanCharLearningResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningServiceHanCharLearningResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningServiceHanCharLearningResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningServiceHanCharLearningResultValidationError{}

// Validate checks the field values on
// LearningServiceInitializeMemoryUnitRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LearningServiceInitializeMemoryUnitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// LearningServiceInitializeMemoryUnitRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// LearningServiceInitializeMemoryUnitRequestMultiError, or nil if none found.
func (m *LearningServiceInitializeMemoryUnitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningServiceInitializeMemoryUnitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LearningServiceInitializeMemoryUnitRequestValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LearningServiceInitializeMemoryUnitRequestValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LearningServiceInitializeMemoryUnitRequestValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LearningServiceInitializeMemoryUnitRequestMultiError(errors)
	}

	return nil
}

// LearningServiceInitializeMemoryUnitRequestMultiError is an error wrapping
// multiple validation errors returned by
// LearningServiceInitializeMemoryUnitRequest.ValidateAll() if the designated
// constraints aren't met.
type LearningServiceInitializeMemoryUnitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningServiceInitializeMemoryUnitRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningServiceInitializeMemoryUnitRequestMultiError) AllErrors() []error { return m }

// LearningServiceInitializeMemoryUnitRequestValidationError is the validation
// error returned by LearningServiceInitializeMemoryUnitRequest.Validate if
// the designated constraints aren't met.
type LearningServiceInitializeMemoryUnitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningServiceInitializeMemoryUnitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningServiceInitializeMemoryUnitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearningServiceInitializeMemoryUnitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningServiceInitializeMemoryUnitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningServiceInitializeMemoryUnitRequestValidationError) ErrorName() string {
	return "LearningServiceInitializeMemoryUnitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LearningServiceInitializeMemoryUnitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningServiceInitializeMemoryUnitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningServiceInitializeMemoryUnitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningServiceInitializeMemoryUnitRequestValidationError{}

// Validate checks the field values on
// LearningServiceInitializeMemoryUnitResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LearningServiceInitializeMemoryUnitResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// LearningServiceInitializeMemoryUnitResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// LearningServiceInitializeMemoryUnitResponseMultiError, or nil if none found.
func (m *LearningServiceInitializeMemoryUnitResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningServiceInitializeMemoryUnitResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LearningServiceInitializeMemoryUnitResponseMultiError(errors)
	}

	return nil
}

// LearningServiceInitializeMemoryUnitResponseMultiError is an error wrapping
// multiple validation errors returned by
// LearningServiceInitializeMemoryUnitResponse.ValidateAll() if the designated
// constraints aren't met.
type LearningServiceInitializeMemoryUnitResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningServiceInitializeMemoryUnitResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningServiceInitializeMemoryUnitResponseMultiError) AllErrors() []error { return m }

// LearningServiceInitializeMemoryUnitResponseValidationError is the validation
// error returned by LearningServiceInitializeMemoryUnitResponse.Validate if
// the designated constraints aren't met.
type LearningServiceInitializeMemoryUnitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningServiceInitializeMemoryUnitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningServiceInitializeMemoryUnitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearningServiceInitializeMemoryUnitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningServiceInitializeMemoryUnitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningServiceInitializeMemoryUnitResponseValidationError) ErrorName() string {
	return "LearningServiceInitializeMemoryUnitResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LearningServiceInitializeMemoryUnitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningServiceInitializeMemoryUnitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningServiceInitializeMemoryUnitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningServiceInitializeMemoryUnitResponseValidationError{}

// Validate checks the field values on LearningServiceReviewMemoryUnitsRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *LearningServiceReviewMemoryUnitsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// LearningServiceReviewMemoryUnitsRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// LearningServiceReviewMemoryUnitsRequestMultiError, or nil if none found.
func (m *LearningServiceReviewMemoryUnitsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningServiceReviewMemoryUnitsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LearningServiceReviewMemoryUnitsRequestValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LearningServiceReviewMemoryUnitsRequestValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LearningServiceReviewMemoryUnitsRequestValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LearningServiceReviewMemoryUnitsRequestMultiError(errors)
	}

	return nil
}

// LearningServiceReviewMemoryUnitsRequestMultiError is an error wrapping
// multiple validation errors returned by
// LearningServiceReviewMemoryUnitsRequest.ValidateAll() if the designated
// constraints aren't met.
type LearningServiceReviewMemoryUnitsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningServiceReviewMemoryUnitsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningServiceReviewMemoryUnitsRequestMultiError) AllErrors() []error { return m }

// LearningServiceReviewMemoryUnitsRequestValidationError is the validation
// error returned by LearningServiceReviewMemoryUnitsRequest.Validate if the
// designated constraints aren't met.
type LearningServiceReviewMemoryUnitsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningServiceReviewMemoryUnitsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningServiceReviewMemoryUnitsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearningServiceReviewMemoryUnitsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningServiceReviewMemoryUnitsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningServiceReviewMemoryUnitsRequestValidationError) ErrorName() string {
	return "LearningServiceReviewMemoryUnitsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LearningServiceReviewMemoryUnitsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningServiceReviewMemoryUnitsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningServiceReviewMemoryUnitsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningServiceReviewMemoryUnitsRequestValidationError{}

// Validate checks the field values on LearningServiceMemoryUnitReviewItem with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *LearningServiceMemoryUnitReviewItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LearningServiceMemoryUnitReviewItem
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// LearningServiceMemoryUnitReviewItemMultiError, or nil if none found.
func (m *LearningServiceMemoryUnitReviewItem) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningServiceMemoryUnitReviewItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MemoryUnitId

	// no validation rules for Result

	// no validation rules for ReviewDuration

	if len(errors) > 0 {
		return LearningServiceMemoryUnitReviewItemMultiError(errors)
	}

	return nil
}

// LearningServiceMemoryUnitReviewItemMultiError is an error wrapping multiple
// validation errors returned by
// LearningServiceMemoryUnitReviewItem.ValidateAll() if the designated
// constraints aren't met.
type LearningServiceMemoryUnitReviewItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningServiceMemoryUnitReviewItemMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningServiceMemoryUnitReviewItemMultiError) AllErrors() []error { return m }

// LearningServiceMemoryUnitReviewItemValidationError is the validation error
// returned by LearningServiceMemoryUnitReviewItem.Validate if the designated
// constraints aren't met.
type LearningServiceMemoryUnitReviewItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningServiceMemoryUnitReviewItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningServiceMemoryUnitReviewItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearningServiceMemoryUnitReviewItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningServiceMemoryUnitReviewItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningServiceMemoryUnitReviewItemValidationError) ErrorName() string {
	return "LearningServiceMemoryUnitReviewItemValidationError"
}

// Error satisfies the builtin error interface
func (e LearningServiceMemoryUnitReviewItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningServiceMemoryUnitReviewItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningServiceMemoryUnitReviewItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningServiceMemoryUnitReviewItemValidationError{}

// Validate checks the field values on LearningServiceReviewMemoryUnitsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *LearningServiceReviewMemoryUnitsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// LearningServiceReviewMemoryUnitsResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// LearningServiceReviewMemoryUnitsResponseMultiError, or nil if none found.
func (m *LearningServiceReviewMemoryUnitsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningServiceReviewMemoryUnitsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LearningServiceReviewMemoryUnitsResponseMultiError(errors)
	}

	return nil
}

// LearningServiceReviewMemoryUnitsResponseMultiError is an error wrapping
// multiple validation errors returned by
// LearningServiceReviewMemoryUnitsResponse.ValidateAll() if the designated
// constraints aren't met.
type LearningServiceReviewMemoryUnitsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningServiceReviewMemoryUnitsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningServiceReviewMemoryUnitsResponseMultiError) AllErrors() []error { return m }

// LearningServiceReviewMemoryUnitsResponseValidationError is the validation
// error returned by LearningServiceReviewMemoryUnitsResponse.Validate if the
// designated constraints aren't met.
type LearningServiceReviewMemoryUnitsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningServiceReviewMemoryUnitsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningServiceReviewMemoryUnitsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearningServiceReviewMemoryUnitsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningServiceReviewMemoryUnitsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningServiceReviewMemoryUnitsResponseValidationError) ErrorName() string {
	return "LearningServiceReviewMemoryUnitsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LearningServiceReviewMemoryUnitsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningServiceReviewMemoryUnitsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningServiceReviewMemoryUnitsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningServiceReviewMemoryUnitsResponseValidationError{}

// Validate checks the field values on LearningServiceGetWordTestRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *LearningServiceGetWordTestRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LearningServiceGetWordTestRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// LearningServiceGetWordTestRequestMultiError, or nil if none found.
func (m *LearningServiceGetWordTestRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningServiceGetWordTestRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	// no validation rules for DifficultyLevel

	if len(errors) > 0 {
		return LearningServiceGetWordTestRequestMultiError(errors)
	}

	return nil
}

// LearningServiceGetWordTestRequestMultiError is an error wrapping multiple
// validation errors returned by
// LearningServiceGetWordTestRequest.ValidateAll() if the designated
// constraints aren't met.
type LearningServiceGetWordTestRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningServiceGetWordTestRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningServiceGetWordTestRequestMultiError) AllErrors() []error { return m }

// LearningServiceGetWordTestRequestValidationError is the validation error
// returned by LearningServiceGetWordTestRequest.Validate if the designated
// constraints aren't met.
type LearningServiceGetWordTestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningServiceGetWordTestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningServiceGetWordTestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearningServiceGetWordTestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningServiceGetWordTestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningServiceGetWordTestRequestValidationError) ErrorName() string {
	return "LearningServiceGetWordTestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LearningServiceGetWordTestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningServiceGetWordTestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningServiceGetWordTestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningServiceGetWordTestRequestValidationError{}

// Validate checks the field values on LearningServiceGetWordTestResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *LearningServiceGetWordTestResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LearningServiceGetWordTestResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// LearningServiceGetWordTestResponseMultiError, or nil if none found.
func (m *LearningServiceGetWordTestResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningServiceGetWordTestResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetWords() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LearningServiceGetWordTestResponseValidationError{
						field:  fmt.Sprintf("Words[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LearningServiceGetWordTestResponseValidationError{
						field:  fmt.Sprintf("Words[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LearningServiceGetWordTestResponseValidationError{
					field:  fmt.Sprintf("Words[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LearningServiceGetWordTestResponseMultiError(errors)
	}

	return nil
}

// LearningServiceGetWordTestResponseMultiError is an error wrapping multiple
// validation errors returned by
// LearningServiceGetWordTestResponse.ValidateAll() if the designated
// constraints aren't met.
type LearningServiceGetWordTestResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningServiceGetWordTestResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningServiceGetWordTestResponseMultiError) AllErrors() []error { return m }

// LearningServiceGetWordTestResponseValidationError is the validation error
// returned by LearningServiceGetWordTestResponse.Validate if the designated
// constraints aren't met.
type LearningServiceGetWordTestResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningServiceGetWordTestResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningServiceGetWordTestResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearningServiceGetWordTestResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningServiceGetWordTestResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningServiceGetWordTestResponseValidationError) ErrorName() string {
	return "LearningServiceGetWordTestResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LearningServiceGetWordTestResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningServiceGetWordTestResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningServiceGetWordTestResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningServiceGetWordTestResponseValidationError{}
