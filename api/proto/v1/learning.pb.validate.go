// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/v1/learning.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on LearningProgress with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LearningProgress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LearningProgress with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LearningProgressMultiError, or nil if none found.
func (m *LearningProgress) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningProgress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Progress

	// no validation rules for CompletedItems

	// no validation rules for TotalItems

	if len(errors) > 0 {
		return LearningProgressMultiError(errors)
	}

	return nil
}

// LearningProgressMultiError is an error wrapping multiple validation errors
// returned by LearningProgress.ValidateAll() if the designated constraints
// aren't met.
type LearningProgressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningProgressMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningProgressMultiError) AllErrors() []error { return m }

// LearningProgressValidationError is the validation error returned by
// LearningProgress.Validate if the designated constraints aren't met.
type LearningProgressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningProgressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningProgressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearningProgressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningProgressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningProgressValidationError) ErrorName() string { return "LearningProgressValidationError" }

// Error satisfies the builtin error interface
func (e LearningProgressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningProgress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningProgressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningProgressValidationError{}

// Validate checks the field values on LearningUnitStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LearningUnitStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LearningUnitStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LearningUnitStatusMultiError, or nil if none found.
func (m *LearningUnitStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningUnitStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Completed

	if all {
		switch v := interface{}(m.GetLastAccessTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LearningUnitStatusValidationError{
					field:  "LastAccessTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LearningUnitStatusValidationError{
					field:  "LastAccessTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastAccessTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LearningUnitStatusValidationError{
				field:  "LastAccessTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StudyDuration

	if len(errors) > 0 {
		return LearningUnitStatusMultiError(errors)
	}

	return nil
}

// LearningUnitStatusMultiError is an error wrapping multiple validation errors
// returned by LearningUnitStatus.ValidateAll() if the designated constraints
// aren't met.
type LearningUnitStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningUnitStatusMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningUnitStatusMultiError) AllErrors() []error { return m }

// LearningUnitStatusValidationError is the validation error returned by
// LearningUnitStatus.Validate if the designated constraints aren't met.
type LearningUnitStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningUnitStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningUnitStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearningUnitStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningUnitStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningUnitStatusValidationError) ErrorName() string {
	return "LearningUnitStatusValidationError"
}

// Error satisfies the builtin error interface
func (e LearningUnitStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningUnitStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningUnitStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningUnitStatusValidationError{}

// Validate checks the field values on LearningServiceGetCourseProgressRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *LearningServiceGetCourseProgressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// LearningServiceGetCourseProgressRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// LearningServiceGetCourseProgressRequestMultiError, or nil if none found.
func (m *LearningServiceGetCourseProgressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningServiceGetCourseProgressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CourseId

	if len(errors) > 0 {
		return LearningServiceGetCourseProgressRequestMultiError(errors)
	}

	return nil
}

// LearningServiceGetCourseProgressRequestMultiError is an error wrapping
// multiple validation errors returned by
// LearningServiceGetCourseProgressRequest.ValidateAll() if the designated
// constraints aren't met.
type LearningServiceGetCourseProgressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningServiceGetCourseProgressRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningServiceGetCourseProgressRequestMultiError) AllErrors() []error { return m }

// LearningServiceGetCourseProgressRequestValidationError is the validation
// error returned by LearningServiceGetCourseProgressRequest.Validate if the
// designated constraints aren't met.
type LearningServiceGetCourseProgressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningServiceGetCourseProgressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningServiceGetCourseProgressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearningServiceGetCourseProgressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningServiceGetCourseProgressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningServiceGetCourseProgressRequestValidationError) ErrorName() string {
	return "LearningServiceGetCourseProgressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LearningServiceGetCourseProgressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningServiceGetCourseProgressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningServiceGetCourseProgressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningServiceGetCourseProgressRequestValidationError{}

// Validate checks the field values on LearningServiceGetCourseProgressResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *LearningServiceGetCourseProgressResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// LearningServiceGetCourseProgressResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// LearningServiceGetCourseProgressResponseMultiError, or nil if none found.
func (m *LearningServiceGetCourseProgressResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningServiceGetCourseProgressResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProgress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LearningServiceGetCourseProgressResponseValidationError{
					field:  "Progress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LearningServiceGetCourseProgressResponseValidationError{
					field:  "Progress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProgress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LearningServiceGetCourseProgressResponseValidationError{
				field:  "Progress",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LearningServiceGetCourseProgressResponseMultiError(errors)
	}

	return nil
}

// LearningServiceGetCourseProgressResponseMultiError is an error wrapping
// multiple validation errors returned by
// LearningServiceGetCourseProgressResponse.ValidateAll() if the designated
// constraints aren't met.
type LearningServiceGetCourseProgressResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningServiceGetCourseProgressResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningServiceGetCourseProgressResponseMultiError) AllErrors() []error { return m }

// LearningServiceGetCourseProgressResponseValidationError is the validation
// error returned by LearningServiceGetCourseProgressResponse.Validate if the
// designated constraints aren't met.
type LearningServiceGetCourseProgressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningServiceGetCourseProgressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningServiceGetCourseProgressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearningServiceGetCourseProgressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningServiceGetCourseProgressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningServiceGetCourseProgressResponseValidationError) ErrorName() string {
	return "LearningServiceGetCourseProgressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LearningServiceGetCourseProgressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningServiceGetCourseProgressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningServiceGetCourseProgressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningServiceGetCourseProgressResponseValidationError{}

// Validate checks the field values on LearningServiceGetSectionProgressRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *LearningServiceGetSectionProgressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// LearningServiceGetSectionProgressRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// LearningServiceGetSectionProgressRequestMultiError, or nil if none found.
func (m *LearningServiceGetSectionProgressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningServiceGetSectionProgressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SectionId

	if len(errors) > 0 {
		return LearningServiceGetSectionProgressRequestMultiError(errors)
	}

	return nil
}

// LearningServiceGetSectionProgressRequestMultiError is an error wrapping
// multiple validation errors returned by
// LearningServiceGetSectionProgressRequest.ValidateAll() if the designated
// constraints aren't met.
type LearningServiceGetSectionProgressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningServiceGetSectionProgressRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningServiceGetSectionProgressRequestMultiError) AllErrors() []error { return m }

// LearningServiceGetSectionProgressRequestValidationError is the validation
// error returned by LearningServiceGetSectionProgressRequest.Validate if the
// designated constraints aren't met.
type LearningServiceGetSectionProgressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningServiceGetSectionProgressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningServiceGetSectionProgressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearningServiceGetSectionProgressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningServiceGetSectionProgressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningServiceGetSectionProgressRequestValidationError) ErrorName() string {
	return "LearningServiceGetSectionProgressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LearningServiceGetSectionProgressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningServiceGetSectionProgressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningServiceGetSectionProgressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningServiceGetSectionProgressRequestValidationError{}

// Validate checks the field values on
// LearningServiceGetSectionProgressResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LearningServiceGetSectionProgressResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// LearningServiceGetSectionProgressResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// LearningServiceGetSectionProgressResponseMultiError, or nil if none found.
func (m *LearningServiceGetSectionProgressResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningServiceGetSectionProgressResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProgress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LearningServiceGetSectionProgressResponseValidationError{
					field:  "Progress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LearningServiceGetSectionProgressResponseValidationError{
					field:  "Progress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProgress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LearningServiceGetSectionProgressResponseValidationError{
				field:  "Progress",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LearningServiceGetSectionProgressResponseMultiError(errors)
	}

	return nil
}

// LearningServiceGetSectionProgressResponseMultiError is an error wrapping
// multiple validation errors returned by
// LearningServiceGetSectionProgressResponse.ValidateAll() if the designated
// constraints aren't met.
type LearningServiceGetSectionProgressResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningServiceGetSectionProgressResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningServiceGetSectionProgressResponseMultiError) AllErrors() []error { return m }

// LearningServiceGetSectionProgressResponseValidationError is the validation
// error returned by LearningServiceGetSectionProgressResponse.Validate if the
// designated constraints aren't met.
type LearningServiceGetSectionProgressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningServiceGetSectionProgressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningServiceGetSectionProgressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearningServiceGetSectionProgressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningServiceGetSectionProgressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningServiceGetSectionProgressResponseValidationError) ErrorName() string {
	return "LearningServiceGetSectionProgressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LearningServiceGetSectionProgressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningServiceGetSectionProgressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningServiceGetSectionProgressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningServiceGetSectionProgressResponseValidationError{}

// Validate checks the field values on LearningServiceGetUnitProgressRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *LearningServiceGetUnitProgressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LearningServiceGetUnitProgressRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// LearningServiceGetUnitProgressRequestMultiError, or nil if none found.
func (m *LearningServiceGetUnitProgressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningServiceGetUnitProgressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UnitId

	if len(errors) > 0 {
		return LearningServiceGetUnitProgressRequestMultiError(errors)
	}

	return nil
}

// LearningServiceGetUnitProgressRequestMultiError is an error wrapping
// multiple validation errors returned by
// LearningServiceGetUnitProgressRequest.ValidateAll() if the designated
// constraints aren't met.
type LearningServiceGetUnitProgressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningServiceGetUnitProgressRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningServiceGetUnitProgressRequestMultiError) AllErrors() []error { return m }

// LearningServiceGetUnitProgressRequestValidationError is the validation error
// returned by LearningServiceGetUnitProgressRequest.Validate if the
// designated constraints aren't met.
type LearningServiceGetUnitProgressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningServiceGetUnitProgressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningServiceGetUnitProgressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearningServiceGetUnitProgressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningServiceGetUnitProgressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningServiceGetUnitProgressRequestValidationError) ErrorName() string {
	return "LearningServiceGetUnitProgressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LearningServiceGetUnitProgressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningServiceGetUnitProgressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningServiceGetUnitProgressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningServiceGetUnitProgressRequestValidationError{}

// Validate checks the field values on LearningServiceGetUnitProgressResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *LearningServiceGetUnitProgressResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// LearningServiceGetUnitProgressResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// LearningServiceGetUnitProgressResponseMultiError, or nil if none found.
func (m *LearningServiceGetUnitProgressResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningServiceGetUnitProgressResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LearningServiceGetUnitProgressResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LearningServiceGetUnitProgressResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LearningServiceGetUnitProgressResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LearningServiceGetUnitProgressResponseMultiError(errors)
	}

	return nil
}

// LearningServiceGetUnitProgressResponseMultiError is an error wrapping
// multiple validation errors returned by
// LearningServiceGetUnitProgressResponse.ValidateAll() if the designated
// constraints aren't met.
type LearningServiceGetUnitProgressResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningServiceGetUnitProgressResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningServiceGetUnitProgressResponseMultiError) AllErrors() []error { return m }

// LearningServiceGetUnitProgressResponseValidationError is the validation
// error returned by LearningServiceGetUnitProgressResponse.Validate if the
// designated constraints aren't met.
type LearningServiceGetUnitProgressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningServiceGetUnitProgressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningServiceGetUnitProgressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearningServiceGetUnitProgressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningServiceGetUnitProgressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningServiceGetUnitProgressResponseValidationError) ErrorName() string {
	return "LearningServiceGetUnitProgressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LearningServiceGetUnitProgressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningServiceGetUnitProgressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningServiceGetUnitProgressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningServiceGetUnitProgressResponseValidationError{}

// Validate checks the field values on LearningServiceUpdateUnitProgressRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *LearningServiceUpdateUnitProgressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// LearningServiceUpdateUnitProgressRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// LearningServiceUpdateUnitProgressRequestMultiError, or nil if none found.
func (m *LearningServiceUpdateUnitProgressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningServiceUpdateUnitProgressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UnitId

	// no validation rules for Completed

	// no validation rules for StudyDuration

	if len(errors) > 0 {
		return LearningServiceUpdateUnitProgressRequestMultiError(errors)
	}

	return nil
}

// LearningServiceUpdateUnitProgressRequestMultiError is an error wrapping
// multiple validation errors returned by
// LearningServiceUpdateUnitProgressRequest.ValidateAll() if the designated
// constraints aren't met.
type LearningServiceUpdateUnitProgressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningServiceUpdateUnitProgressRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningServiceUpdateUnitProgressRequestMultiError) AllErrors() []error { return m }

// LearningServiceUpdateUnitProgressRequestValidationError is the validation
// error returned by LearningServiceUpdateUnitProgressRequest.Validate if the
// designated constraints aren't met.
type LearningServiceUpdateUnitProgressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningServiceUpdateUnitProgressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningServiceUpdateUnitProgressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearningServiceUpdateUnitProgressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningServiceUpdateUnitProgressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningServiceUpdateUnitProgressRequestValidationError) ErrorName() string {
	return "LearningServiceUpdateUnitProgressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LearningServiceUpdateUnitProgressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningServiceUpdateUnitProgressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningServiceUpdateUnitProgressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningServiceUpdateUnitProgressRequestValidationError{}

// Validate checks the field values on
// LearningServiceUpdateUnitProgressResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LearningServiceUpdateUnitProgressResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// LearningServiceUpdateUnitProgressResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// LearningServiceUpdateUnitProgressResponseMultiError, or nil if none found.
func (m *LearningServiceUpdateUnitProgressResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningServiceUpdateUnitProgressResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LearningServiceUpdateUnitProgressResponseMultiError(errors)
	}

	return nil
}

// LearningServiceUpdateUnitProgressResponseMultiError is an error wrapping
// multiple validation errors returned by
// LearningServiceUpdateUnitProgressResponse.ValidateAll() if the designated
// constraints aren't met.
type LearningServiceUpdateUnitProgressResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningServiceUpdateUnitProgressResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningServiceUpdateUnitProgressResponseMultiError) AllErrors() []error { return m }

// LearningServiceUpdateUnitProgressResponseValidationError is the validation
// error returned by LearningServiceUpdateUnitProgressResponse.Validate if the
// designated constraints aren't met.
type LearningServiceUpdateUnitProgressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningServiceUpdateUnitProgressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningServiceUpdateUnitProgressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearningServiceUpdateUnitProgressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningServiceUpdateUnitProgressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningServiceUpdateUnitProgressResponseValidationError) ErrorName() string {
	return "LearningServiceUpdateUnitProgressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LearningServiceUpdateUnitProgressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningServiceUpdateUnitProgressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningServiceUpdateUnitProgressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningServiceUpdateUnitProgressResponseValidationError{}
