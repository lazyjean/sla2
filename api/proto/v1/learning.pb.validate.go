// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/v1/learning.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on MemoryUnit with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MemoryUnit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemoryUnit with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MemoryUnitMultiError, or
// nil if none found.
func (m *MemoryUnit) ValidateAll() error {
	return m.validate(true)
}

func (m *MemoryUnit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for Type

	// no validation rules for ContentId

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemoryUnitValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemoryUnitValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemoryUnitValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemoryUnitValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemoryUnitValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemoryUnitValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MasteryLevel

	// no validation rules for ReviewCount

	if all {
		switch v := interface{}(m.GetNextReviewAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemoryUnitValidationError{
					field:  "NextReviewAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemoryUnitValidationError{
					field:  "NextReviewAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNextReviewAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemoryUnitValidationError{
				field:  "NextReviewAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLastReviewAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemoryUnitValidationError{
					field:  "LastReviewAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemoryUnitValidationError{
					field:  "LastReviewAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastReviewAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemoryUnitValidationError{
				field:  "LastReviewAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StudyDuration

	// no validation rules for RetentionRate

	// no validation rules for ConsecutiveCorrect

	// no validation rules for ConsecutiveWrong

	if len(errors) > 0 {
		return MemoryUnitMultiError(errors)
	}

	return nil
}

// MemoryUnitMultiError is an error wrapping multiple validation errors
// returned by MemoryUnit.ValidateAll() if the designated constraints aren't met.
type MemoryUnitMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemoryUnitMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemoryUnitMultiError) AllErrors() []error { return m }

// MemoryUnitValidationError is the validation error returned by
// MemoryUnit.Validate if the designated constraints aren't met.
type MemoryUnitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemoryUnitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemoryUnitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemoryUnitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemoryUnitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemoryUnitValidationError) ErrorName() string { return "MemoryUnitValidationError" }

// Error satisfies the builtin error interface
func (e MemoryUnitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemoryUnit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemoryUnitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemoryUnitValidationError{}

// Validate checks the field values on ReviewInterval with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReviewInterval) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReviewInterval with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReviewIntervalMultiError,
// or nil if none found.
func (m *ReviewInterval) ValidateAll() error {
	return m.validate(true)
}

func (m *ReviewInterval) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Days

	// no validation rules for Hours

	// no validation rules for Minutes

	if len(errors) > 0 {
		return ReviewIntervalMultiError(errors)
	}

	return nil
}

// ReviewIntervalMultiError is an error wrapping multiple validation errors
// returned by ReviewInterval.ValidateAll() if the designated constraints
// aren't met.
type ReviewIntervalMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReviewIntervalMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReviewIntervalMultiError) AllErrors() []error { return m }

// ReviewIntervalValidationError is the validation error returned by
// ReviewInterval.Validate if the designated constraints aren't met.
type ReviewIntervalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReviewIntervalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReviewIntervalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReviewIntervalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReviewIntervalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReviewIntervalValidationError) ErrorName() string { return "ReviewIntervalValidationError" }

// Error satisfies the builtin error interface
func (e ReviewIntervalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReviewInterval.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReviewIntervalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReviewIntervalValidationError{}

// Validate checks the field values on LearningProgress with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LearningProgress) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LearningProgress with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LearningProgressMultiError, or nil if none found.
func (m *LearningProgress) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningProgress) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Progress

	// no validation rules for CompletedItems

	// no validation rules for TotalItems

	if len(errors) > 0 {
		return LearningProgressMultiError(errors)
	}

	return nil
}

// LearningProgressMultiError is an error wrapping multiple validation errors
// returned by LearningProgress.ValidateAll() if the designated constraints
// aren't met.
type LearningProgressMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningProgressMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningProgressMultiError) AllErrors() []error { return m }

// LearningProgressValidationError is the validation error returned by
// LearningProgress.Validate if the designated constraints aren't met.
type LearningProgressValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningProgressValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningProgressValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearningProgressValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningProgressValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningProgressValidationError) ErrorName() string { return "LearningProgressValidationError" }

// Error satisfies the builtin error interface
func (e LearningProgressValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningProgress.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningProgressValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningProgressValidationError{}

// Validate checks the field values on LearningServiceGetCourseProgressRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *LearningServiceGetCourseProgressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// LearningServiceGetCourseProgressRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// LearningServiceGetCourseProgressRequestMultiError, or nil if none found.
func (m *LearningServiceGetCourseProgressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningServiceGetCourseProgressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CourseId

	if len(errors) > 0 {
		return LearningServiceGetCourseProgressRequestMultiError(errors)
	}

	return nil
}

// LearningServiceGetCourseProgressRequestMultiError is an error wrapping
// multiple validation errors returned by
// LearningServiceGetCourseProgressRequest.ValidateAll() if the designated
// constraints aren't met.
type LearningServiceGetCourseProgressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningServiceGetCourseProgressRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningServiceGetCourseProgressRequestMultiError) AllErrors() []error { return m }

// LearningServiceGetCourseProgressRequestValidationError is the validation
// error returned by LearningServiceGetCourseProgressRequest.Validate if the
// designated constraints aren't met.
type LearningServiceGetCourseProgressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningServiceGetCourseProgressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningServiceGetCourseProgressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearningServiceGetCourseProgressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningServiceGetCourseProgressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningServiceGetCourseProgressRequestValidationError) ErrorName() string {
	return "LearningServiceGetCourseProgressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LearningServiceGetCourseProgressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningServiceGetCourseProgressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningServiceGetCourseProgressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningServiceGetCourseProgressRequestValidationError{}

// Validate checks the field values on LearningServiceGetCourseProgressResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *LearningServiceGetCourseProgressResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// LearningServiceGetCourseProgressResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// LearningServiceGetCourseProgressResponseMultiError, or nil if none found.
func (m *LearningServiceGetCourseProgressResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningServiceGetCourseProgressResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProgress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LearningServiceGetCourseProgressResponseValidationError{
					field:  "Progress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LearningServiceGetCourseProgressResponseValidationError{
					field:  "Progress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProgress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LearningServiceGetCourseProgressResponseValidationError{
				field:  "Progress",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LearningServiceGetCourseProgressResponseMultiError(errors)
	}

	return nil
}

// LearningServiceGetCourseProgressResponseMultiError is an error wrapping
// multiple validation errors returned by
// LearningServiceGetCourseProgressResponse.ValidateAll() if the designated
// constraints aren't met.
type LearningServiceGetCourseProgressResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningServiceGetCourseProgressResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningServiceGetCourseProgressResponseMultiError) AllErrors() []error { return m }

// LearningServiceGetCourseProgressResponseValidationError is the validation
// error returned by LearningServiceGetCourseProgressResponse.Validate if the
// designated constraints aren't met.
type LearningServiceGetCourseProgressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningServiceGetCourseProgressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningServiceGetCourseProgressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearningServiceGetCourseProgressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningServiceGetCourseProgressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningServiceGetCourseProgressResponseValidationError) ErrorName() string {
	return "LearningServiceGetCourseProgressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LearningServiceGetCourseProgressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningServiceGetCourseProgressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningServiceGetCourseProgressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningServiceGetCourseProgressResponseValidationError{}

// Validate checks the field values on LearningServiceGetSectionProgressRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *LearningServiceGetSectionProgressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// LearningServiceGetSectionProgressRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// LearningServiceGetSectionProgressRequestMultiError, or nil if none found.
func (m *LearningServiceGetSectionProgressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningServiceGetSectionProgressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SectionId

	if len(errors) > 0 {
		return LearningServiceGetSectionProgressRequestMultiError(errors)
	}

	return nil
}

// LearningServiceGetSectionProgressRequestMultiError is an error wrapping
// multiple validation errors returned by
// LearningServiceGetSectionProgressRequest.ValidateAll() if the designated
// constraints aren't met.
type LearningServiceGetSectionProgressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningServiceGetSectionProgressRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningServiceGetSectionProgressRequestMultiError) AllErrors() []error { return m }

// LearningServiceGetSectionProgressRequestValidationError is the validation
// error returned by LearningServiceGetSectionProgressRequest.Validate if the
// designated constraints aren't met.
type LearningServiceGetSectionProgressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningServiceGetSectionProgressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningServiceGetSectionProgressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearningServiceGetSectionProgressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningServiceGetSectionProgressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningServiceGetSectionProgressRequestValidationError) ErrorName() string {
	return "LearningServiceGetSectionProgressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LearningServiceGetSectionProgressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningServiceGetSectionProgressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningServiceGetSectionProgressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningServiceGetSectionProgressRequestValidationError{}

// Validate checks the field values on
// LearningServiceGetSectionProgressResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LearningServiceGetSectionProgressResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// LearningServiceGetSectionProgressResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// LearningServiceGetSectionProgressResponseMultiError, or nil if none found.
func (m *LearningServiceGetSectionProgressResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningServiceGetSectionProgressResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProgress()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LearningServiceGetSectionProgressResponseValidationError{
					field:  "Progress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LearningServiceGetSectionProgressResponseValidationError{
					field:  "Progress",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProgress()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LearningServiceGetSectionProgressResponseValidationError{
				field:  "Progress",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LearningServiceGetSectionProgressResponseMultiError(errors)
	}

	return nil
}

// LearningServiceGetSectionProgressResponseMultiError is an error wrapping
// multiple validation errors returned by
// LearningServiceGetSectionProgressResponse.ValidateAll() if the designated
// constraints aren't met.
type LearningServiceGetSectionProgressResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningServiceGetSectionProgressResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningServiceGetSectionProgressResponseMultiError) AllErrors() []error { return m }

// LearningServiceGetSectionProgressResponseValidationError is the validation
// error returned by LearningServiceGetSectionProgressResponse.Validate if the
// designated constraints aren't met.
type LearningServiceGetSectionProgressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningServiceGetSectionProgressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningServiceGetSectionProgressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearningServiceGetSectionProgressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningServiceGetSectionProgressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningServiceGetSectionProgressResponseValidationError) ErrorName() string {
	return "LearningServiceGetSectionProgressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LearningServiceGetSectionProgressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningServiceGetSectionProgressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningServiceGetSectionProgressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningServiceGetSectionProgressResponseValidationError{}

// Validate checks the field values on LearningServiceGetUnitProgressRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *LearningServiceGetUnitProgressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LearningServiceGetUnitProgressRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// LearningServiceGetUnitProgressRequestMultiError, or nil if none found.
func (m *LearningServiceGetUnitProgressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningServiceGetUnitProgressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UnitId

	if len(errors) > 0 {
		return LearningServiceGetUnitProgressRequestMultiError(errors)
	}

	return nil
}

// LearningServiceGetUnitProgressRequestMultiError is an error wrapping
// multiple validation errors returned by
// LearningServiceGetUnitProgressRequest.ValidateAll() if the designated
// constraints aren't met.
type LearningServiceGetUnitProgressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningServiceGetUnitProgressRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningServiceGetUnitProgressRequestMultiError) AllErrors() []error { return m }

// LearningServiceGetUnitProgressRequestValidationError is the validation error
// returned by LearningServiceGetUnitProgressRequest.Validate if the
// designated constraints aren't met.
type LearningServiceGetUnitProgressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningServiceGetUnitProgressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningServiceGetUnitProgressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearningServiceGetUnitProgressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningServiceGetUnitProgressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningServiceGetUnitProgressRequestValidationError) ErrorName() string {
	return "LearningServiceGetUnitProgressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LearningServiceGetUnitProgressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningServiceGetUnitProgressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningServiceGetUnitProgressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningServiceGetUnitProgressRequestValidationError{}

// Validate checks the field values on LearningServiceUpdateUnitProgressRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *LearningServiceUpdateUnitProgressRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// LearningServiceUpdateUnitProgressRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// LearningServiceUpdateUnitProgressRequestMultiError, or nil if none found.
func (m *LearningServiceUpdateUnitProgressRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningServiceUpdateUnitProgressRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UnitId

	// no validation rules for SectionId

	// no validation rules for Completed

	if len(errors) > 0 {
		return LearningServiceUpdateUnitProgressRequestMultiError(errors)
	}

	return nil
}

// LearningServiceUpdateUnitProgressRequestMultiError is an error wrapping
// multiple validation errors returned by
// LearningServiceUpdateUnitProgressRequest.ValidateAll() if the designated
// constraints aren't met.
type LearningServiceUpdateUnitProgressRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningServiceUpdateUnitProgressRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningServiceUpdateUnitProgressRequestMultiError) AllErrors() []error { return m }

// LearningServiceUpdateUnitProgressRequestValidationError is the validation
// error returned by LearningServiceUpdateUnitProgressRequest.Validate if the
// designated constraints aren't met.
type LearningServiceUpdateUnitProgressRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningServiceUpdateUnitProgressRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningServiceUpdateUnitProgressRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearningServiceUpdateUnitProgressRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningServiceUpdateUnitProgressRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningServiceUpdateUnitProgressRequestValidationError) ErrorName() string {
	return "LearningServiceUpdateUnitProgressRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LearningServiceUpdateUnitProgressRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningServiceUpdateUnitProgressRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningServiceUpdateUnitProgressRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningServiceUpdateUnitProgressRequestValidationError{}

// Validate checks the field values on
// LearningServiceUpdateUnitProgressResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LearningServiceUpdateUnitProgressResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// LearningServiceUpdateUnitProgressResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// LearningServiceUpdateUnitProgressResponseMultiError, or nil if none found.
func (m *LearningServiceUpdateUnitProgressResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LearningServiceUpdateUnitProgressResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LearningServiceUpdateUnitProgressResponseMultiError(errors)
	}

	return nil
}

// LearningServiceUpdateUnitProgressResponseMultiError is an error wrapping
// multiple validation errors returned by
// LearningServiceUpdateUnitProgressResponse.ValidateAll() if the designated
// constraints aren't met.
type LearningServiceUpdateUnitProgressResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LearningServiceUpdateUnitProgressResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LearningServiceUpdateUnitProgressResponseMultiError) AllErrors() []error { return m }

// LearningServiceUpdateUnitProgressResponseValidationError is the validation
// error returned by LearningServiceUpdateUnitProgressResponse.Validate if the
// designated constraints aren't met.
type LearningServiceUpdateUnitProgressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LearningServiceUpdateUnitProgressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LearningServiceUpdateUnitProgressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LearningServiceUpdateUnitProgressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LearningServiceUpdateUnitProgressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LearningServiceUpdateUnitProgressResponseValidationError) ErrorName() string {
	return "LearningServiceUpdateUnitProgressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LearningServiceUpdateUnitProgressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLearningServiceUpdateUnitProgressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LearningServiceUpdateUnitProgressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LearningServiceUpdateUnitProgressResponseValidationError{}

// Validate checks the field values on GetMemoryStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMemoryStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMemoryStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMemoryStatusRequestMultiError, or nil if none found.
func (m *GetMemoryStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMemoryStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MemoryUnitId

	if len(errors) > 0 {
		return GetMemoryStatusRequestMultiError(errors)
	}

	return nil
}

// GetMemoryStatusRequestMultiError is an error wrapping multiple validation
// errors returned by GetMemoryStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type GetMemoryStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMemoryStatusRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMemoryStatusRequestMultiError) AllErrors() []error { return m }

// GetMemoryStatusRequestValidationError is the validation error returned by
// GetMemoryStatusRequest.Validate if the designated constraints aren't met.
type GetMemoryStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMemoryStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMemoryStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMemoryStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMemoryStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMemoryStatusRequestValidationError) ErrorName() string {
	return "GetMemoryStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMemoryStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMemoryStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMemoryStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMemoryStatusRequestValidationError{}

// Validate checks the field values on GetMemoryStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMemoryStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMemoryStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMemoryStatusResponseMultiError, or nil if none found.
func (m *GetMemoryStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMemoryStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStatus()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMemoryStatusResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMemoryStatusResponseValidationError{
					field:  "Status",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatus()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMemoryStatusResponseValidationError{
				field:  "Status",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetMemoryStatusResponseMultiError(errors)
	}

	return nil
}

// GetMemoryStatusResponseMultiError is an error wrapping multiple validation
// errors returned by GetMemoryStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type GetMemoryStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMemoryStatusResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMemoryStatusResponseMultiError) AllErrors() []error { return m }

// GetMemoryStatusResponseValidationError is the validation error returned by
// GetMemoryStatusResponse.Validate if the designated constraints aren't met.
type GetMemoryStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMemoryStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMemoryStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMemoryStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMemoryStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMemoryStatusResponseValidationError) ErrorName() string {
	return "GetMemoryStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMemoryStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMemoryStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMemoryStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMemoryStatusResponseValidationError{}

// Validate checks the field values on UpdateMemoryStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateMemoryStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMemoryStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMemoryStatusRequestMultiError, or nil if none found.
func (m *UpdateMemoryStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMemoryStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MemoryUnitId

	// no validation rules for MasteryLevel

	// no validation rules for StudyDuration

	if len(errors) > 0 {
		return UpdateMemoryStatusRequestMultiError(errors)
	}

	return nil
}

// UpdateMemoryStatusRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateMemoryStatusRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateMemoryStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMemoryStatusRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMemoryStatusRequestMultiError) AllErrors() []error { return m }

// UpdateMemoryStatusRequestValidationError is the validation error returned by
// UpdateMemoryStatusRequest.Validate if the designated constraints aren't met.
type UpdateMemoryStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMemoryStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMemoryStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMemoryStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMemoryStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMemoryStatusRequestValidationError) ErrorName() string {
	return "UpdateMemoryStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMemoryStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMemoryStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMemoryStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMemoryStatusRequestValidationError{}

// Validate checks the field values on UpdateMemoryStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateMemoryStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMemoryStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMemoryStatusResponseMultiError, or nil if none found.
func (m *UpdateMemoryStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMemoryStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateMemoryStatusResponseMultiError(errors)
	}

	return nil
}

// UpdateMemoryStatusResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateMemoryStatusResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateMemoryStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMemoryStatusResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMemoryStatusResponseMultiError) AllErrors() []error { return m }

// UpdateMemoryStatusResponseValidationError is the validation error returned
// by UpdateMemoryStatusResponse.Validate if the designated constraints aren't met.
type UpdateMemoryStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMemoryStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMemoryStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMemoryStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMemoryStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMemoryStatusResponseValidationError) ErrorName() string {
	return "UpdateMemoryStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMemoryStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMemoryStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMemoryStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMemoryStatusResponseValidationError{}

// Validate checks the field values on ListMemoriesForReviewRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMemoriesForReviewRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMemoriesForReviewRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMemoriesForReviewRequestMultiError, or nil if none found.
func (m *ListMemoriesForReviewRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMemoriesForReviewRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return ListMemoriesForReviewRequestMultiError(errors)
	}

	return nil
}

// ListMemoriesForReviewRequestMultiError is an error wrapping multiple
// validation errors returned by ListMemoriesForReviewRequest.ValidateAll() if
// the designated constraints aren't met.
type ListMemoriesForReviewRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMemoriesForReviewRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMemoriesForReviewRequestMultiError) AllErrors() []error { return m }

// ListMemoriesForReviewRequestValidationError is the validation error returned
// by ListMemoriesForReviewRequest.Validate if the designated constraints
// aren't met.
type ListMemoriesForReviewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMemoriesForReviewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMemoriesForReviewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMemoriesForReviewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMemoriesForReviewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMemoriesForReviewRequestValidationError) ErrorName() string {
	return "ListMemoriesForReviewRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMemoriesForReviewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMemoriesForReviewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMemoriesForReviewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMemoriesForReviewRequestValidationError{}

// Validate checks the field values on ListMemoriesForReviewResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMemoriesForReviewResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMemoriesForReviewResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListMemoriesForReviewResponseMultiError, or nil if none found.
func (m *ListMemoriesForReviewResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMemoriesForReviewResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStatuses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMemoriesForReviewResponseValidationError{
						field:  fmt.Sprintf("Statuses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMemoriesForReviewResponseValidationError{
						field:  fmt.Sprintf("Statuses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMemoriesForReviewResponseValidationError{
					field:  fmt.Sprintf("Statuses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListMemoriesForReviewResponseMultiError(errors)
	}

	return nil
}

// ListMemoriesForReviewResponseMultiError is an error wrapping multiple
// validation errors returned by ListMemoriesForReviewResponse.ValidateAll()
// if the designated constraints aren't met.
type ListMemoriesForReviewResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMemoriesForReviewResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMemoriesForReviewResponseMultiError) AllErrors() []error { return m }

// ListMemoriesForReviewResponseValidationError is the validation error
// returned by ListMemoriesForReviewResponse.Validate if the designated
// constraints aren't met.
type ListMemoriesForReviewResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMemoriesForReviewResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMemoriesForReviewResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMemoriesForReviewResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMemoriesForReviewResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMemoriesForReviewResponseValidationError) ErrorName() string {
	return "ListMemoriesForReviewResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMemoriesForReviewResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMemoriesForReviewResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMemoriesForReviewResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMemoriesForReviewResponseValidationError{}

// Validate checks the field values on GetMemoryStatsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMemoryStatsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMemoryStatsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMemoryStatsRequestMultiError, or nil if none found.
func (m *GetMemoryStatsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMemoryStatsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Type != nil {
		// no validation rules for Type
	}

	if m.Tag != nil {
		// no validation rules for Tag
	}

	if m.Category != nil {
		// no validation rules for Category
	}

	if len(errors) > 0 {
		return GetMemoryStatsRequestMultiError(errors)
	}

	return nil
}

// GetMemoryStatsRequestMultiError is an error wrapping multiple validation
// errors returned by GetMemoryStatsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetMemoryStatsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMemoryStatsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMemoryStatsRequestMultiError) AllErrors() []error { return m }

// GetMemoryStatsRequestValidationError is the validation error returned by
// GetMemoryStatsRequest.Validate if the designated constraints aren't met.
type GetMemoryStatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMemoryStatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMemoryStatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMemoryStatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMemoryStatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMemoryStatsRequestValidationError) ErrorName() string {
	return "GetMemoryStatsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMemoryStatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMemoryStatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMemoryStatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMemoryStatsRequestValidationError{}

// Validate checks the field values on GetMemoryStatsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMemoryStatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMemoryStatsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMemoryStatsResponseMultiError, or nil if none found.
func (m *GetMemoryStatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMemoryStatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalLearned

	// no validation rules for MasteredCount

	// no validation rules for NeedReviewCount

	// no validation rules for TotalStudyTime

	// no validation rules for LevelStats

	// no validation rules for RetentionRates

	if len(errors) > 0 {
		return GetMemoryStatsResponseMultiError(errors)
	}

	return nil
}

// GetMemoryStatsResponseMultiError is an error wrapping multiple validation
// errors returned by GetMemoryStatsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetMemoryStatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMemoryStatsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMemoryStatsResponseMultiError) AllErrors() []error { return m }

// GetMemoryStatsResponseValidationError is the validation error returned by
// GetMemoryStatsResponse.Validate if the designated constraints aren't met.
type GetMemoryStatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMemoryStatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMemoryStatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMemoryStatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMemoryStatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMemoryStatsResponseValidationError) ErrorName() string {
	return "GetMemoryStatsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMemoryStatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMemoryStatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMemoryStatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMemoryStatsResponseValidationError{}

// Validate checks the field values on RecordLearningResultRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecordLearningResultRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecordLearningResultRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecordLearningResultRequestMultiError, or nil if none found.
func (m *RecordLearningResultRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RecordLearningResultRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MemoryUnitId

	// no validation rules for Result

	// no validation rules for ResponseTime

	if len(errors) > 0 {
		return RecordLearningResultRequestMultiError(errors)
	}

	return nil
}

// RecordLearningResultRequestMultiError is an error wrapping multiple
// validation errors returned by RecordLearningResultRequest.ValidateAll() if
// the designated constraints aren't met.
type RecordLearningResultRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordLearningResultRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordLearningResultRequestMultiError) AllErrors() []error { return m }

// RecordLearningResultRequestValidationError is the validation error returned
// by RecordLearningResultRequest.Validate if the designated constraints
// aren't met.
type RecordLearningResultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordLearningResultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordLearningResultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordLearningResultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordLearningResultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordLearningResultRequestValidationError) ErrorName() string {
	return "RecordLearningResultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RecordLearningResultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecordLearningResultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordLearningResultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordLearningResultRequestValidationError{}

// Validate checks the field values on RecordLearningResultResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RecordLearningResultResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RecordLearningResultResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RecordLearningResultResponseMultiError, or nil if none found.
func (m *RecordLearningResultResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RecordLearningResultResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RecordLearningResultResponseMultiError(errors)
	}

	return nil
}

// RecordLearningResultResponseMultiError is an error wrapping multiple
// validation errors returned by RecordLearningResultResponse.ValidateAll() if
// the designated constraints aren't met.
type RecordLearningResultResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RecordLearningResultResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RecordLearningResultResponseMultiError) AllErrors() []error { return m }

// RecordLearningResultResponseValidationError is the validation error returned
// by RecordLearningResultResponse.Validate if the designated constraints
// aren't met.
type RecordLearningResultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RecordLearningResultResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RecordLearningResultResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RecordLearningResultResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RecordLearningResultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RecordLearningResultResponseValidationError) ErrorName() string {
	return "RecordLearningResultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RecordLearningResultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRecordLearningResultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RecordLearningResultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RecordLearningResultResponseValidationError{}

// Validate checks the field values on MemoryReview with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MemoryReview) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemoryReview with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MemoryReviewMultiError, or
// nil if none found.
func (m *MemoryReview) ValidateAll() error {
	return m.validate(true)
}

func (m *MemoryReview) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for MemoryUnitId

	// no validation rules for UserId

	// no validation rules for Result

	// no validation rules for ResponseTime

	if all {
		switch v := interface{}(m.GetReviewTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemoryReviewValidationError{
					field:  "ReviewTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemoryReviewValidationError{
					field:  "ReviewTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReviewTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemoryReviewValidationError{
				field:  "ReviewTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemoryReviewValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemoryReviewValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemoryReviewValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MemoryReviewMultiError(errors)
	}

	return nil
}

// MemoryReviewMultiError is an error wrapping multiple validation errors
// returned by MemoryReview.ValidateAll() if the designated constraints aren't met.
type MemoryReviewMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemoryReviewMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemoryReviewMultiError) AllErrors() []error { return m }

// MemoryReviewValidationError is the validation error returned by
// MemoryReview.Validate if the designated constraints aren't met.
type MemoryReviewValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemoryReviewValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemoryReviewValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemoryReviewValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemoryReviewValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemoryReviewValidationError) ErrorName() string { return "MemoryReviewValidationError" }

// Error satisfies the builtin error interface
func (e MemoryReviewValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemoryReview.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemoryReviewValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemoryReviewValidationError{}
