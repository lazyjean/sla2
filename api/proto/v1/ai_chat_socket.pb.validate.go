// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/v1/ai_chat_socket.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AiChatMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AiChatMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AiChatMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AiChatMessageMultiError, or
// nil if none found.
func (m *AiChatMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *AiChatMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionId

	// no validation rules for Message

	// no validation rules for Role

	if len(errors) > 0 {
		return AiChatMessageMultiError(errors)
	}

	return nil
}

// AiChatMessageMultiError is an error wrapping multiple validation errors
// returned by AiChatMessage.ValidateAll() if the designated constraints
// aren't met.
type AiChatMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AiChatMessageMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AiChatMessageMultiError) AllErrors() []error { return m }

// AiChatMessageValidationError is the validation error returned by
// AiChatMessage.Validate if the designated constraints aren't met.
type AiChatMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AiChatMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AiChatMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AiChatMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AiChatMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AiChatMessageValidationError) ErrorName() string { return "AiChatMessageValidationError" }

// Error satisfies the builtin error interface
func (e AiChatMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAiChatMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AiChatMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AiChatMessageValidationError{}

// Validate checks the field values on TokenUsageDetails with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TokenUsageDetails) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TokenUsageDetails with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TokenUsageDetailsMultiError, or nil if none found.
func (m *TokenUsageDetails) ValidateAll() error {
	return m.validate(true)
}

func (m *TokenUsageDetails) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CachedTokens

	if len(errors) > 0 {
		return TokenUsageDetailsMultiError(errors)
	}

	return nil
}

// TokenUsageDetailsMultiError is an error wrapping multiple validation errors
// returned by TokenUsageDetails.ValidateAll() if the designated constraints
// aren't met.
type TokenUsageDetailsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TokenUsageDetailsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TokenUsageDetailsMultiError) AllErrors() []error { return m }

// TokenUsageDetailsValidationError is the validation error returned by
// TokenUsageDetails.Validate if the designated constraints aren't met.
type TokenUsageDetailsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenUsageDetailsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenUsageDetailsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenUsageDetailsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenUsageDetailsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenUsageDetailsValidationError) ErrorName() string {
	return "TokenUsageDetailsValidationError"
}

// Error satisfies the builtin error interface
func (e TokenUsageDetailsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenUsageDetails.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenUsageDetailsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenUsageDetailsValidationError{}

// Validate checks the field values on Usage with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Usage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Usage with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UsageMultiError, or nil if none found.
func (m *Usage) ValidateAll() error {
	return m.validate(true)
}

func (m *Usage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PromptTokens

	// no validation rules for CompletionTokens

	// no validation rules for TotalTokens

	if all {
		switch v := interface{}(m.GetPromptTokensDetails()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UsageValidationError{
					field:  "PromptTokensDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UsageValidationError{
					field:  "PromptTokensDetails",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPromptTokensDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UsageValidationError{
				field:  "PromptTokensDetails",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PromptCacheHitTokens

	// no validation rules for PromptCacheMissTokens

	if len(errors) > 0 {
		return UsageMultiError(errors)
	}

	return nil
}

// UsageMultiError is an error wrapping multiple validation errors returned by
// Usage.ValidateAll() if the designated constraints aren't met.
type UsageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UsageMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UsageMultiError) AllErrors() []error { return m }

// UsageValidationError is the validation error returned by Usage.Validate if
// the designated constraints aren't met.
type UsageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UsageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UsageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UsageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UsageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UsageValidationError) ErrorName() string { return "UsageValidationError" }

// Error satisfies the builtin error interface
func (e UsageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUsage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UsageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UsageValidationError{}

// Validate checks the field values on Choice with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Choice) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Choice with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ChoiceMultiError, or nil if none found.
func (m *Choice) ValidateAll() error {
	return m.validate(true)
}

func (m *Choice) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Index

	if all {
		switch v := interface{}(m.GetMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChoiceValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChoiceValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChoiceValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for FinishReason

	if len(errors) > 0 {
		return ChoiceMultiError(errors)
	}

	return nil
}

// ChoiceMultiError is an error wrapping multiple validation errors returned by
// Choice.ValidateAll() if the designated constraints aren't met.
type ChoiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChoiceMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChoiceMultiError) AllErrors() []error { return m }

// ChoiceValidationError is the validation error returned by Choice.Validate if
// the designated constraints aren't met.
type ChoiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChoiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChoiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChoiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChoiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChoiceValidationError) ErrorName() string { return "ChoiceValidationError" }

// Error satisfies the builtin error interface
func (e ChoiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChoice.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChoiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChoiceValidationError{}

// Validate checks the field values on AiChatRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AiChatRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AiChatRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AiChatRequestMultiError, or
// nil if none found.
func (m *AiChatRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AiChatRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMessages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AiChatRequestValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AiChatRequestValidationError{
						field:  fmt.Sprintf("Messages[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AiChatRequestValidationError{
					field:  fmt.Sprintf("Messages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Model

	// no validation rules for FrequencyPenalty

	// no validation rules for MaxTokens

	// no validation rules for PresencePenalty

	// no validation rules for Stream

	// no validation rules for Temperature

	// no validation rules for TopP

	// no validation rules for Logprobs

	if len(errors) > 0 {
		return AiChatRequestMultiError(errors)
	}

	return nil
}

// AiChatRequestMultiError is an error wrapping multiple validation errors
// returned by AiChatRequest.ValidateAll() if the designated constraints
// aren't met.
type AiChatRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AiChatRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AiChatRequestMultiError) AllErrors() []error { return m }

// AiChatRequestValidationError is the validation error returned by
// AiChatRequest.Validate if the designated constraints aren't met.
type AiChatRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AiChatRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AiChatRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AiChatRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AiChatRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AiChatRequestValidationError) ErrorName() string { return "AiChatRequestValidationError" }

// Error satisfies the builtin error interface
func (e AiChatRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAiChatRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AiChatRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AiChatRequestValidationError{}

// Validate checks the field values on AiChatResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AiChatResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AiChatResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AiChatResponseMultiError,
// or nil if none found.
func (m *AiChatResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AiChatResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Object

	// no validation rules for Created

	// no validation rules for Model

	for idx, item := range m.GetChoices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AiChatResponseValidationError{
						field:  fmt.Sprintf("Choices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AiChatResponseValidationError{
						field:  fmt.Sprintf("Choices[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AiChatResponseValidationError{
					field:  fmt.Sprintf("Choices[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetUsage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AiChatResponseValidationError{
					field:  "Usage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AiChatResponseValidationError{
					field:  "Usage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUsage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AiChatResponseValidationError{
				field:  "Usage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SystemFingerprint

	// no validation rules for Code

	// no validation rules for ErrorMsg

	// no validation rules for IsFinal

	// no validation rules for StreamId

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AiChatResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AiChatResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AiChatResponseValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AiChatResponseMultiError(errors)
	}

	return nil
}

// AiChatResponseMultiError is an error wrapping multiple validation errors
// returned by AiChatResponse.ValidateAll() if the designated constraints
// aren't met.
type AiChatResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AiChatResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AiChatResponseMultiError) AllErrors() []error { return m }

// AiChatResponseValidationError is the validation error returned by
// AiChatResponse.Validate if the designated constraints aren't met.
type AiChatResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AiChatResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AiChatResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AiChatResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AiChatResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AiChatResponseValidationError) ErrorName() string { return "AiChatResponseValidationError" }

// Error satisfies the builtin error interface
func (e AiChatResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAiChatResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AiChatResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AiChatResponseValidationError{}

// Validate checks the field values on AiChatStreamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AiChatStreamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AiChatStreamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AiChatStreamRequestMultiError, or nil if none found.
func (m *AiChatStreamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AiChatStreamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AiChatStreamRequestValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AiChatStreamRequestValidationError{
					field:  "Message",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AiChatStreamRequestValidationError{
				field:  "Message",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StreamId

	if len(errors) > 0 {
		return AiChatStreamRequestMultiError(errors)
	}

	return nil
}

// AiChatStreamRequestMultiError is an error wrapping multiple validation
// errors returned by AiChatStreamRequest.ValidateAll() if the designated
// constraints aren't met.
type AiChatStreamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AiChatStreamRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AiChatStreamRequestMultiError) AllErrors() []error { return m }

// AiChatStreamRequestValidationError is the validation error returned by
// AiChatStreamRequest.Validate if the designated constraints aren't met.
type AiChatStreamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AiChatStreamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AiChatStreamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AiChatStreamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AiChatStreamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AiChatStreamRequestValidationError) ErrorName() string {
	return "AiChatStreamRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AiChatStreamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAiChatStreamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AiChatStreamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AiChatStreamRequestValidationError{}

// Validate checks the field values on AiChatStopStreamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AiChatStopStreamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AiChatStopStreamRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AiChatStopStreamRequestMultiError, or nil if none found.
func (m *AiChatStopStreamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AiChatStopStreamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for StreamId

	if len(errors) > 0 {
		return AiChatStopStreamRequestMultiError(errors)
	}

	return nil
}

// AiChatStopStreamRequestMultiError is an error wrapping multiple validation
// errors returned by AiChatStopStreamRequest.ValidateAll() if the designated
// constraints aren't met.
type AiChatStopStreamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AiChatStopStreamRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AiChatStopStreamRequestMultiError) AllErrors() []error { return m }

// AiChatStopStreamRequestValidationError is the validation error returned by
// AiChatStopStreamRequest.Validate if the designated constraints aren't met.
type AiChatStopStreamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AiChatStopStreamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AiChatStopStreamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AiChatStopStreamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AiChatStopStreamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AiChatStopStreamRequestValidationError) ErrorName() string {
	return "AiChatStopStreamRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AiChatStopStreamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAiChatStopStreamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AiChatStopStreamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AiChatStopStreamRequestValidationError{}

// Validate checks the field values on AiChatChatContextRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AiChatChatContextRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AiChatChatContextRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AiChatChatContextRequestMultiError, or nil if none found.
func (m *AiChatChatContextRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AiChatChatContextRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionId

	if len(errors) > 0 {
		return AiChatChatContextRequestMultiError(errors)
	}

	return nil
}

// AiChatChatContextRequestMultiError is an error wrapping multiple validation
// errors returned by AiChatChatContextRequest.ValidateAll() if the designated
// constraints aren't met.
type AiChatChatContextRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AiChatChatContextRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AiChatChatContextRequestMultiError) AllErrors() []error { return m }

// AiChatChatContextRequestValidationError is the validation error returned by
// AiChatChatContextRequest.Validate if the designated constraints aren't met.
type AiChatChatContextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AiChatChatContextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AiChatChatContextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AiChatChatContextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AiChatChatContextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AiChatChatContextRequestValidationError) ErrorName() string {
	return "AiChatChatContextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AiChatChatContextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAiChatChatContextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AiChatChatContextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AiChatChatContextRequestValidationError{}

// Validate checks the field values on AiChatHistoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AiChatHistoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AiChatHistoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AiChatHistoryResponseMultiError, or nil if none found.
func (m *AiChatHistoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AiChatHistoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionId

	// no validation rules for Role

	// no validation rules for Content

	// no validation rules for Timestamp

	if len(errors) > 0 {
		return AiChatHistoryResponseMultiError(errors)
	}

	return nil
}

// AiChatHistoryResponseMultiError is an error wrapping multiple validation
// errors returned by AiChatHistoryResponse.ValidateAll() if the designated
// constraints aren't met.
type AiChatHistoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AiChatHistoryResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AiChatHistoryResponseMultiError) AllErrors() []error { return m }

// AiChatHistoryResponseValidationError is the validation error returned by
// AiChatHistoryResponse.Validate if the designated constraints aren't met.
type AiChatHistoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AiChatHistoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AiChatHistoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AiChatHistoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AiChatHistoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AiChatHistoryResponseValidationError) ErrorName() string {
	return "AiChatHistoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AiChatHistoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAiChatHistoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AiChatHistoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AiChatHistoryResponseValidationError{}
