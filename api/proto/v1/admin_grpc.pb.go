// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/v1/admin.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AdminService_CheckSystemStatus_FullMethodName   = "/proto.v1.AdminService/CheckSystemStatus"
	AdminService_InitializeSystem_FullMethodName    = "/proto.v1.AdminService/InitializeSystem"
	AdminService_AdminLogin_FullMethodName          = "/proto.v1.AdminService/AdminLogin"
	AdminService_RefreshToken_FullMethodName        = "/proto.v1.AdminService/RefreshToken"
	AdminService_GetCurrentAdminInfo_FullMethodName = "/proto.v1.AdminService/GetCurrentAdminInfo"
)

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 管理员服务
type AdminServiceClient interface {
	// 检查系统状态
	CheckSystemStatus(ctx context.Context, in *AdminServiceCheckSystemStatusRequest, opts ...grpc.CallOption) (*AdminServiceCheckSystemStatusResponse, error)
	// 系统初始化（创建首个管理员）
	InitializeSystem(ctx context.Context, in *AdminServiceInitializeSystemRequest, opts ...grpc.CallOption) (*AdminServiceInitializeSystemResponse, error)
	// 管理员登录
	AdminLogin(ctx context.Context, in *AdminServiceAdminLoginRequest, opts ...grpc.CallOption) (*AdminServiceAdminLoginResponse, error)
	// 刷新访问令牌
	RefreshToken(ctx context.Context, in *AdminServiceRefreshTokenRequest, opts ...grpc.CallOption) (*AdminServiceRefreshTokenResponse, error)
	// 获取当前管理员信息
	GetCurrentAdminInfo(ctx context.Context, in *AdminServiceGetCurrentAdminInfoRequest, opts ...grpc.CallOption) (*AdminServiceGetCurrentAdminInfoResponse, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) CheckSystemStatus(ctx context.Context, in *AdminServiceCheckSystemStatusRequest, opts ...grpc.CallOption) (*AdminServiceCheckSystemStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminServiceCheckSystemStatusResponse)
	err := c.cc.Invoke(ctx, AdminService_CheckSystemStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) InitializeSystem(ctx context.Context, in *AdminServiceInitializeSystemRequest, opts ...grpc.CallOption) (*AdminServiceInitializeSystemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminServiceInitializeSystemResponse)
	err := c.cc.Invoke(ctx, AdminService_InitializeSystem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) AdminLogin(ctx context.Context, in *AdminServiceAdminLoginRequest, opts ...grpc.CallOption) (*AdminServiceAdminLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminServiceAdminLoginResponse)
	err := c.cc.Invoke(ctx, AdminService_AdminLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) RefreshToken(ctx context.Context, in *AdminServiceRefreshTokenRequest, opts ...grpc.CallOption) (*AdminServiceRefreshTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminServiceRefreshTokenResponse)
	err := c.cc.Invoke(ctx, AdminService_RefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetCurrentAdminInfo(ctx context.Context, in *AdminServiceGetCurrentAdminInfoRequest, opts ...grpc.CallOption) (*AdminServiceGetCurrentAdminInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminServiceGetCurrentAdminInfoResponse)
	err := c.cc.Invoke(ctx, AdminService_GetCurrentAdminInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations must embed UnimplementedAdminServiceServer
// for forward compatibility.
//
// 管理员服务
type AdminServiceServer interface {
	// 检查系统状态
	CheckSystemStatus(context.Context, *AdminServiceCheckSystemStatusRequest) (*AdminServiceCheckSystemStatusResponse, error)
	// 系统初始化（创建首个管理员）
	InitializeSystem(context.Context, *AdminServiceInitializeSystemRequest) (*AdminServiceInitializeSystemResponse, error)
	// 管理员登录
	AdminLogin(context.Context, *AdminServiceAdminLoginRequest) (*AdminServiceAdminLoginResponse, error)
	// 刷新访问令牌
	RefreshToken(context.Context, *AdminServiceRefreshTokenRequest) (*AdminServiceRefreshTokenResponse, error)
	// 获取当前管理员信息
	GetCurrentAdminInfo(context.Context, *AdminServiceGetCurrentAdminInfoRequest) (*AdminServiceGetCurrentAdminInfoResponse, error)
	mustEmbedUnimplementedAdminServiceServer()
}

// UnimplementedAdminServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdminServiceServer struct{}

func (UnimplementedAdminServiceServer) CheckSystemStatus(context.Context, *AdminServiceCheckSystemStatusRequest) (*AdminServiceCheckSystemStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSystemStatus not implemented")
}
func (UnimplementedAdminServiceServer) InitializeSystem(context.Context, *AdminServiceInitializeSystemRequest) (*AdminServiceInitializeSystemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitializeSystem not implemented")
}
func (UnimplementedAdminServiceServer) AdminLogin(context.Context, *AdminServiceAdminLoginRequest) (*AdminServiceAdminLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminLogin not implemented")
}
func (UnimplementedAdminServiceServer) RefreshToken(context.Context, *AdminServiceRefreshTokenRequest) (*AdminServiceRefreshTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedAdminServiceServer) GetCurrentAdminInfo(context.Context, *AdminServiceGetCurrentAdminInfoRequest) (*AdminServiceGetCurrentAdminInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentAdminInfo not implemented")
}
func (UnimplementedAdminServiceServer) mustEmbedUnimplementedAdminServiceServer() {}
func (UnimplementedAdminServiceServer) testEmbeddedByValue()                      {}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	// If the following call pancis, it indicates UnimplementedAdminServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_CheckSystemStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminServiceCheckSystemStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CheckSystemStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CheckSystemStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CheckSystemStatus(ctx, req.(*AdminServiceCheckSystemStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_InitializeSystem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminServiceInitializeSystemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).InitializeSystem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_InitializeSystem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).InitializeSystem(ctx, req.(*AdminServiceInitializeSystemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_AdminLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminServiceAdminLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).AdminLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_AdminLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).AdminLogin(ctx, req.(*AdminServiceAdminLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminServiceRefreshTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).RefreshToken(ctx, req.(*AdminServiceRefreshTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetCurrentAdminInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminServiceGetCurrentAdminInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetCurrentAdminInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetCurrentAdminInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetCurrentAdminInfo(ctx, req.(*AdminServiceGetCurrentAdminInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.v1.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckSystemStatus",
			Handler:    _AdminService_CheckSystemStatus_Handler,
		},
		{
			MethodName: "InitializeSystem",
			Handler:    _AdminService_InitializeSystem_Handler,
		},
		{
			MethodName: "AdminLogin",
			Handler:    _AdminService_AdminLogin_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _AdminService_RefreshToken_Handler,
		},
		{
			MethodName: "GetCurrentAdminInfo",
			Handler:    _AdminService_GetCurrentAdminInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/admin.proto",
}
