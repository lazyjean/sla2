// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/v1/vocabulary.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on WordDefinition with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WordDefinition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WordDefinition with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WordDefinitionMultiError,
// or nil if none found.
func (m *WordDefinition) ValidateAll() error {
	return m.validate(true)
}

func (m *WordDefinition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for PartOfSpeech

	// no validation rules for Meaning

	// no validation rules for Example

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WordDefinitionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WordDefinitionValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WordDefinitionValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WordDefinitionValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WordDefinitionValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WordDefinitionValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WordDefinitionMultiError(errors)
	}

	return nil
}

// WordDefinitionMultiError is an error wrapping multiple validation errors
// returned by WordDefinition.ValidateAll() if the designated constraints
// aren't met.
type WordDefinitionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WordDefinitionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WordDefinitionMultiError) AllErrors() []error { return m }

// WordDefinitionValidationError is the validation error returned by
// WordDefinition.Validate if the designated constraints aren't met.
type WordDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WordDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WordDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WordDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WordDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WordDefinitionValidationError) ErrorName() string { return "WordDefinitionValidationError" }

// Error satisfies the builtin error interface
func (e WordDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWordDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WordDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WordDefinitionValidationError{}

// Validate checks the field values on Word with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Word) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Word with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in WordMultiError, or nil if none found.
func (m *Word) ValidateAll() error {
	return m.validate(true)
}

func (m *Word) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Word

	// no validation rules for Spelling

	// no validation rules for Pronunciation

	// no validation rules for AudioUrl

	// no validation rules for Level

	for idx, item := range m.GetDefinitions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, WordValidationError{
						field:  fmt.Sprintf("Definitions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, WordValidationError{
						field:  fmt.Sprintf("Definitions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return WordValidationError{
					field:  fmt.Sprintf("Definitions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return WordMultiError(errors)
	}

	return nil
}

// WordMultiError is an error wrapping multiple validation errors returned by
// Word.ValidateAll() if the designated constraints aren't met.
type WordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WordMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WordMultiError) AllErrors() []error { return m }

// WordValidationError is the validation error returned by Word.Validate if the
// designated constraints aren't met.
type WordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WordValidationError) ErrorName() string { return "WordValidationError" }

// Error satisfies the builtin error interface
func (e WordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WordValidationError{}

// Validate checks the field values on HanChar with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HanChar) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HanChar with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in HanCharMultiError, or nil if none found.
func (m *HanChar) ValidateAll() error {
	return m.validate(true)
}

func (m *HanChar) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Character

	// no validation rules for Pinyin

	// no validation rules for Level

	if len(errors) > 0 {
		return HanCharMultiError(errors)
	}

	return nil
}

// HanCharMultiError is an error wrapping multiple validation errors returned
// by HanChar.ValidateAll() if the designated constraints aren't met.
type HanCharMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HanCharMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HanCharMultiError) AllErrors() []error { return m }

// HanCharValidationError is the validation error returned by HanChar.Validate
// if the designated constraints aren't met.
type HanCharValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HanCharValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HanCharValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HanCharValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HanCharValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HanCharValidationError) ErrorName() string { return "HanCharValidationError" }

// Error satisfies the builtin error interface
func (e HanCharValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHanChar.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HanCharValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HanCharValidationError{}

// Validate checks the field values on VocabularyServiceGetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VocabularyServiceGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VocabularyServiceGetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VocabularyServiceGetRequestMultiError, or nil if none found.
func (m *VocabularyServiceGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VocabularyServiceGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return VocabularyServiceGetRequestMultiError(errors)
	}

	return nil
}

// VocabularyServiceGetRequestMultiError is an error wrapping multiple
// validation errors returned by VocabularyServiceGetRequest.ValidateAll() if
// the designated constraints aren't met.
type VocabularyServiceGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VocabularyServiceGetRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VocabularyServiceGetRequestMultiError) AllErrors() []error { return m }

// VocabularyServiceGetRequestValidationError is the validation error returned
// by VocabularyServiceGetRequest.Validate if the designated constraints
// aren't met.
type VocabularyServiceGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VocabularyServiceGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VocabularyServiceGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VocabularyServiceGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VocabularyServiceGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VocabularyServiceGetRequestValidationError) ErrorName() string {
	return "VocabularyServiceGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VocabularyServiceGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVocabularyServiceGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VocabularyServiceGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VocabularyServiceGetRequestValidationError{}

// Validate checks the field values on VocabularyServiceGetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VocabularyServiceGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VocabularyServiceGetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VocabularyServiceGetResponseMultiError, or nil if none found.
func (m *VocabularyServiceGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *VocabularyServiceGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetWord()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VocabularyServiceGetResponseValidationError{
					field:  "Word",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VocabularyServiceGetResponseValidationError{
					field:  "Word",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWord()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VocabularyServiceGetResponseValidationError{
				field:  "Word",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VocabularyServiceGetResponseMultiError(errors)
	}

	return nil
}

// VocabularyServiceGetResponseMultiError is an error wrapping multiple
// validation errors returned by VocabularyServiceGetResponse.ValidateAll() if
// the designated constraints aren't met.
type VocabularyServiceGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VocabularyServiceGetResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VocabularyServiceGetResponseMultiError) AllErrors() []error { return m }

// VocabularyServiceGetResponseValidationError is the validation error returned
// by VocabularyServiceGetResponse.Validate if the designated constraints
// aren't met.
type VocabularyServiceGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VocabularyServiceGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VocabularyServiceGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VocabularyServiceGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VocabularyServiceGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VocabularyServiceGetResponseValidationError) ErrorName() string {
	return "VocabularyServiceGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VocabularyServiceGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVocabularyServiceGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VocabularyServiceGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VocabularyServiceGetResponseValidationError{}

// Validate checks the field values on VocabularyServiceListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VocabularyServiceListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VocabularyServiceListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VocabularyServiceListRequestMultiError, or nil if none found.
func (m *VocabularyServiceListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VocabularyServiceListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Level

	if len(errors) > 0 {
		return VocabularyServiceListRequestMultiError(errors)
	}

	return nil
}

// VocabularyServiceListRequestMultiError is an error wrapping multiple
// validation errors returned by VocabularyServiceListRequest.ValidateAll() if
// the designated constraints aren't met.
type VocabularyServiceListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VocabularyServiceListRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VocabularyServiceListRequestMultiError) AllErrors() []error { return m }

// VocabularyServiceListRequestValidationError is the validation error returned
// by VocabularyServiceListRequest.Validate if the designated constraints
// aren't met.
type VocabularyServiceListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VocabularyServiceListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VocabularyServiceListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VocabularyServiceListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VocabularyServiceListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VocabularyServiceListRequestValidationError) ErrorName() string {
	return "VocabularyServiceListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VocabularyServiceListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVocabularyServiceListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VocabularyServiceListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VocabularyServiceListRequestValidationError{}

// Validate checks the field values on VocabularyServiceListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VocabularyServiceListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VocabularyServiceListResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// VocabularyServiceListResponseMultiError, or nil if none found.
func (m *VocabularyServiceListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *VocabularyServiceListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetWords() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, VocabularyServiceListResponseValidationError{
						field:  fmt.Sprintf("Words[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, VocabularyServiceListResponseValidationError{
						field:  fmt.Sprintf("Words[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return VocabularyServiceListResponseValidationError{
					field:  fmt.Sprintf("Words[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return VocabularyServiceListResponseMultiError(errors)
	}

	return nil
}

// VocabularyServiceListResponseMultiError is an error wrapping multiple
// validation errors returned by VocabularyServiceListResponse.ValidateAll()
// if the designated constraints aren't met.
type VocabularyServiceListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VocabularyServiceListResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VocabularyServiceListResponseMultiError) AllErrors() []error { return m }

// VocabularyServiceListResponseValidationError is the validation error
// returned by VocabularyServiceListResponse.Validate if the designated
// constraints aren't met.
type VocabularyServiceListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VocabularyServiceListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VocabularyServiceListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VocabularyServiceListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VocabularyServiceListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VocabularyServiceListResponseValidationError) ErrorName() string {
	return "VocabularyServiceListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VocabularyServiceListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVocabularyServiceListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VocabularyServiceListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VocabularyServiceListResponseValidationError{}

// Validate checks the field values on VocabularyServiceAllTagsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VocabularyServiceAllTagsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VocabularyServiceAllTagsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// VocabularyServiceAllTagsRequestMultiError, or nil if none found.
func (m *VocabularyServiceAllTagsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VocabularyServiceAllTagsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VocabularyServiceAllTagsRequestMultiError(errors)
	}

	return nil
}

// VocabularyServiceAllTagsRequestMultiError is an error wrapping multiple
// validation errors returned by VocabularyServiceAllTagsRequest.ValidateAll()
// if the designated constraints aren't met.
type VocabularyServiceAllTagsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VocabularyServiceAllTagsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VocabularyServiceAllTagsRequestMultiError) AllErrors() []error { return m }

// VocabularyServiceAllTagsRequestValidationError is the validation error
// returned by VocabularyServiceAllTagsRequest.Validate if the designated
// constraints aren't met.
type VocabularyServiceAllTagsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VocabularyServiceAllTagsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VocabularyServiceAllTagsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VocabularyServiceAllTagsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VocabularyServiceAllTagsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VocabularyServiceAllTagsRequestValidationError) ErrorName() string {
	return "VocabularyServiceAllTagsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VocabularyServiceAllTagsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVocabularyServiceAllTagsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VocabularyServiceAllTagsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VocabularyServiceAllTagsRequestValidationError{}

// Validate checks the field values on VocabularyServiceAllTagsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *VocabularyServiceAllTagsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VocabularyServiceAllTagsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// VocabularyServiceAllTagsResponseMultiError, or nil if none found.
func (m *VocabularyServiceAllTagsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *VocabularyServiceAllTagsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VocabularyServiceAllTagsResponseMultiError(errors)
	}

	return nil
}

// VocabularyServiceAllTagsResponseMultiError is an error wrapping multiple
// validation errors returned by
// VocabularyServiceAllTagsResponse.ValidateAll() if the designated
// constraints aren't met.
type VocabularyServiceAllTagsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VocabularyServiceAllTagsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VocabularyServiceAllTagsResponseMultiError) AllErrors() []error { return m }

// VocabularyServiceAllTagsResponseValidationError is the validation error
// returned by VocabularyServiceAllTagsResponse.Validate if the designated
// constraints aren't met.
type VocabularyServiceAllTagsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VocabularyServiceAllTagsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VocabularyServiceAllTagsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VocabularyServiceAllTagsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VocabularyServiceAllTagsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VocabularyServiceAllTagsResponseValidationError) ErrorName() string {
	return "VocabularyServiceAllTagsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VocabularyServiceAllTagsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVocabularyServiceAllTagsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VocabularyServiceAllTagsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VocabularyServiceAllTagsResponseValidationError{}

// Validate checks the field values on VocabularyServiceListHanCharRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *VocabularyServiceListHanCharRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VocabularyServiceListHanCharRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// VocabularyServiceListHanCharRequestMultiError, or nil if none found.
func (m *VocabularyServiceListHanCharRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VocabularyServiceListHanCharRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Level

	if len(errors) > 0 {
		return VocabularyServiceListHanCharRequestMultiError(errors)
	}

	return nil
}

// VocabularyServiceListHanCharRequestMultiError is an error wrapping multiple
// validation errors returned by
// VocabularyServiceListHanCharRequest.ValidateAll() if the designated
// constraints aren't met.
type VocabularyServiceListHanCharRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VocabularyServiceListHanCharRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VocabularyServiceListHanCharRequestMultiError) AllErrors() []error { return m }

// VocabularyServiceListHanCharRequestValidationError is the validation error
// returned by VocabularyServiceListHanCharRequest.Validate if the designated
// constraints aren't met.
type VocabularyServiceListHanCharRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VocabularyServiceListHanCharRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VocabularyServiceListHanCharRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VocabularyServiceListHanCharRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VocabularyServiceListHanCharRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VocabularyServiceListHanCharRequestValidationError) ErrorName() string {
	return "VocabularyServiceListHanCharRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VocabularyServiceListHanCharRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVocabularyServiceListHanCharRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VocabularyServiceListHanCharRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VocabularyServiceListHanCharRequestValidationError{}

// Validate checks the field values on VocabularyServiceListHanCharResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *VocabularyServiceListHanCharResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VocabularyServiceListHanCharResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// VocabularyServiceListHanCharResponseMultiError, or nil if none found.
func (m *VocabularyServiceListHanCharResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *VocabularyServiceListHanCharResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetHanChars() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, VocabularyServiceListHanCharResponseValidationError{
						field:  fmt.Sprintf("HanChars[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, VocabularyServiceListHanCharResponseValidationError{
						field:  fmt.Sprintf("HanChars[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return VocabularyServiceListHanCharResponseValidationError{
					field:  fmt.Sprintf("HanChars[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return VocabularyServiceListHanCharResponseMultiError(errors)
	}

	return nil
}

// VocabularyServiceListHanCharResponseMultiError is an error wrapping multiple
// validation errors returned by
// VocabularyServiceListHanCharResponse.ValidateAll() if the designated
// constraints aren't met.
type VocabularyServiceListHanCharResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VocabularyServiceListHanCharResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VocabularyServiceListHanCharResponseMultiError) AllErrors() []error { return m }

// VocabularyServiceListHanCharResponseValidationError is the validation error
// returned by VocabularyServiceListHanCharResponse.Validate if the designated
// constraints aren't met.
type VocabularyServiceListHanCharResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VocabularyServiceListHanCharResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VocabularyServiceListHanCharResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VocabularyServiceListHanCharResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VocabularyServiceListHanCharResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VocabularyServiceListHanCharResponseValidationError) ErrorName() string {
	return "VocabularyServiceListHanCharResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VocabularyServiceListHanCharResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVocabularyServiceListHanCharResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VocabularyServiceListHanCharResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VocabularyServiceListHanCharResponseValidationError{}

// Validate checks the field values on VocabularyServiceAllCategoriesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *VocabularyServiceAllCategoriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VocabularyServiceAllCategoriesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// VocabularyServiceAllCategoriesRequestMultiError, or nil if none found.
func (m *VocabularyServiceAllCategoriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VocabularyServiceAllCategoriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VocabularyServiceAllCategoriesRequestMultiError(errors)
	}

	return nil
}

// VocabularyServiceAllCategoriesRequestMultiError is an error wrapping
// multiple validation errors returned by
// VocabularyServiceAllCategoriesRequest.ValidateAll() if the designated
// constraints aren't met.
type VocabularyServiceAllCategoriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VocabularyServiceAllCategoriesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VocabularyServiceAllCategoriesRequestMultiError) AllErrors() []error { return m }

// VocabularyServiceAllCategoriesRequestValidationError is the validation error
// returned by VocabularyServiceAllCategoriesRequest.Validate if the
// designated constraints aren't met.
type VocabularyServiceAllCategoriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VocabularyServiceAllCategoriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VocabularyServiceAllCategoriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VocabularyServiceAllCategoriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VocabularyServiceAllCategoriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VocabularyServiceAllCategoriesRequestValidationError) ErrorName() string {
	return "VocabularyServiceAllCategoriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VocabularyServiceAllCategoriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVocabularyServiceAllCategoriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VocabularyServiceAllCategoriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VocabularyServiceAllCategoriesRequestValidationError{}

// Validate checks the field values on VocabularyServiceAllCategoriesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *VocabularyServiceAllCategoriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// VocabularyServiceAllCategoriesResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// VocabularyServiceAllCategoriesResponseMultiError, or nil if none found.
func (m *VocabularyServiceAllCategoriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *VocabularyServiceAllCategoriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VocabularyServiceAllCategoriesResponseMultiError(errors)
	}

	return nil
}

// VocabularyServiceAllCategoriesResponseMultiError is an error wrapping
// multiple validation errors returned by
// VocabularyServiceAllCategoriesResponse.ValidateAll() if the designated
// constraints aren't met.
type VocabularyServiceAllCategoriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VocabularyServiceAllCategoriesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VocabularyServiceAllCategoriesResponseMultiError) AllErrors() []error { return m }

// VocabularyServiceAllCategoriesResponseValidationError is the validation
// error returned by VocabularyServiceAllCategoriesResponse.Validate if the
// designated constraints aren't met.
type VocabularyServiceAllCategoriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VocabularyServiceAllCategoriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VocabularyServiceAllCategoriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VocabularyServiceAllCategoriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VocabularyServiceAllCategoriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VocabularyServiceAllCategoriesResponseValidationError) ErrorName() string {
	return "VocabularyServiceAllCategoriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VocabularyServiceAllCategoriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVocabularyServiceAllCategoriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VocabularyServiceAllCategoriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VocabularyServiceAllCategoriesResponseValidationError{}

// Validate checks the field values on VocabularyServiceGetAllMetadataRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *VocabularyServiceGetAllMetadataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// VocabularyServiceGetAllMetadataRequest with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// VocabularyServiceGetAllMetadataRequestMultiError, or nil if none found.
func (m *VocabularyServiceGetAllMetadataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VocabularyServiceGetAllMetadataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VocabularyServiceGetAllMetadataRequestMultiError(errors)
	}

	return nil
}

// VocabularyServiceGetAllMetadataRequestMultiError is an error wrapping
// multiple validation errors returned by
// VocabularyServiceGetAllMetadataRequest.ValidateAll() if the designated
// constraints aren't met.
type VocabularyServiceGetAllMetadataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VocabularyServiceGetAllMetadataRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VocabularyServiceGetAllMetadataRequestMultiError) AllErrors() []error { return m }

// VocabularyServiceGetAllMetadataRequestValidationError is the validation
// error returned by VocabularyServiceGetAllMetadataRequest.Validate if the
// designated constraints aren't met.
type VocabularyServiceGetAllMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VocabularyServiceGetAllMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VocabularyServiceGetAllMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VocabularyServiceGetAllMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VocabularyServiceGetAllMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VocabularyServiceGetAllMetadataRequestValidationError) ErrorName() string {
	return "VocabularyServiceGetAllMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VocabularyServiceGetAllMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVocabularyServiceGetAllMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VocabularyServiceGetAllMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VocabularyServiceGetAllMetadataRequestValidationError{}

// Validate checks the field values on VocabularyServiceGetAllMetadataResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *VocabularyServiceGetAllMetadataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// VocabularyServiceGetAllMetadataResponse with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// VocabularyServiceGetAllMetadataResponseMultiError, or nil if none found.
func (m *VocabularyServiceGetAllMetadataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *VocabularyServiceGetAllMetadataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VocabularyServiceGetAllMetadataResponseMultiError(errors)
	}

	return nil
}

// VocabularyServiceGetAllMetadataResponseMultiError is an error wrapping
// multiple validation errors returned by
// VocabularyServiceGetAllMetadataResponse.ValidateAll() if the designated
// constraints aren't met.
type VocabularyServiceGetAllMetadataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VocabularyServiceGetAllMetadataResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VocabularyServiceGetAllMetadataResponseMultiError) AllErrors() []error { return m }

// VocabularyServiceGetAllMetadataResponseValidationError is the validation
// error returned by VocabularyServiceGetAllMetadataResponse.Validate if the
// designated constraints aren't met.
type VocabularyServiceGetAllMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VocabularyServiceGetAllMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VocabularyServiceGetAllMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VocabularyServiceGetAllMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VocabularyServiceGetAllMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VocabularyServiceGetAllMetadataResponseValidationError) ErrorName() string {
	return "VocabularyServiceGetAllMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VocabularyServiceGetAllMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVocabularyServiceGetAllMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VocabularyServiceGetAllMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VocabularyServiceGetAllMetadataResponseValidationError{}

// Validate checks the field values on VocabularyServiceBatchCreateRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *VocabularyServiceBatchCreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VocabularyServiceBatchCreateRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// VocabularyServiceBatchCreateRequestMultiError, or nil if none found.
func (m *VocabularyServiceBatchCreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VocabularyServiceBatchCreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetWords() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, VocabularyServiceBatchCreateRequestValidationError{
						field:  fmt.Sprintf("Words[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, VocabularyServiceBatchCreateRequestValidationError{
						field:  fmt.Sprintf("Words[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return VocabularyServiceBatchCreateRequestValidationError{
					field:  fmt.Sprintf("Words[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return VocabularyServiceBatchCreateRequestMultiError(errors)
	}

	return nil
}

// VocabularyServiceBatchCreateRequestMultiError is an error wrapping multiple
// validation errors returned by
// VocabularyServiceBatchCreateRequest.ValidateAll() if the designated
// constraints aren't met.
type VocabularyServiceBatchCreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VocabularyServiceBatchCreateRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VocabularyServiceBatchCreateRequestMultiError) AllErrors() []error { return m }

// VocabularyServiceBatchCreateRequestValidationError is the validation error
// returned by VocabularyServiceBatchCreateRequest.Validate if the designated
// constraints aren't met.
type VocabularyServiceBatchCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VocabularyServiceBatchCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VocabularyServiceBatchCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VocabularyServiceBatchCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VocabularyServiceBatchCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VocabularyServiceBatchCreateRequestValidationError) ErrorName() string {
	return "VocabularyServiceBatchCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VocabularyServiceBatchCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVocabularyServiceBatchCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VocabularyServiceBatchCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VocabularyServiceBatchCreateRequestValidationError{}

// Validate checks the field values on VocabularyServiceBatchCreateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *VocabularyServiceBatchCreateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VocabularyServiceBatchCreateResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// VocabularyServiceBatchCreateResponseMultiError, or nil if none found.
func (m *VocabularyServiceBatchCreateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *VocabularyServiceBatchCreateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VocabularyServiceBatchCreateResponseMultiError(errors)
	}

	return nil
}

// VocabularyServiceBatchCreateResponseMultiError is an error wrapping multiple
// validation errors returned by
// VocabularyServiceBatchCreateResponse.ValidateAll() if the designated
// constraints aren't met.
type VocabularyServiceBatchCreateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VocabularyServiceBatchCreateResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VocabularyServiceBatchCreateResponseMultiError) AllErrors() []error { return m }

// VocabularyServiceBatchCreateResponseValidationError is the validation error
// returned by VocabularyServiceBatchCreateResponse.Validate if the designated
// constraints aren't met.
type VocabularyServiceBatchCreateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VocabularyServiceBatchCreateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VocabularyServiceBatchCreateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VocabularyServiceBatchCreateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VocabularyServiceBatchCreateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VocabularyServiceBatchCreateResponseValidationError) ErrorName() string {
	return "VocabularyServiceBatchCreateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VocabularyServiceBatchCreateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVocabularyServiceBatchCreateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VocabularyServiceBatchCreateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VocabularyServiceBatchCreateResponseValidationError{}

// Validate checks the field values on
// VocabularyServiceBatchCreateHanCharRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VocabularyServiceBatchCreateHanCharRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// VocabularyServiceBatchCreateHanCharRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// VocabularyServiceBatchCreateHanCharRequestMultiError, or nil if none found.
func (m *VocabularyServiceBatchCreateHanCharRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VocabularyServiceBatchCreateHanCharRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetHanChars() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, VocabularyServiceBatchCreateHanCharRequestValidationError{
						field:  fmt.Sprintf("HanChars[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, VocabularyServiceBatchCreateHanCharRequestValidationError{
						field:  fmt.Sprintf("HanChars[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return VocabularyServiceBatchCreateHanCharRequestValidationError{
					field:  fmt.Sprintf("HanChars[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return VocabularyServiceBatchCreateHanCharRequestMultiError(errors)
	}

	return nil
}

// VocabularyServiceBatchCreateHanCharRequestMultiError is an error wrapping
// multiple validation errors returned by
// VocabularyServiceBatchCreateHanCharRequest.ValidateAll() if the designated
// constraints aren't met.
type VocabularyServiceBatchCreateHanCharRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VocabularyServiceBatchCreateHanCharRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VocabularyServiceBatchCreateHanCharRequestMultiError) AllErrors() []error { return m }

// VocabularyServiceBatchCreateHanCharRequestValidationError is the validation
// error returned by VocabularyServiceBatchCreateHanCharRequest.Validate if
// the designated constraints aren't met.
type VocabularyServiceBatchCreateHanCharRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VocabularyServiceBatchCreateHanCharRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VocabularyServiceBatchCreateHanCharRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VocabularyServiceBatchCreateHanCharRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VocabularyServiceBatchCreateHanCharRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VocabularyServiceBatchCreateHanCharRequestValidationError) ErrorName() string {
	return "VocabularyServiceBatchCreateHanCharRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VocabularyServiceBatchCreateHanCharRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVocabularyServiceBatchCreateHanCharRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VocabularyServiceBatchCreateHanCharRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VocabularyServiceBatchCreateHanCharRequestValidationError{}

// Validate checks the field values on
// VocabularyServiceBatchCreateHanCharResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *VocabularyServiceBatchCreateHanCharResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// VocabularyServiceBatchCreateHanCharResponse with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in
// VocabularyServiceBatchCreateHanCharResponseMultiError, or nil if none found.
func (m *VocabularyServiceBatchCreateHanCharResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *VocabularyServiceBatchCreateHanCharResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VocabularyServiceBatchCreateHanCharResponseMultiError(errors)
	}

	return nil
}

// VocabularyServiceBatchCreateHanCharResponseMultiError is an error wrapping
// multiple validation errors returned by
// VocabularyServiceBatchCreateHanCharResponse.ValidateAll() if the designated
// constraints aren't met.
type VocabularyServiceBatchCreateHanCharResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VocabularyServiceBatchCreateHanCharResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VocabularyServiceBatchCreateHanCharResponseMultiError) AllErrors() []error { return m }

// VocabularyServiceBatchCreateHanCharResponseValidationError is the validation
// error returned by VocabularyServiceBatchCreateHanCharResponse.Validate if
// the designated constraints aren't met.
type VocabularyServiceBatchCreateHanCharResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VocabularyServiceBatchCreateHanCharResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VocabularyServiceBatchCreateHanCharResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VocabularyServiceBatchCreateHanCharResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VocabularyServiceBatchCreateHanCharResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VocabularyServiceBatchCreateHanCharResponseValidationError) ErrorName() string {
	return "VocabularyServiceBatchCreateHanCharResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VocabularyServiceBatchCreateHanCharResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVocabularyServiceBatchCreateHanCharResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VocabularyServiceBatchCreateHanCharResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VocabularyServiceBatchCreateHanCharResponseValidationError{}
