// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/v1/ai_chat.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AIChatService_Chat_FullMethodName       = "/v1.AIChatService/Chat"
	AIChatService_StreamChat_FullMethodName = "/v1.AIChatService/StreamChat"
)

// AIChatServiceClient is the client API for AIChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AIChatServiceClient interface {
	Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatResponse, error)
	StreamChat(ctx context.Context, in *StreamChatRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatResponse], error)
}

type aIChatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAIChatServiceClient(cc grpc.ClientConnInterface) AIChatServiceClient {
	return &aIChatServiceClient{cc}
}

func (c *aIChatServiceClient) Chat(ctx context.Context, in *ChatRequest, opts ...grpc.CallOption) (*ChatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChatResponse)
	err := c.cc.Invoke(ctx, AIChatService_Chat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aIChatServiceClient) StreamChat(ctx context.Context, in *StreamChatRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ChatResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AIChatService_ServiceDesc.Streams[0], AIChatService_StreamChat_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamChatRequest, ChatResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AIChatService_StreamChatClient = grpc.ServerStreamingClient[ChatResponse]

// AIChatServiceServer is the server API for AIChatService service.
// All implementations must embed UnimplementedAIChatServiceServer
// for forward compatibility.
type AIChatServiceServer interface {
	Chat(context.Context, *ChatRequest) (*ChatResponse, error)
	StreamChat(*StreamChatRequest, grpc.ServerStreamingServer[ChatResponse]) error
	mustEmbedUnimplementedAIChatServiceServer()
}

// UnimplementedAIChatServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAIChatServiceServer struct{}

func (UnimplementedAIChatServiceServer) Chat(context.Context, *ChatRequest) (*ChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedAIChatServiceServer) StreamChat(*StreamChatRequest, grpc.ServerStreamingServer[ChatResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamChat not implemented")
}
func (UnimplementedAIChatServiceServer) mustEmbedUnimplementedAIChatServiceServer() {}
func (UnimplementedAIChatServiceServer) testEmbeddedByValue()                       {}

// UnsafeAIChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AIChatServiceServer will
// result in compilation errors.
type UnsafeAIChatServiceServer interface {
	mustEmbedUnimplementedAIChatServiceServer()
}

func RegisterAIChatServiceServer(s grpc.ServiceRegistrar, srv AIChatServiceServer) {
	// If the following call pancis, it indicates UnimplementedAIChatServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AIChatService_ServiceDesc, srv)
}

func _AIChatService_Chat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AIChatServiceServer).Chat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AIChatService_Chat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AIChatServiceServer).Chat(ctx, req.(*ChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AIChatService_StreamChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamChatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AIChatServiceServer).StreamChat(m, &grpc.GenericServerStream[StreamChatRequest, ChatResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AIChatService_StreamChatServer = grpc.ServerStreamingServer[ChatResponse]

// AIChatService_ServiceDesc is the grpc.ServiceDesc for AIChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AIChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.AIChatService",
	HandlerType: (*AIChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Chat",
			Handler:    _AIChatService_Chat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamChat",
			Handler:       _AIChatService_StreamChat_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/v1/ai_chat.proto",
}
