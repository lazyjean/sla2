#+title: Notes

* sla-backend (old project)
** graphql 引入了更大的复杂度，大部时间用在了这里，低价值
** 使用 graphql 的过程中，由于其接口的灵活性，导致接口的设计更不稳定，比grpc更复杂，并不能不写代码的情况下，支持复杂的接口
** 大量模块偶合在一起，产生了额外复杂性，难以管理和维护，比如将管理模块，课程模块，权限模块，用户模块进行偶合的设计，导致复杂性的直接提升，这里需要找到一种松偶合的设计，可以整合现有的模块和库来完成目标
** 在 sla 中统一的用词模块，可能是一个更好的实践，上层可以使用简单的权限控制不同模块的权限，来达到隔离的目标
**
** 花了大量的精力来维护命令行的形式，性价比极低
*  sla2
** gin + swagger 的组合看起来不错，不过 swagger 的注解有些复杂，注解直接影响最终的文档能否可用，这一点不如 grpc
* sla
**
* 需求整理及思考
** 认字功能
目标:
让小朋友快速的学会常见字

方法:
1. 快速测试, 找出不认识的字
2. 反复学习不认识的字, 直到会认, 会读
3. 能过复习巩固学习成果

特殊设计
1. 无

问题:
用户为什么选择这个功能?
1. 当前没有软件可以快速考查小朋友认了多少字
2. 有没有更有趣的功能?

分年级分类内容是否更好?
NOTE: 在校生可能更关注是否完成课内的任务

** 英语学习
我怎么看待教育? 我的目标又是什么?
1. 原始的需求只有一个, 就是掌握英语!

成功案例非常的重要!!!

* converter vs mapper
converter 强调直接的结构转换, 不存在业务逻辑
mapper 强制映射, 可能字段名, 结构会有所调整
* transport layer 接口层
职责分离
当前设计:
- transport/grpc/xxxx/server.go 业务接口
- transport/grpc/xxxx/converter/xxx.go 数据结构转换, 职责分享设计
