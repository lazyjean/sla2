#+title: Notes

* sla-backend (old project)
** graphql 引入了更大的复杂度，大部时间用在了这里，低价值
** 使用 graphql 的过程中，由于其接口的灵活性，导致接口的设计更不稳定，比grpc更复杂，并不能不写代码的情况下，支持复杂的接口
** 大量模块偶合在一起，产生了额外复杂性，难以管理和维护，比如将管理模块，课程模块，权限模拟，用户模块进行偶合的设计，导致复杂性的直接提升，这里需要找到一种松偶合的设计，可以整合现有的模块和库来完成目标
** 在 sla 中统一的用词模块，可能是一个更好的实践，上层可以使用简单的权限控制不同模块的权限，来达到隔离的目标
**
** 花了大量的精力来维护命令行的形式，性价比极低
*  sla2
** gin + swagger 的组合看起来不错，不过 swagger 的注解有些复杂，注解直接影响最终的文档能否可用，这一点不如 grpc
* sla
**
