// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/google/wire"
	"github.com/lazyjean/sla2/config"
	"github.com/lazyjean/sla2/internal/application/service"
	"github.com/lazyjean/sla2/internal/infrastructure/ai"
	"github.com/lazyjean/sla2/internal/infrastructure/cache/redis"
	"github.com/lazyjean/sla2/internal/infrastructure/oauth"
	"github.com/lazyjean/sla2/internal/infrastructure/persistence/postgres"
	"github.com/lazyjean/sla2/internal/infrastructure/security"
	"github.com/lazyjean/sla2/internal/interfaces/grpc"
	"github.com/lazyjean/sla2/pkg/logger"
	"go.uber.org/zap"
)

// Injectors from wire.go:

func InitializeApp(cfg *config.Config) (*App, error) {
	databaseConfig := &cfg.Database
	db, err := postgres.NewDB(databaseConfig)
	if err != nil {
		return nil, err
	}
	adminRepository := postgres.NewAdminRepository(db)
	passwordService := security.NewBCryptPasswordService()
	tokenService := security.NewJWTTokenService(cfg)
	adminService := service.NewAdminService(adminRepository, passwordService, tokenService)
	userRepository := postgres.NewUserRepository(db)
	appleConfig := oauth.NewAppleConfig(cfg)
	appleAuthService := oauth.NewAppleAuthService(appleConfig)
	userService := service.NewUserService(userRepository, tokenService, passwordService, appleAuthService)
	wordRepository := postgres.NewWordRepository(db)
	redisConfig := &cfg.Redis
	cache, err := redis.NewRedisCache(redisConfig)
	if err != nil {
		return nil, err
	}
	cachedWordRepository := postgres.NewCachedWordRepository(wordRepository, cache)
	wordService := service.NewWordService(cachedWordRepository)
	learningRepository := postgres.NewLearningRepository(db)
	learningService := service.NewLearningService(learningRepository)
	courseRepository := postgres.NewCourseRepository(db)
	courseSectionRepository := postgres.NewCourseSectionRepository(db)
	courseService := service.NewCourseService(courseRepository, courseSectionRepository)
	questionRepository := postgres.NewQuestionRepository(db)
	questionService := service.NewQuestionService(questionRepository)
	questionTagRepository := postgres.NewQuestionTagRepository(db)
	questionTagService := service.NewQuestionTagService(questionTagRepository)
	deepSeekConfig := ProvideDeepSeekConfig(cfg)
	logger := ProvideLogger()
	deepSeekService := ai.NewDeepSeekService(deepSeekConfig, logger)
	chatHistoryRepository := postgres.NewChatHistoryRepository(db)
	aiService := service.NewAIService(deepSeekService, chatHistoryRepository)
	server := grpc.NewServer(adminService, userService, wordService, learningService, courseService, questionService, questionTagService, aiService, tokenService, cfg)
	app := NewApp(server, cfg, tokenService, appleAuthService)
	return app, nil
}

// wire.go:

// 提供 Logger 实例
func ProvideLogger() *zap.Logger {

	return logger.Log
}

// 提供 DeepSeekConfig 配置
func ProvideDeepSeekConfig(cfg *config.Config) *ai.DeepSeekConfig {
	return &ai.DeepSeekConfig{
		APIKey:      cfg.DeepSeek.APIKey,
		BaseURL:     cfg.DeepSeek.BaseURL,
		Timeout:     cfg.DeepSeek.Timeout,
		MaxRetries:  cfg.DeepSeek.MaxRetries,
		Temperature: cfg.DeepSeek.Temperature,
		MaxTokens:   cfg.DeepSeek.MaxTokens,
	}
}

// 配置集
var configSet = wire.NewSet(wire.FieldsOf(new(*config.Config), "Database", "Redis", "JWT", "Apple"))

// 数据库集
var dbSet = wire.NewSet(postgres.NewDB)

// redis仓库集
var cacheSet = wire.NewSet(redis.NewRedisCache)

// 仓储集
var repositorySet = wire.NewSet(postgres.NewWordRepository, postgres.NewCachedWordRepository, postgres.NewLearningRepository, postgres.NewUserRepository, postgres.NewCourseRepository, postgres.NewCourseSectionRepository, postgres.NewAdminRepository, postgres.NewQuestionTagRepository, postgres.NewQuestionRepository, postgres.NewChatHistoryRepository)

// AI 服务集
var aiSet = wire.NewSet(service.NewAIService, ai.NewDeepSeekService, wire.Bind(new(service.DeepSeekService), new(*ai.DeepSeekService)), ProvideLogger,
	ProvideDeepSeekConfig,
)

// 服务集
var serviceSet = wire.NewSet(service.NewWordService, service.NewLearningService, service.NewUserService, service.NewCourseService, service.NewAdminService, service.NewQuestionService, service.NewQuestionTagService)

// 认证集
var authSet = wire.NewSet(oauth.NewAppleConfig, oauth.NewAppleAuthService)

// 安全服务集
var securitySet = wire.NewSet(security.NewBCryptPasswordService, security.NewJWTTokenService)
