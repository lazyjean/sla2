// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/google/wire"
	"github.com/lazyjean/sla2/config"
	"github.com/lazyjean/sla2/internal/application/service"
	security2 "github.com/lazyjean/sla2/internal/domain/security"
	service2 "github.com/lazyjean/sla2/internal/domain/service"
	"github.com/lazyjean/sla2/internal/infrastructure/cache/redis"
	"github.com/lazyjean/sla2/internal/infrastructure/listen"
	"github.com/lazyjean/sla2/internal/infrastructure/oauth"
	"github.com/lazyjean/sla2/internal/infrastructure/persistence/postgres"
	"github.com/lazyjean/sla2/internal/infrastructure/security"
	"github.com/lazyjean/sla2/internal/infrastructure/test"
	"github.com/lazyjean/sla2/internal/infrastructure/validator"
	"github.com/lazyjean/sla2/internal/transport/grpc"
	"github.com/lazyjean/sla2/internal/transport/grpc/admin"
	converter4 "github.com/lazyjean/sla2/internal/transport/grpc/admin/converter"
	"github.com/lazyjean/sla2/internal/transport/grpc/course"
	converter2 "github.com/lazyjean/sla2/internal/transport/grpc/course/converter"
	"github.com/lazyjean/sla2/internal/transport/grpc/learning"
	converter5 "github.com/lazyjean/sla2/internal/transport/grpc/learning/converter"
	"github.com/lazyjean/sla2/internal/transport/grpc/middleware"
	"github.com/lazyjean/sla2/internal/transport/grpc/question"
	"github.com/lazyjean/sla2/internal/transport/grpc/question/converter"
	"github.com/lazyjean/sla2/internal/transport/grpc/user"
	"github.com/lazyjean/sla2/internal/transport/grpc/vocabulary"
	converter3 "github.com/lazyjean/sla2/internal/transport/grpc/vocabulary/converter"
	"github.com/lazyjean/sla2/internal/transport/http/ws/handler"
	"github.com/lazyjean/sla2/pkg/logger"
	"testing"
)

// Injectors from wire.go:

// InitializeApp 初始化应用程序
func InitializeApp() (*Application, error) {
	configConfig := config.GetConfig()
	webSocketHandler := handler.NewWebSocketHandler()
	tokenService := security.NewJWTTokenService(configConfig)
	listener := listen.NewListener()
	logConfig := &configConfig.Log
	zapLogger := logger.NewAppLogger(logConfig)
	registry := middleware.NewRegistry()
	serverMetrics := middleware.NewMetrics(registry)
	server := grpc.NewServer(serverMetrics, zapLogger, tokenService)
	databaseConfig := &configConfig.Database
	db, err := postgres.NewDB(databaseConfig)
	if err != nil {
		return nil, err
	}
	userRepository := postgres.NewUserRepository(db)
	passwordService := security.NewBCryptPasswordService()
	appleAuthService := oauth.NewAppleAuthService(configConfig)
	userService := service.NewUserService(userRepository, tokenService, passwordService, appleAuthService)
	service3 := user.NewUserService(userService)
	learningRepository := postgres.NewLearningRepository(db)
	memoryUnitRepository := postgres.NewMemoryUnitRepository(db)
	wordRepository := postgres.NewVocabularyRepository(db)
	hanCharRepository := postgres.NewHanCharRepository(db)
	memoryService := service2.NewMemoryService(memoryUnitRepository)
	vocabularyService := service.NewVocabularyService(hanCharRepository, wordRepository)
	learningService := service.NewLearningService(learningRepository, memoryUnitRepository, wordRepository, hanCharRepository, memoryService, vocabularyService)
	service4 := learning.NewLearningService(learningService, vocabularyService)
	courseRepository := postgres.NewCourseRepository(db)
	courseSectionRepository := postgres.NewCourseSectionRepository(db)
	courseSectionUnitRepository := postgres.NewCourseSectionUnitRepository(db)
	courseService := service.NewCourseService(courseRepository, courseSectionRepository, courseSectionUnitRepository)
	service5 := course.NewCourseService(courseService)
	adminRepository := postgres.NewAdminRepository(db)
	rbacConfig := &configConfig.RBAC
	rbacProvider, err := security2.NewRBACProvider(db, rbacConfig, zapLogger)
	if err != nil {
		return nil, err
	}
	permissionHelper := rbacProvider.PermissionHelper
	adminService := service.NewAdminService(adminRepository, passwordService, tokenService, permissionHelper)
	service6 := admin.NewAdminService(adminService)
	questionRepository := postgres.NewQuestionRepository(db)
	questionService := service.NewQuestionService(questionRepository)
	questionConverter := converter.NewQuestionConverter()
	service7 := question.NewQuestionService(questionService, questionConverter)
	service8 := vocabulary.NewVocabularyService(vocabularyService)
	grpcServer := grpc.NewGRPCServer(webSocketHandler, tokenService, listener, zapLogger, server, service3, service4, service5, service6, service7, service8)
	application := NewApplication(configConfig, grpcServer, zapLogger)
	return application, nil
}

func InitializeTestApp(t *testing.T) (*Application, error) {
	configConfig := config.GetConfig()
	webSocketHandler := handler.NewWebSocketHandler()
	mockTokenService := test.NewMockTokenService()
	listener := test.NewTestListener()
	logConfig := &configConfig.Log
	zapLogger := logger.NewAppLogger(logConfig)
	registry := middleware.NewRegistry()
	serverMetrics := middleware.NewMetrics(registry)
	server := grpc.NewServer(serverMetrics, zapLogger, mockTokenService)
	db := test.NewTestDB(t)
	userRepository := postgres.NewUserRepository(db)
	passwordService := security.NewBCryptPasswordService()
	appleAuthService := test.NewMockAppleAuthService()
	userService := service.NewUserService(userRepository, mockTokenService, passwordService, appleAuthService)
	service3 := user.NewUserService(userService)
	learningRepository := postgres.NewLearningRepository(db)
	memoryUnitRepository := postgres.NewMemoryUnitRepository(db)
	wordRepository := postgres.NewVocabularyRepository(db)
	hanCharRepository := postgres.NewHanCharRepository(db)
	memoryService := service2.NewMemoryService(memoryUnitRepository)
	vocabularyService := service.NewVocabularyService(hanCharRepository, wordRepository)
	learningService := service.NewLearningService(learningRepository, memoryUnitRepository, wordRepository, hanCharRepository, memoryService, vocabularyService)
	service4 := learning.NewLearningService(learningService, vocabularyService)
	courseRepository := postgres.NewCourseRepository(db)
	courseSectionRepository := postgres.NewCourseSectionRepository(db)
	courseSectionUnitRepository := postgres.NewCourseSectionUnitRepository(db)
	courseService := service.NewCourseService(courseRepository, courseSectionRepository, courseSectionUnitRepository)
	service5 := course.NewCourseService(courseService)
	adminRepository := postgres.NewAdminRepository(db)
	rbacConfig := &configConfig.RBAC
	rbacProvider, err := security2.NewRBACProvider(db, rbacConfig, zapLogger)
	if err != nil {
		return nil, err
	}
	permissionHelper := rbacProvider.PermissionHelper
	adminService := service.NewAdminService(adminRepository, passwordService, mockTokenService, permissionHelper)
	service6 := admin.NewAdminService(adminService)
	questionRepository := postgres.NewQuestionRepository(db)
	questionService := service.NewQuestionService(questionRepository)
	questionConverter := converter.NewQuestionConverter()
	service7 := question.NewQuestionService(questionService, questionConverter)
	service8 := vocabulary.NewVocabularyService(vocabularyService)
	grpcServer := grpc.NewGRPCServer(webSocketHandler, mockTokenService, listener, zapLogger, server, service3, service4, service5, service6, service7, service8)
	application := NewApplication(configConfig, grpcServer, zapLogger)
	return application, nil
}

// wire.go:

// 配置集
var configSet = wire.NewSet(config.GetConfig, wire.FieldsOf(new(*config.Config), "Database", "Redis", "JWT", "Apple", "RBAC", "Log"))

// 数据库集
var dbSet = wire.NewSet(postgres.NewDB)

var testDBSet = wire.NewSet(test.NewTestDB)

// redis仓库集
var cacheSet = wire.NewSet(redis.NewRedisCache)

// 仓储集
var repositorySet = wire.NewSet(postgres.NewVocabularyRepository, postgres.NewCachedWordRepository, postgres.NewLearningRepository, postgres.NewUserRepository, postgres.NewCourseRepository, postgres.NewCourseSectionRepository, postgres.NewCourseSectionUnitRepository, postgres.NewAdminRepository, postgres.NewQuestionRepository, postgres.NewHanCharRepository, postgres.NewMemoryUnitRepository)

// 转换器
var converterSet = wire.NewSet(converter2.NewCourseConverter, converter3.NewVocabularyConverter, converter.NewQuestionConverter, converter4.NewAdminConverter, converter5.NewLearningConverter)

// 服务集
var serviceSet = wire.NewSet(service2.NewMemoryService, service.NewVocabularyService, service.NewLearningService, service.NewUserService, service.NewCourseService, service.NewQuestionService, service.NewAdminService)

// 认证集
var authSet = wire.NewSet(oauth.NewAppleAuthService)

var testAuthSet = wire.NewSet(test.NewMockAppleAuthService)

// 安全服务集
var securitySet = wire.NewSet(security.NewBCryptPasswordService, security.NewJWTTokenService)

// WebSocket处理器集
var wsSet = wire.NewSet(handler.NewWebSocketHandler)

// transport 服务集
var transportSet = wire.NewSet(user.NewUserService, question.NewQuestionService, course.NewCourseService, learning.NewLearningService, admin.NewAdminService, vocabulary.NewVocabularyService)

// gRPC服务器集
var grpcSet = wire.NewSet(listen.NewListener, grpc.NewGRPCServer, grpc.NewServer)

var bufConnGrpcSet = wire.NewSet(test.NewTestListener, grpc.NewGRPCServer, grpc.NewServer)

// 提供 PermissionHelper
func ProvidePermissionHelper(rbacConfig *config.RBACConfig) *security2.PermissionHelper {
	return &security2.PermissionHelper{}
}

// RBAC权限集
var rbacSet = wire.NewSet(security2.NewRBACProvider, wire.FieldsOf(new(*security2.RBACProvider), "PermissionHelper"))

// 测试安全服务集
var testSecuritySet = wire.NewSet(test.NewMockTokenService, wire.Bind(new(security2.TokenService), new(*test.MockTokenService)), security.NewBCryptPasswordService)

// 验证器集
var validatorSet = wire.NewSet(validator.NewValidator)

// 测试验证器集
var testValidatorSet = wire.NewSet(validator.NewValidator)
